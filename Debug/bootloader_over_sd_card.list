
bootloader_over_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800af10  0800af10  0001af10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb28  0800bb28  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb30  0800bb30  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb34  0800bb34  0001bb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bb38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  200001e0  0800bd18  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f94  0800bd18  00020f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d4d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035e8  00000000  00000000  00035f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0003a410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024915  00000000  00000000  0003b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010979  00000000  00000000  0005fa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8937  00000000  00000000  0007039e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138cd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000470c  00000000  00000000  00138d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aef4 	.word	0x0800aef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aef4 	.word	0x0800aef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <__NVIC_SystemReset+0x20>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eb8:	4903      	ldr	r1, [pc, #12]	; (8000ec8 <__NVIC_SystemReset+0x20>)
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_SystemReset+0x24>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60cb      	str	r3, [r1, #12]
 8000ec0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <__NVIC_SystemReset+0x1c>
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	05fa0004 	.word	0x05fa0004

08000ed0 <jump_to_user_app>:
bl_t bl;

static uint32_t write_address = FLASH_USER_START_ADDR;

static void jump_to_user_app(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);
	uint32_t JumpAddress = *(__IO uint32_t*) (FLASH_USER_START_ADDR + 4);
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <jump_to_user_app+0x28>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]
	pFunction Jump_To_App = (pFunction) JumpAddress;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	60bb      	str	r3, [r7, #8]
	__set_MSP(*(__IO uint32_t*) FLASH_USER_START_ADDR);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <jump_to_user_app+0x2c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f383 8808 	msr	MSP, r3
	Jump_To_App();
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4798      	blx	r3
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08020004 	.word	0x08020004
 8000efc:	08020000 	.word	0x08020000

08000f00 <bl_welcome_message>:

static void bl_welcome_message(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	printf("*******************************************\n"
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <bl_welcome_message+0x10>)
 8000f06:	f008 f939 	bl	800917c <puts>
		   "*********** STM32 SD Bootloader ***********\n"
		   "*******************************************\n");
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800af10 	.word	0x0800af10

08000f14 <bl_check_sd_card>:

static void bl_check_sd_card(bl_t *bl)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if (SD_CARD_IS_INSERTED()){
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <bl_check_sd_card+0x3c>)
 8000f22:	f002 f813 	bl	8002f4c <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <bl_check_sd_card+0x22>
		bl->state = BL_SD_EXIST;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	else{
		bl->err = BL_SD_NOT_EXIST;
		bl->state = BL_ERR;
	}
}
 8000f34:	e007      	b.n	8000f46 <bl_check_sd_card+0x32>
		bl->err = BL_SD_NOT_EXIST;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	220c      	movs	r2, #12
 8000f42:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021c00 	.word	0x40021c00

08000f54 <bl_open_firmware_file>:

static void bl_open_firmware_file(bl_t *bl)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if (sd_file_open_for_read(&bl->sd, FW_FILE_NAME) == SD_SUCCESS){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4919      	ldr	r1, [pc, #100]	; (8000fc4 <bl_open_firmware_file+0x70>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fe1f 	bl	8001ba4 <sd_file_open_for_read>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <bl_open_firmware_file+0x58>
		BL_PRINT("Firmware file is successully opened\n");
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <bl_open_firmware_file+0x74>)
 8000f74:	f008 f88e 	bl	8009094 <iprintf>
 8000f78:	4814      	ldr	r0, [pc, #80]	; (8000fcc <bl_open_firmware_file+0x78>)
 8000f7a:	f008 f8ff 	bl	800917c <puts>
		bl->fw_size = sd_get_file_size(&bl->sd);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 feb8 	bl	8001cf6 <sd_get_file_size>
 8000f86:	4602      	mov	r2, r0
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
		BL_PRINT("Firmware file size: %ld\n", bl->fw_size);
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <bl_open_firmware_file+0x74>)
 8000f90:	f008 f880 	bl	8009094 <iprintf>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <bl_open_firmware_file+0x7c>)
 8000f9e:	f008 f879 	bl	8009094 <iprintf>
		bl->state = BL_FW_FILE_EXIST;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	else{
		bl->err = BL_FW_FILE_NOT_EXIST;
		bl->state = BL_ERR;
	}
}
 8000faa:	e007      	b.n	8000fbc <bl_open_firmware_file+0x68>
		bl->err = BL_FW_FILE_NOT_EXIST;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0800af94 	.word	0x0800af94
 8000fc8:	0800afa4 	.word	0x0800afa4
 8000fcc:	0800afb0 	.word	0x0800afb0
 8000fd0:	0800afd4 	.word	0x0800afd4

08000fd4 <bl_read_firmware>:

static void bl_read_firmware(bl_t *bl)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	static uint32_t read_cycle = 0;

	bool read_error = false;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

	read_error = sd_file_read(&bl->sd, bl->data, FW_MEM_BLOCK);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f203 4372 	addw	r3, r3, #1138	; 0x472
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	4619      	mov	r1, r3
 8000fee:	f000 fe3f 	bl	8001c70 <sd_file_read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]

	if (read_error || bl->sd.read_bytes == 0){
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <bl_read_firmware+0x32>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d108      	bne.n	8001018 <bl_read_firmware+0x44>
		bl->err = BL_FW_FILE_READ_ERR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2206      	movs	r2, #6
 800100a:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	220c      	movs	r2, #12
 8001012:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8001016:	e084      	b.n	8001122 <bl_read_firmware+0x14e>
	}

	else if (!read_error && bl->sd.read_bytes < FW_MEM_BLOCK){
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d06f      	beq.n	8001104 <bl_read_firmware+0x130>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 800102a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800102e:	d269      	bcs.n	8001104 <bl_read_firmware+0x130>
			bl->total_read_size += bl->sd.read_bytes;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 2678 	ldr.w	r2, [r3, #1656]	; 0x678
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 800103c:	441a      	add	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
			BL_PRINT("Read is completed. read_cycle: %ld\n", read_cycle);
 8001044:	4839      	ldr	r0, [pc, #228]	; (800112c <bl_read_firmware+0x158>)
 8001046:	f008 f825 	bl	8009094 <iprintf>
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <bl_read_firmware+0x15c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	4838      	ldr	r0, [pc, #224]	; (8001134 <bl_read_firmware+0x160>)
 8001052:	f008 f81f 	bl	8009094 <iprintf>
			BL_PRINT("Last read bytes: %ld\n", bl->sd.read_bytes);
 8001056:	4835      	ldr	r0, [pc, #212]	; (800112c <bl_read_firmware+0x158>)
 8001058:	f008 f81c 	bl	8009094 <iprintf>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001062:	4619      	mov	r1, r3
 8001064:	4834      	ldr	r0, [pc, #208]	; (8001138 <bl_read_firmware+0x164>)
 8001066:	f008 f815 	bl	8009094 <iprintf>

			bl->crc[0] = bl->data[bl->sd.read_bytes - 1];
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001070:	3b01      	subs	r3, #1
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	f893 2472 	ldrb.w	r2, [r3, #1138]	; 0x472
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
			bl->crc[1] = bl->data[bl->sd.read_bytes - 2];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001086:	3b02      	subs	r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	f893 2472 	ldrb.w	r2, [r3, #1138]	; 0x472
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
			bl->crc[2] = bl->data[bl->sd.read_bytes - 3];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 800109c:	3b03      	subs	r3, #3
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	f893 2472 	ldrb.w	r2, [r3, #1138]	; 0x472
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e
			bl->crc[3] = bl->data[bl->sd.read_bytes - 4];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 80010b2:	3b04      	subs	r3, #4
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	f893 2472 	ldrb.w	r2, [r3, #1138]	; 0x472
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f883 267f 	strb.w	r2, [r3, #1663]	; 0x67f

			read_cycle = 0;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <bl_read_firmware+0x15c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
			sd_file_rewind(&bl->sd);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fe04 	bl	8001cd8 <sd_file_rewind>

			if (bl->total_read_size == bl->fw_size){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 2678 	ldr.w	r2, [r3, #1656]	; 0x678
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80010dc:	429a      	cmp	r2, r3
 80010de:	d108      	bne.n	80010f2 <bl_read_firmware+0x11e>
				bl->state = BL_FW_FILE_READ_FINISHED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2208      	movs	r2, #8
 80010e4:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
				bl->total_read_size = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
			if (bl->total_read_size == bl->fw_size){
 80010f0:	e017      	b.n	8001122 <bl_read_firmware+0x14e>
			}

			else{
				bl->err = BL_FW_SIZE_DOES_NOT_MATCH_READ_SIZE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2208      	movs	r2, #8
 80010f6:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
				bl->state = BL_ERR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	220c      	movs	r2, #12
 80010fe:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
			if (bl->total_read_size == bl->fw_size){
 8001102:	e00e      	b.n	8001122 <bl_read_firmware+0x14e>

	}

	else{
		// BL_PRINT("[%ld] read is done...\n", read_cycle);
		bl->total_read_size += bl->sd.read_bytes;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8d3 2678 	ldr.w	r2, [r3, #1656]	; 0x678
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001110:	441a      	add	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
		read_cycle++;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <bl_read_firmware+0x15c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <bl_read_firmware+0x15c>)
 8001120:	6013      	str	r3, [r2, #0]
	}
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	0800afa4 	.word	0x0800afa4
 8001130:	200001fc 	.word	0x200001fc
 8001134:	0800aff0 	.word	0x0800aff0
 8001138:	0800b014 	.word	0x0800b014

0800113c <bl_flash_unlock>:

static void bl_flash_unlock(bl_t *bl)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (!flash_unlock_and_erase()){
 8001144:	f000 fc0c 	bl	8001960 <flash_unlock_and_erase>
 8001148:	4603      	mov	r3, r0
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <bl_flash_unlock+0x22>
		bl->state = BL_FLASH_IS_UNLOCKED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2207      	movs	r2, #7
 8001158:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	else{
		bl->err = BL_FLASH_UNLOCK_ERR;
		bl->state = BL_ERR;
	}
}
 800115c:	e007      	b.n	800116e <bl_flash_unlock+0x32>
		bl->err = BL_FLASH_UNLOCK_ERR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2209      	movs	r2, #9
 8001162:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	220c      	movs	r2, #12
 800116a:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <bl_flash_lock>:

static void bl_flash_lock(bl_t *bl)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	if (!flash_lock()){
 800117e:	f000 fc73 	bl	8001a68 <flash_lock>
 8001182:	4603      	mov	r3, r0
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <bl_flash_lock+0x22>
		bl->state = BL_FW_FILE_RENAME;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	220a      	movs	r2, #10
 8001192:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	else{
		bl->err = BL_FLASH_LOCK_ERR;
		bl->state = BL_ERR;
	}
}
 8001196:	e007      	b.n	80011a8 <bl_flash_lock+0x32>
		bl->err = BL_FLASH_LOCK_ERR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	220b      	movs	r2, #11
 800119c:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	220c      	movs	r2, #12
 80011a4:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <bl_merge_dword>:

static inline uint32_t bl_merge_dword(char *data)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint32_t merged_data = data[0];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
	merged_data |= data[1] << 8;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
	merged_data |= data[2] << 16;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3302      	adds	r3, #2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	041b      	lsls	r3, r3, #16
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
	merged_data |= data[3] << 24;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3303      	adds	r3, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	061b      	lsls	r3, r3, #24
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]

	return merged_data;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <bl_write_version_to_flash>:

static bool bl_write_version_to_flash(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
	uint32_t version[3] = BL_VERSION;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]

	uint32_t address = FLASH_USER_END_ADDR - (3 * 4) + 1;
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <bl_write_version_to_flash+0x60>)
 8001210:	f000 fb7e 	bl	8001910 <GetSectorSize>
 8001214:	4602      	mov	r2, r0
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <bl_write_version_to_flash+0x64>)
 8001218:	4413      	add	r3, r2
 800121a:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 3; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e013      	b.n	800124a <bl_write_version_to_flash+0x4e>
	{
		if (flash_write(&address, version[i])){
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	f107 0218 	add.w	r2, r7, #24
 800122a:	4413      	add	r3, r2
 800122c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fc28 	bl	8001a8a <flash_write>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <bl_write_version_to_flash+0x48>
			return true;
 8001240:	2301      	movs	r3, #1
 8001242:	e006      	b.n	8001252 <bl_write_version_to_flash+0x56>
	for (int i = 0; i < 3; i++)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b02      	cmp	r3, #2
 800124e:	dde8      	ble.n	8001222 <bl_write_version_to_flash+0x26>
		}
	}

	return false;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08020000 	.word	0x08020000
 8001260:	0801fff4 	.word	0x0801fff4

08001264 <bl_write_to_flash>:

static void bl_write_to_flash(bl_t *bl)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < bl->sd.read_bytes; i += 4){
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e032      	b.n	80012d8 <bl_write_to_flash+0x74>
		uint32_t merged_data = bl_merge_dword(bl->data + i);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f203 4272 	addw	r2, r3, #1138	; 0x472
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff97 	bl	80011b0 <bl_merge_dword>
 8001282:	60b8      	str	r0, [r7, #8]

		if (!flash_write(&write_address, merged_data)){
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	4819      	ldr	r0, [pc, #100]	; (80012ec <bl_write_to_flash+0x88>)
 8001288:	f000 fbff 	bl	8001a8a <flash_write>
 800128c:	4603      	mov	r3, r0
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d011      	beq.n	80012bc <bl_write_to_flash+0x58>
			if (bl->state == BL_FW_FILE_READ_FINISHED){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3470 	ldrb.w	r3, [r3, #1136]	; 0x470
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d117      	bne.n	80012d2 <bl_write_to_flash+0x6e>
				if (!bl_write_version_to_flash())
 80012a2:	f7ff ffab 	bl	80011fc <bl_write_version_to_flash>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f083 0301 	eor.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <bl_write_to_flash+0x5c>
					bl->state = BL_FW_FLASH_WRITE_FINISHED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2209      	movs	r2, #9
 80012b6:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 80012ba:	e00a      	b.n	80012d2 <bl_write_to_flash+0x6e>
					goto EXIT;
			}
		}

		else{
			EXIT:
 80012bc:	bf00      	nop
 80012be:	e000      	b.n	80012c2 <bl_write_to_flash+0x5e>
					goto EXIT;
 80012c0:	bf00      	nop
				bl->err = BL_FW_FLASH_WRITE_ERR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	220a      	movs	r2, #10
 80012c6:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
				bl->state = BL_ERR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	220c      	movs	r2, #12
 80012ce:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
	for (uint32_t i = 0; i < bl->sd.read_bytes; i += 4){
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3304      	adds	r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3c6      	bcc.n	8001272 <bl_write_to_flash+0xe>
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000

080012f0 <bl_check_app_sector>:

static void bl_check_app_sector(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
	uint32_t version[3] =  {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]

	uint32_t address = FLASH_USER_END_ADDR - BL_VERSION_MEM_SPACE + 1;
 8001302:	481b      	ldr	r0, [pc, #108]	; (8001370 <bl_check_app_sector+0x80>)
 8001304:	f000 fb04 	bl	8001910 <GetSectorSize>
 8001308:	4602      	mov	r2, r0
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <bl_check_app_sector+0x84>)
 800130c:	4413      	add	r3, r2
 800130e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 3; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00e      	b.n	8001334 <bl_check_app_sector+0x44>
		version[i] = flash_read(&address);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fbd7 	bl	8001acc <flash_read>
 800131e:	4602      	mov	r2, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	440b      	add	r3, r1
 800132a:	f843 2c10 	str.w	r2, [r3, #-16]
	for (int i = 0; i < 3; i++){
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b02      	cmp	r3, #2
 8001338:	dded      	ble.n	8001316 <bl_check_app_sector+0x26>
	}

	if (version[0] != 0xFFFFFFFF && version[1] != 0xFFFFFFFF && version[2] != 0xFFFFFFFF){
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d012      	beq.n	8001368 <bl_check_app_sector+0x78>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d00e      	beq.n	8001368 <bl_check_app_sector+0x78>
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d00a      	beq.n	8001368 <bl_check_app_sector+0x78>
		BL_PRINT("Bootloader Version: %ld.%ld.%ld\n", version[0], version[1], version[2]);
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <bl_check_app_sector+0x88>)
 8001354:	f007 fe9e 	bl	8009094 <iprintf>
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <bl_check_app_sector+0x8c>)
 8001360:	f007 fe98 	bl	8009094 <iprintf>
		jump_to_user_app();
 8001364:	f7ff fdb4 	bl	8000ed0 <jump_to_user_app>
	}
}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	08020000 	.word	0x08020000
 8001374:	0801fff4 	.word	0x0801fff4
 8001378:	0800afa4 	.word	0x0800afa4
 800137c:	0800b02c 	.word	0x0800b02c

08001380 <bl_check_fw_size>:

static void bl_check_fw_size(bl_t *bl)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if (bl->fw_size >= (FLASH_APP_SECTOR_SIZE - BL_VERSION_MEM_SPACE)){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 4674 	ldr.w	r4, [r3, #1652]	; 0x674
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <bl_check_fw_size+0x40>)
 8001390:	f000 fabe 	bl	8001910 <GetSectorSize>
 8001394:	4603      	mov	r3, r0
 8001396:	3b0d      	subs	r3, #13
 8001398:	429c      	cmp	r4, r3
 800139a:	d308      	bcc.n	80013ae <bl_check_fw_size+0x2e>
		bl->err = BL_FW_SIZE_ERR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2207      	movs	r2, #7
 80013a0:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	220c      	movs	r2, #12
 80013a8:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
	}

	else{
		bl->state = BL_FW_CHECK_CRC;
	}
}
 80013ac:	e003      	b.n	80013b6 <bl_check_fw_size+0x36>
		bl->state = BL_FW_CHECK_CRC;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2205      	movs	r2, #5
 80013b2:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	08020000 	.word	0x08020000

080013c4 <bl_check_fw_crc>:

static void bl_check_fw_crc(bl_t *bl)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	static uint32_t crc = 0;

	if (bl->state == BL_FW_FILE_READ_FINISHED){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3470 	ldrb.w	r3, [r3, #1136]	; 0x470
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d131      	bne.n	800143a <bl_check_fw_crc+0x76>
		crc = rc_crc32(crc, bl->data, bl->sd.read_bytes - 4);
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <bl_check_fw_crc+0x9c>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f203 4172 	addw	r1, r3, #1138	; 0x472
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 80013e6:	3b04      	subs	r3, #4
 80013e8:	461a      	mov	r2, r3
 80013ea:	f000 f98f 	bl	800170c <rc_crc32>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <bl_check_fw_crc+0x9c>)
 80013f2:	601a      	str	r2, [r3, #0]

		uint32_t crc_merged = bl_merge_dword(bl->crc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fed8 	bl	80011b0 <bl_merge_dword>
 8001400:	60f8      	str	r0, [r7, #12]

		if (crc_merged == crc){
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <bl_check_fw_crc+0x9c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d10a      	bne.n	8001422 <bl_check_fw_crc+0x5e>
			BL_PRINT("FW CRC is verified!\n");
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <bl_check_fw_crc+0xa0>)
 800140e:	f007 fe41 	bl	8009094 <iprintf>
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <bl_check_fw_crc+0xa4>)
 8001414:	f007 feb2 	bl	800917c <puts>
			bl->state = BL_FLASH_UNLOCK;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2206      	movs	r2, #6
 800141c:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8001420:	e007      	b.n	8001432 <bl_check_fw_crc+0x6e>
		}

		else{
			bl->err = BL_CRC_ERR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
			bl->state = BL_ERR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	220c      	movs	r2, #12
 800142e:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		}

		crc = 0;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <bl_check_fw_crc+0x9c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	}

	else{
		crc = rc_crc32(crc, bl->data, bl->sd.read_bytes);
	}
}
 8001438:	e00d      	b.n	8001456 <bl_check_fw_crc+0x92>
		crc = rc_crc32(crc, bl->data, bl->sd.read_bytes);
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <bl_check_fw_crc+0x9c>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f203 4172 	addw	r1, r3, #1138	; 0x472
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 800144a:	461a      	mov	r2, r3
 800144c:	f000 f95e 	bl	800170c <rc_crc32>
 8001450:	4602      	mov	r2, r0
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <bl_check_fw_crc+0x9c>)
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000200 	.word	0x20000200
 8001464:	0800afa4 	.word	0x0800afa4
 8001468:	0800b050 	.word	0x0800b050

0800146c <bl_rename_fw_file>:

static void bl_rename_fw_file(bl_t *bl)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	sd_file_close(&bl->sd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fbc2 	bl	8001c00 <sd_file_close>

	if (!sd_file_rename(FW_FILE_NAME, FW_FILE_RENAME_AFTER_UPDATE)){
 800147c:	490d      	ldr	r1, [pc, #52]	; (80014b4 <bl_rename_fw_file+0x48>)
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <bl_rename_fw_file+0x4c>)
 8001480:	f000 fbcc 	bl	8001c1c <sd_file_rename>
 8001484:	4603      	mov	r3, r0
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <bl_rename_fw_file+0x2e>
		bl->state = BL_OP_COMPLETED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	220b      	movs	r2, #11
 8001494:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	else{
		bl->err = BL_FW_FILE_NOT_RENAMED;
		bl->state = BL_ERR;
	}
}
 8001498:	e007      	b.n	80014aa <bl_rename_fw_file+0x3e>
		bl->err = BL_FW_FILE_NOT_RENAMED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2205      	movs	r2, #5
 800149e:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		bl->state = BL_ERR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	220c      	movs	r2, #12
 80014a6:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800b064 	.word	0x0800b064
 80014b8:	0800af94 	.word	0x0800af94

080014bc <bl_operation_completed>:

static void bl_operation_completed(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	BL_PRINT("Firmware Update is successfully completed\n");
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <bl_operation_completed+0x1c>)
 80014c2:	f007 fde7 	bl	8009094 <iprintf>
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <bl_operation_completed+0x20>)
 80014c8:	f007 fe58 	bl	800917c <puts>
	HAL_Delay(1); // Wait for last console output
 80014cc:	2001      	movs	r0, #1
 80014ce:	f000 ffc5 	bl	800245c <HAL_Delay>
	NVIC_SystemReset();
 80014d2:	f7ff fce9 	bl	8000ea8 <__NVIC_SystemReset>
 80014d6:	bf00      	nop
 80014d8:	0800afa4 	.word	0x0800afa4
 80014dc:	0800b07c 	.word	0x0800b07c

080014e0 <bl_init>:
}

static void bl_init(bl_t *bl)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	bl_welcome_message();
 80014e8:	f7ff fd0a 	bl	8000f00 <bl_welcome_message>
	BL_PRINT("Bootloader is started\n");
 80014ec:	4814      	ldr	r0, [pc, #80]	; (8001540 <bl_init+0x60>)
 80014ee:	f007 fdd1 	bl	8009094 <iprintf>
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <bl_init+0x64>)
 80014f4:	f007 fe42 	bl	800917c <puts>

	bl_check_sd_card(bl);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fd0b 	bl	8000f14 <bl_check_sd_card>

	if (bl->state == BL_SD_EXIST){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3470 	ldrb.w	r3, [r3, #1136]	; 0x470
 8001504:	2b02      	cmp	r3, #2
 8001506:	d116      	bne.n	8001536 <bl_init+0x56>
		if (!sd_init(&bl->sd)){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc00 	bl	8001d10 <sd_init>
 8001510:	4603      	mov	r3, r0
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <bl_init+0x46>
			bl->state = BL_SD_INIT_SUCCESS;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		else{
			bl->err = BL_SD_INIT_ERR;
			bl->state = BL_ERR;
		}
	}
}
 8001524:	e007      	b.n	8001536 <bl_init+0x56>
			bl->err = BL_SD_INIT_ERR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
			bl->state = BL_ERR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800afa4 	.word	0x0800afa4
 8001544:	0800b0a8 	.word	0x0800b0a8

08001548 <bl_error_handler>:

static void bl_error_handler(bl_t *bl)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	switch (bl->err){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3471 	ldrb.w	r3, [r3, #1137]	; 0x471
 8001556:	3b01      	subs	r3, #1
 8001558:	2b0a      	cmp	r3, #10
 800155a:	d860      	bhi.n	800161e <bl_error_handler+0xd6>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <bl_error_handler+0x1c>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	080015a3 	.word	0x080015a3
 8001568:	08001591 	.word	0x08001591
 800156c:	080015d9 	.word	0x080015d9
 8001570:	080015b5 	.word	0x080015b5
 8001574:	080015e7 	.word	0x080015e7
 8001578:	0800161f 	.word	0x0800161f
 800157c:	0800161f 	.word	0x0800161f
 8001580:	080015c7 	.word	0x080015c7
 8001584:	080015f5 	.word	0x080015f5
 8001588:	08001603 	.word	0x08001603
 800158c:	08001611 	.word	0x08001611
			case BL_SD_INIT_ERR:
				bl_check_app_sector();
 8001590:	f7ff feae 	bl	80012f0 <bl_check_app_sector>
				BL_PRINT("SD Card Initilization Error!\n");
 8001594:	4826      	ldr	r0, [pc, #152]	; (8001630 <bl_error_handler+0xe8>)
 8001596:	f007 fd7d 	bl	8009094 <iprintf>
 800159a:	4826      	ldr	r0, [pc, #152]	; (8001634 <bl_error_handler+0xec>)
 800159c:	f007 fdee 	bl	800917c <puts>
				break;
 80015a0:	e03e      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_SD_NOT_EXIST:
				bl_check_app_sector();
 80015a2:	f7ff fea5 	bl	80012f0 <bl_check_app_sector>
				BL_PRINT("SD Card is not exist!\n");
 80015a6:	4822      	ldr	r0, [pc, #136]	; (8001630 <bl_error_handler+0xe8>)
 80015a8:	f007 fd74 	bl	8009094 <iprintf>
 80015ac:	4822      	ldr	r0, [pc, #136]	; (8001638 <bl_error_handler+0xf0>)
 80015ae:	f007 fde5 	bl	800917c <puts>
				break;
 80015b2:	e035      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FW_FILE_NOT_EXIST:
				bl_check_app_sector();
 80015b4:	f7ff fe9c 	bl	80012f0 <bl_check_app_sector>
				BL_PRINT("Firmware file does not exist or cannot open!\n");
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <bl_error_handler+0xe8>)
 80015ba:	f007 fd6b 	bl	8009094 <iprintf>
 80015be:	481f      	ldr	r0, [pc, #124]	; (800163c <bl_error_handler+0xf4>)
 80015c0:	f007 fddc 	bl	800917c <puts>
				break;
 80015c4:	e02c      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FW_SIZE_DOES_NOT_MATCH_READ_SIZE:
				bl_check_app_sector();
 80015c6:	f7ff fe93 	bl	80012f0 <bl_check_app_sector>
				BL_PRINT("Firmware file size does not match total read size!\n");
 80015ca:	4819      	ldr	r0, [pc, #100]	; (8001630 <bl_error_handler+0xe8>)
 80015cc:	f007 fd62 	bl	8009094 <iprintf>
 80015d0:	481b      	ldr	r0, [pc, #108]	; (8001640 <bl_error_handler+0xf8>)
 80015d2:	f007 fdd3 	bl	800917c <puts>
				break;
 80015d6:	e023      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_CRC_ERR:
				BL_PRINT("Firmware file has wrong CRC data!\n");
 80015d8:	4815      	ldr	r0, [pc, #84]	; (8001630 <bl_error_handler+0xe8>)
 80015da:	f007 fd5b 	bl	8009094 <iprintf>
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <bl_error_handler+0xfc>)
 80015e0:	f007 fdcc 	bl	800917c <puts>
				break;
 80015e4:	e01c      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FW_FILE_NOT_RENAMED:
				BL_PRINT("Firmware file is not renamed!\n");
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <bl_error_handler+0xe8>)
 80015e8:	f007 fd54 	bl	8009094 <iprintf>
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <bl_error_handler+0x100>)
 80015ee:	f007 fdc5 	bl	800917c <puts>
				break;
 80015f2:	e015      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FLASH_UNLOCK_ERR:
				BL_PRINT("Flash Unlock Error!\n");
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <bl_error_handler+0xe8>)
 80015f6:	f007 fd4d 	bl	8009094 <iprintf>
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <bl_error_handler+0x104>)
 80015fc:	f007 fdbe 	bl	800917c <puts>
				break;
 8001600:	e00e      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FW_FLASH_WRITE_ERR:
				BL_PRINT("Flash Write Error!\n");
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <bl_error_handler+0xe8>)
 8001604:	f007 fd46 	bl	8009094 <iprintf>
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <bl_error_handler+0x108>)
 800160a:	f007 fdb7 	bl	800917c <puts>
				break;
 800160e:	e007      	b.n	8001620 <bl_error_handler+0xd8>

			case BL_FLASH_LOCK_ERR:
				BL_PRINT("Flash Lock Error!\n");
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <bl_error_handler+0xe8>)
 8001612:	f007 fd3f 	bl	8009094 <iprintf>
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <bl_error_handler+0x10c>)
 8001618:	f007 fdb0 	bl	800917c <puts>
				break;
 800161c:	e000      	b.n	8001620 <bl_error_handler+0xd8>

			default:
				break;
 800161e:	bf00      	nop
	}

	for (;;)
	{
		// User Defined Code for warning user
		LED_ERROR_TOGGLE();
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <bl_error_handler+0x110>)
 8001624:	f001 fcc3 	bl	8002fae <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f000 ff17 	bl	800245c <HAL_Delay>
		LED_ERROR_TOGGLE();
 800162e:	e7f7      	b.n	8001620 <bl_error_handler+0xd8>
 8001630:	0800afa4 	.word	0x0800afa4
 8001634:	0800b0c0 	.word	0x0800b0c0
 8001638:	0800b0e0 	.word	0x0800b0e0
 800163c:	0800b0f8 	.word	0x0800b0f8
 8001640:	0800b128 	.word	0x0800b128
 8001644:	0800b15c 	.word	0x0800b15c
 8001648:	0800b180 	.word	0x0800b180
 800164c:	0800b1a0 	.word	0x0800b1a0
 8001650:	0800b1b4 	.word	0x0800b1b4
 8001654:	0800b1c8 	.word	0x0800b1c8
 8001658:	40020800 	.word	0x40020800

0800165c <bl_machine>:
	}
}

void bl_machine(bl_t *bl)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	switch (bl->state) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3470 	ldrb.w	r3, [r3, #1136]	; 0x470
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d849      	bhi.n	8001702 <bl_machine+0xa6>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <bl_machine+0x18>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001703 	.word	0x08001703
 800167c:	08001703 	.word	0x08001703
 8001680:	080016b1 	.word	0x080016b1
 8001684:	080016b9 	.word	0x080016b9
 8001688:	080016c1 	.word	0x080016c1
 800168c:	080016cf 	.word	0x080016cf
 8001690:	080016d7 	.word	0x080016d7
 8001694:	08001703 	.word	0x08001703
 8001698:	080016e5 	.word	0x080016e5
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016f5 	.word	0x080016f5
 80016a4:	080016fb 	.word	0x080016fb
	    case BL_INIT:
	    	bl_init(bl);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff19 	bl	80014e0 <bl_init>
	    	break;
 80016ae:	e029      	b.n	8001704 <bl_machine+0xa8>

		case BL_SD_INIT_SUCCESS:
			bl_open_firmware_file(bl);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fc4f 	bl	8000f54 <bl_open_firmware_file>
			break;
 80016b6:	e025      	b.n	8001704 <bl_machine+0xa8>

		case BL_FW_FILE_EXIST:
			bl_check_fw_size(bl);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fe61 	bl	8001380 <bl_check_fw_size>
		break;
 80016be:	e021      	b.n	8001704 <bl_machine+0xa8>

		case BL_FW_CHECK_CRC:
			bl_read_firmware(bl);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fc87 	bl	8000fd4 <bl_read_firmware>
			bl_check_fw_crc(bl);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe7c 	bl	80013c4 <bl_check_fw_crc>
		break;
 80016cc:	e01a      	b.n	8001704 <bl_machine+0xa8>

		case BL_FLASH_UNLOCK:
			bl_flash_unlock(bl);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fd34 	bl	800113c <bl_flash_unlock>
		break;
 80016d4:	e016      	b.n	8001704 <bl_machine+0xa8>

		case BL_FLASH_IS_UNLOCKED:
			bl_read_firmware(bl);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc7c 	bl	8000fd4 <bl_read_firmware>
			bl_write_to_flash(bl);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fdc1 	bl	8001264 <bl_write_to_flash>
		break;
 80016e2:	e00f      	b.n	8001704 <bl_machine+0xa8>

		case BL_FW_FLASH_WRITE_FINISHED:
			bl_flash_lock(bl);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fd46 	bl	8001176 <bl_flash_lock>
		break;
 80016ea:	e00b      	b.n	8001704 <bl_machine+0xa8>

		case BL_FW_FILE_RENAME:
			bl_rename_fw_file(bl);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff febd 	bl	800146c <bl_rename_fw_file>
		break;
 80016f2:	e007      	b.n	8001704 <bl_machine+0xa8>

		case BL_OP_COMPLETED:
			bl_operation_completed();
 80016f4:	f7ff fee2 	bl	80014bc <bl_operation_completed>
			break;
 80016f8:	e004      	b.n	8001704 <bl_machine+0xa8>

		case BL_ERR:
			bl_error_handler(bl);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff24 	bl	8001548 <bl_error_handler>
			break;
 8001700:	e000      	b.n	8001704 <bl_machine+0xa8>

		default:
			break;
 8001702:	bf00      	nop
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <rc_crc32>:
 *      Author: serbay
 */
#include "crc.h"

uint32_t rc_crc32(uint32_t crc, const char *buf, uint32_t len)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	uint8_t octet;
	int i, j;
	const char *p, *q;

	/* This check is not thread safe; there is no mutex. */
	if (have_table == 0) {
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <rc_crc32+0xbc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d12b      	bne.n	8001778 <rc_crc32+0x6c>
		/* Calculate CRC table. */
		for (i = 0; i < 256; i++) {
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	e022      	b.n	800176c <rc_crc32+0x60>
			rem = i;  /* remainder from polynomial division */
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 8; j++) {
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e012      	b.n	8001756 <rc_crc32+0x4a>
				if (rem & 1) {
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <rc_crc32+0x3e>
					rem >>= 1;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
					rem ^= 0xedb88320;
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <rc_crc32+0xc0>)
 8001744:	4053      	eors	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	e002      	b.n	8001750 <rc_crc32+0x44>
				} else
					rem >>= 1;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 8; j++) {
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3301      	adds	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b07      	cmp	r3, #7
 800175a:	dde9      	ble.n	8001730 <rc_crc32+0x24>
			}
			table[i] = rem;
 800175c:	491c      	ldr	r1, [pc, #112]	; (80017d0 <rc_crc32+0xc4>)
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < 256; i++) {
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	3301      	adds	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	ddd9      	ble.n	8001726 <rc_crc32+0x1a>
		}
		have_table = 1;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <rc_crc32+0xbc>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
	}

	crc = ~crc;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43db      	mvns	r3, r3
 800177c:	60fb      	str	r3, [r7, #12]
	q = buf + len;
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
	for (p = buf; p < q; p++) {
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	e010      	b.n	80017ae <rc_crc32+0xa2>
		octet = *p;  /* Cast to unsigned octet. */
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	74fb      	strb	r3, [r7, #19]
		crc = (crc >> 8) ^ table[(crc & 0xff) ^ octet];
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	0a1a      	lsrs	r2, r3, #8
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	b2d9      	uxtb	r1, r3
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	404b      	eors	r3, r1
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <rc_crc32+0xc4>)
 80017a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017a4:	4053      	eors	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
	for (p = buf; p < q; p++) {
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3ea      	bcc.n	800178c <rc_crc32+0x80>
	}
	return ~crc;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000204 	.word	0x20000204
 80017cc:	edb88320 	.word	0xedb88320
 80017d0:	20000208 	.word	0x20000208

080017d4 <GetSector>:
static uint32_t SectorError = 0;

static FLASH_EraseInitTypeDef EraseInitStruct;

static uint32_t GetSector(uint32_t Address)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a40      	ldr	r2, [pc, #256]	; (80018e4 <GetSector+0x110>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d806      	bhi.n	80017f6 <GetSector+0x22>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017ee:	d302      	bcc.n	80017f6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e06f      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <GetSector+0x114>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d806      	bhi.n	800180c <GetSector+0x38>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <GetSector+0x110>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d902      	bls.n	800180c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001806:	2301      	movs	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e064      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a37      	ldr	r2, [pc, #220]	; (80018ec <GetSector+0x118>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d806      	bhi.n	8001822 <GetSector+0x4e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <GetSector+0x114>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d902      	bls.n	8001822 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800181c:	2302      	movs	r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e059      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <GetSector+0x11c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d806      	bhi.n	8001838 <GetSector+0x64>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <GetSector+0x118>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d902      	bls.n	8001838 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001832:	2303      	movs	r3, #3
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e04e      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <GetSector+0x120>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d806      	bhi.n	800184e <GetSector+0x7a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <GetSector+0x11c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d902      	bls.n	800184e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001848:	2304      	movs	r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e043      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <GetSector+0x124>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d806      	bhi.n	8001864 <GetSector+0x90>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <GetSector+0x120>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d902      	bls.n	8001864 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800185e:	2305      	movs	r3, #5
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e038      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <GetSector+0x128>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d806      	bhi.n	800187a <GetSector+0xa6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <GetSector+0x124>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d902      	bls.n	800187a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001874:	2306      	movs	r3, #6
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e02d      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <GetSector+0x12c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d806      	bhi.n	8001890 <GetSector+0xbc>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <GetSector+0x128>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d902      	bls.n	8001890 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800188a:	2307      	movs	r3, #7
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e022      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <GetSector+0x130>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d806      	bhi.n	80018a6 <GetSector+0xd2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a19      	ldr	r2, [pc, #100]	; (8001900 <GetSector+0x12c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d902      	bls.n	80018a6 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80018a0:	2308      	movs	r3, #8
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e017      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a17      	ldr	r2, [pc, #92]	; (8001908 <GetSector+0x134>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d806      	bhi.n	80018bc <GetSector+0xe8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <GetSector+0x130>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d902      	bls.n	80018bc <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80018b6:	2309      	movs	r3, #9
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e00c      	b.n	80018d6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <GetSector+0x138>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d806      	bhi.n	80018d2 <GetSector+0xfe>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <GetSector+0x134>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d902      	bls.n	80018d2 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80018cc:	230a      	movs	r3, #10
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e001      	b.n	80018d6 <GetSector+0x102>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 80018d2:	230b      	movs	r3, #11
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	08003fff 	.word	0x08003fff
 80018e8:	08007fff 	.word	0x08007fff
 80018ec:	0800bfff 	.word	0x0800bfff
 80018f0:	0800ffff 	.word	0x0800ffff
 80018f4:	0801ffff 	.word	0x0801ffff
 80018f8:	0803ffff 	.word	0x0803ffff
 80018fc:	0805ffff 	.word	0x0805ffff
 8001900:	0807ffff 	.word	0x0807ffff
 8001904:	0809ffff 	.word	0x0809ffff
 8001908:	080bffff 	.word	0x080bffff
 800190c:	080dffff 	.word	0x080dffff

08001910 <GetSectorSize>:

uint32_t GetSectorSize(uint32_t Sector)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]

  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <GetSectorSize+0x24>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d005      	beq.n	8001934 <GetSectorSize+0x24>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d002      	beq.n	8001934 <GetSectorSize+0x24>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d103      	bne.n	800193c <GetSectorSize+0x2c>
  {
    sectorsize = 16 * 1024;
 8001934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e009      	b.n	8001950 <GetSectorSize+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d103      	bne.n	800194a <GetSectorSize+0x3a>
  {
    sectorsize = 64 * 1024;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e002      	b.n	8001950 <GetSectorSize+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <flash_unlock_and_erase>:

bool flash_unlock_and_erase(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001964:	f000 fed6 	bl	8002714 <HAL_FLASH_Unlock>

	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8001968:	4835      	ldr	r0, [pc, #212]	; (8001a40 <flash_unlock_and_erase+0xe0>)
 800196a:	f7ff ff33 	bl	80017d4 <GetSector>
 800196e:	4602      	mov	r2, r0
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <flash_unlock_and_erase+0xe4>)
 8001972:	601a      	str	r2, [r3, #0]
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8001974:	4832      	ldr	r0, [pc, #200]	; (8001a40 <flash_unlock_and_erase+0xe0>)
 8001976:	f7ff ffcb 	bl	8001910 <GetSectorSize>
 800197a:	4602      	mov	r2, r0
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <flash_unlock_and_erase+0xe8>)
 800197e:	4413      	add	r3, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff27 	bl	80017d4 <GetSector>
 8001986:	4602      	mov	r2, r0
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <flash_unlock_and_erase+0xe4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	3301      	adds	r3, #1
 8001990:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <flash_unlock_and_erase+0xec>)
 8001992:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <flash_unlock_and_erase+0xf0>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <flash_unlock_and_erase+0xf0>)
 800199c:	2202      	movs	r2, #2
 800199e:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FirstSector;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <flash_unlock_and_erase+0xe4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <flash_unlock_and_erase+0xf0>)
 80019a6:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <flash_unlock_and_erase+0xec>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <flash_unlock_and_erase+0xf0>)
 80019ae:	60d3      	str	r3, [r2, #12]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80019b0:	4928      	ldr	r1, [pc, #160]	; (8001a54 <flash_unlock_and_erase+0xf4>)
 80019b2:	4827      	ldr	r0, [pc, #156]	; (8001a50 <flash_unlock_and_erase+0xf0>)
 80019b4:	f001 f80e 	bl	80029d4 <HAL_FLASHEx_Erase>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <flash_unlock_and_erase+0x6e>
	{
		FLASH_PRINT("Erase Error!\n");
 80019be:	4826      	ldr	r0, [pc, #152]	; (8001a58 <flash_unlock_and_erase+0xf8>)
 80019c0:	f007 fb68 	bl	8009094 <iprintf>
 80019c4:	4825      	ldr	r0, [pc, #148]	; (8001a5c <flash_unlock_and_erase+0xfc>)
 80019c6:	f007 fbd9 	bl	800917c <puts>
		return true;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e036      	b.n	8001a3c <flash_unlock_and_erase+0xdc>
	}

	__HAL_FLASH_DATA_CACHE_DISABLE();
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d8:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019e4:	6013      	str	r3, [r2, #0]

	__HAL_FLASH_DATA_CACHE_RESET();
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <flash_unlock_and_erase+0x100>)
 80019f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019fc:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a14:	6013      	str	r3, [r2, #0]

	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a20:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <flash_unlock_and_erase+0x100>)
 8001a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2c:	6013      	str	r3, [r2, #0]

	FLASH_PRINT("Erase Success\n");
 8001a2e:	480a      	ldr	r0, [pc, #40]	; (8001a58 <flash_unlock_and_erase+0xf8>)
 8001a30:	f007 fb30 	bl	8009094 <iprintf>
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <flash_unlock_and_erase+0x104>)
 8001a36:	f007 fba1 	bl	800917c <puts>
	return false;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	08020000 	.word	0x08020000
 8001a44:	20000608 	.word	0x20000608
 8001a48:	0801ffff 	.word	0x0801ffff
 8001a4c:	2000060c 	.word	0x2000060c
 8001a50:	20000614 	.word	0x20000614
 8001a54:	20000610 	.word	0x20000610
 8001a58:	0800b1dc 	.word	0x0800b1dc
 8001a5c:	0800b1ec 	.word	0x0800b1ec
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	0800b1fc 	.word	0x0800b1fc

08001a68 <flash_lock>:

bool flash_lock()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	bool error = false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71fb      	strb	r3, [r7, #7]

	if (HAL_FLASH_Lock() != HAL_OK){
 8001a72:	f000 fe71 	bl	8002758 <HAL_FLASH_Lock>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <flash_lock+0x18>
		error = true;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	71fb      	strb	r3, [r7, #7]
	}

	return error;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <flash_write>:

bool flash_write(uint32_t *address, uint32_t data)
{
 8001a8a:	b590      	push	{r4, r7, lr}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
	bool error = false;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *address, (uint32_t)data) == HAL_OK){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f04f 0400 	mov.w	r4, #0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f000 fde0 	bl	800266c <HAL_FLASH_Program>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <flash_write+0x34>
	  *address += 4;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1d1a      	adds	r2, r3, #4
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e001      	b.n	8001ac2 <flash_write+0x38>
	}

	else{
		error = true;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
	}

	return error;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <flash_read>:

uint32_t flash_read(uint32_t *address)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	uint32_t data = *(__IO uint32_t*)(*address);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
	*address += 4;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1d1a      	adds	r2, r3, #4
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]
	return data;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <sd_link_driver>:
 */

#include "sdcard.h"

bool sd_link_driver(sd_t *sd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	bool error = false;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

	if(FATFS_LinkDriver(&SD_Driver, sd->path) == 0)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <sd_link_driver+0x48>)
 8001b0a:	f006 fd5f 	bl	80085cc <FATFS_LinkDriver>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <sd_link_driver+0x2e>
	{
		SD_PRINT("Link Success\n");
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <sd_link_driver+0x4c>)
 8001b16:	f007 fabd 	bl	8009094 <iprintf>
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <sd_link_driver+0x50>)
 8001b1c:	f007 fb2e 	bl	800917c <puts>
 8001b20:	e007      	b.n	8001b32 <sd_link_driver+0x3e>
	}

	else
	{
		SD_PRINT("Link Error!\n");
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <sd_link_driver+0x4c>)
 8001b24:	f007 fab6 	bl	8009094 <iprintf>
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <sd_link_driver+0x54>)
 8001b2a:	f007 fb27 	bl	800917c <puts>
		error = true;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
	}

	return error;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	0800b410 	.word	0x0800b410
 8001b40:	0800b20c 	.word	0x0800b20c
 8001b44:	0800b218 	.word	0x0800b218
 8001b48:	0800b228 	.word	0x0800b228

08001b4c <sd_mount>:

bool sd_mount(sd_t *sd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	bool error = false;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

	if(f_mount(&sd->fs, (TCHAR const*)sd->path, 0) != FR_OK)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	f005 fdf8 	bl	8007758 <f_mount>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <sd_mount+0x34>
	{
		SD_PRINT("Mount Error!\n");
 8001b6e:	480a      	ldr	r0, [pc, #40]	; (8001b98 <sd_mount+0x4c>)
 8001b70:	f007 fa90 	bl	8009094 <iprintf>
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <sd_mount+0x50>)
 8001b76:	f007 fb01 	bl	800917c <puts>
		error = true;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e005      	b.n	8001b8c <sd_mount+0x40>
	}

	else
	{
		SD_PRINT("Mount Success\n");
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <sd_mount+0x4c>)
 8001b82:	f007 fa87 	bl	8009094 <iprintf>
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <sd_mount+0x54>)
 8001b88:	f007 faf8 	bl	800917c <puts>
	}

	return error;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	0800b20c 	.word	0x0800b20c
 8001b9c:	0800b234 	.word	0x0800b234
 8001ba0:	0800b244 	.word	0x0800b244

08001ba4 <sd_file_open_for_read>:
		SD_PRINT("%s file is created...\n", file_name);
	}
}

bool sd_file_open_for_read(sd_t *sd, const char *file_name)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	bool error = false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]

	if(f_open(&sd->file, file_name, FA_READ) != FR_OK){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fe11 	bl	80077e4 <f_open>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <sd_file_open_for_read+0x36>
		error = true;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
		SD_PRINT("file_open_for_read() error!\n");
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <sd_file_open_for_read+0x50>)
 8001bce:	f007 fa61 	bl	8009094 <iprintf>
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <sd_file_open_for_read+0x54>)
 8001bd4:	f007 fad2 	bl	800917c <puts>
 8001bd8:	e006      	b.n	8001be8 <sd_file_open_for_read+0x44>
	}

	else{
		SD_PRINT("%s file is successfully opened\n", file_name);
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <sd_file_open_for_read+0x50>)
 8001bdc:	f007 fa5a 	bl	8009094 <iprintf>
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <sd_file_open_for_read+0x58>)
 8001be4:	f007 fa56 	bl	8009094 <iprintf>
	}

	return error;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	0800b20c 	.word	0x0800b20c
 8001bf8:	0800b284 	.word	0x0800b284
 8001bfc:	0800b2a0 	.word	0x0800b2a0

08001c00 <sd_file_close>:

void sd_file_close(sd_t *sd)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	f_close(&sd->file);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f006 f963 	bl	8007eda <f_close>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <sd_file_rename>:

bool sd_file_rename(const char *old_name, const char *new_name)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	bool error = false;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]

	if (f_rename(old_name, new_name) != FR_OK){
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f006 fb87 	bl	8008340 <f_rename>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <sd_file_rename+0x2e>
		error = true;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
		SD_PRINT("sd_file_rename() error!\n");
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <sd_file_rename+0x48>)
 8001c3e:	f007 fa29 	bl	8009094 <iprintf>
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <sd_file_rename+0x4c>)
 8001c44:	f007 fa9a 	bl	800917c <puts>
 8001c48:	e006      	b.n	8001c58 <sd_file_rename+0x3c>
	}

	else{
		SD_PRINT("fw file is successfully renamed to %s\n", new_name);
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <sd_file_rename+0x48>)
 8001c4c:	f007 fa22 	bl	8009094 <iprintf>
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <sd_file_rename+0x50>)
 8001c54:	f007 fa1e 	bl	8009094 <iprintf>
	}

	return error;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	0800b20c 	.word	0x0800b20c
 8001c68:	0800b2c0 	.word	0x0800b2c0
 8001c6c:	0800b2d8 	.word	0x0800b2d8

08001c70 <sd_file_read>:
		SD_PRINT("file_write() buf: %s\n", (char*)buf);
	}
}

bool sd_file_read(sd_t *sd, void *buf, uint32_t size)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	bool error = false;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]

	if (f_read(&sd->file, buf, size, (UINT*)&sd->read_bytes) != FR_OK){
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f503 700d 	add.w	r0, r3, #564	; 0x234
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	f005 ff66 	bl	8007b60 <f_read>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <sd_file_read+0x3c>
		SD_PRINT("file_read() error!\n");
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <sd_file_read+0x5c>)
 8001c9c:	f007 f9fa 	bl	8009094 <iprintf>
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <sd_file_read+0x60>)
 8001ca2:	f007 fa6b 	bl	800917c <puts>
		error = true;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
 8001caa:	e009      	b.n	8001cc0 <sd_file_read+0x50>
	}

	else{
		SD_PRINT("%ld bytes successfully read\n", sd->read_bytes);
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <sd_file_read+0x5c>)
 8001cae:	f007 f9f1 	bl	8009094 <iprintf>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <sd_file_read+0x64>)
 8001cbc:	f007 f9ea 	bl	8009094 <iprintf>
	}

	return error;
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	0800b20c 	.word	0x0800b20c
 8001cd0:	0800b344 	.word	0x0800b344
 8001cd4:	0800b358 	.word	0x0800b358

08001cd8 <sd_file_rewind>:
{
	return f_tell(&sd->file);
}

void sd_file_rewind(sd_t *sd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	f_rewind(&sd->file);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f006 f920 	bl	8007f2e <f_lseek>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <sd_get_file_size>:

uint32_t sd_get_file_size(sd_t *sd)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	return (uint32_t)f_size(&sd->file);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <sd_init>:

bool sd_init(sd_t *sd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	SD_PRINT("FS is initiliazing...\n");
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <sd_init+0x58>)
 8001d1a:	f007 f9bb 	bl	8009094 <iprintf>
 8001d1e:	4813      	ldr	r0, [pc, #76]	; (8001d6c <sd_init+0x5c>)
 8001d20:	f007 fa2c 	bl	800917c <puts>

	if (sd_link_driver(sd) == SD_SUCCESS){
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fee5 	bl	8001af4 <sd_link_driver>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <sd_init+0x4c>
		if (sd_mount(sd) == SD_SUCCESS){
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff08 	bl	8001b4c <sd_mount>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <sd_init+0x48>
			SD_PRINT("FS init is successfully completed...\n");
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <sd_init+0x58>)
 8001d4a:	f007 f9a3 	bl	8009094 <iprintf>
 8001d4e:	4808      	ldr	r0, [pc, #32]	; (8001d70 <sd_init+0x60>)
 8001d50:	f007 fa14 	bl	800917c <puts>
			return false;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e002      	b.n	8001d5e <sd_init+0x4e>
		}

		else
			return true;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <sd_init+0x4e>
	}

	return true;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	0800b20c 	.word	0x0800b20c
 8001d6c:	0800b378 	.word	0x0800b378
 8001d70:	0800b390 	.word	0x0800b390

08001d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a44      	ldr	r2, [pc, #272]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e38:	f001 f8a0 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e44:	f001 f89a 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_GPIO_Init+0x13c>)
 8001e5e:	f000 fedb 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e7a:	f000 fecd 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ORANGE_Pin;
 8001e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ORANGE_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e98:	f000 febe 	bl	8002c18 <HAL_GPIO_Init>

}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40021800 	.word	0x40021800
 8001eb0:	40021c00 	.word	0x40021c00

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb8:	f000 fa5e 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebc:	f000 f80c 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec0:	f7ff ff58 	bl	8001d74 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001ec4:	f000 f87a 	bl	8001fbc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001ec8:	f003 f956 	bl	8005178 <MX_FATFS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bl_machine(&bl);
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <main+0x20>)
 8001ece:	f7ff fbc5 	bl	800165c <bl_machine>
 8001ed2:	e7fb      	b.n	8001ecc <main+0x18>
 8001ed4:	20000868 	.word	0x20000868

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	2230      	movs	r2, #48	; 0x30
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f006 fc70 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f4c:	23a8      	movs	r3, #168	; 0xa8
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f54:	2307      	movs	r3, #7
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f841 	bl	8002fe4 <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f68:	f000 f820 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fa9a 	bl	80034c4 <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f96:	f000 f809 	bl	8001fac <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <MX_SDIO_SD_Init+0x3c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <MX_SDIO_SD_Init+0x38>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]

}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20000ee8 	.word	0x20000ee8
 8001ff8:	40012c00 	.word	0x40012c00

08001ffc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_SD_MspInit+0xc0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d14a      	bne.n	80020b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_SD_MspInit+0xc4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PC8     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002072:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002084:	230c      	movs	r3, #12
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <HAL_SD_MspInit+0xc8>)
 8002090:	f000 fdc2 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002094:	2304      	movs	r3, #4
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80020a4:	230c      	movs	r3, #12
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <HAL_SD_MspInit+0xcc>)
 80020b0:	f000 fdb2 	bl	8002c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40012c00 	.word	0x40012c00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_MspInit+0x4c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_MspInit+0x4c>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_MspInit+0x4c>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 f954 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002180:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002184:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002190:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002194:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002198:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80021a0:	e000      	b.n	80021a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80021a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80021a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f9      	beq.n	80021a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80021ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e00a      	b.n	80021ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021d8:	f3af 8000 	nop.w
 80021dc:	4601      	mov	r1, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	b2ca      	uxtb	r2, r1
 80021e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dbf0      	blt.n	80021d8 <_read+0x12>
	}

return len;
 80021f6:	687b      	ldr	r3, [r7, #4]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_write>:

int _write(int file, char *ptr, int len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e009      	b.n	8002226 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	60ba      	str	r2, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffac 	bl	8002178 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	dbf1      	blt.n	8002212 <_write+0x12>
	}
	return len;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_close>:

int _close(int file)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	return -1;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002260:	605a      	str	r2, [r3, #4]
	return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_isatty>:

int _isatty(int file)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	return 1;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
	return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x50>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x16>
		heap_end = &end;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <_sbrk+0x50>)
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <_sbrk+0x54>)
 80022b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <_sbrk+0x50>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <_sbrk+0x50>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	466a      	mov	r2, sp
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d907      	bls.n	80022da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022ca:	f006 fa55 	bl	8008778 <__errno>
 80022ce:	4602      	mov	r2, r0
 80022d0:	230c      	movs	r3, #12
 80022d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
 80022d8:	e006      	b.n	80022e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <_sbrk+0x50>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <_sbrk+0x50>)
 80022e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000628 	.word	0x20000628
 80022f4:	20000f98 	.word	0x20000f98

080022f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <SystemInit+0x28>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <SystemInit+0x28>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SystemInit+0x28>)
 800230e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002312:	609a      	str	r2, [r3, #8]
#endif
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800232a:	e003      	b.n	8002334 <LoopCopyDataInit>

0800232c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800232e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002332:	3104      	adds	r1, #4

08002334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002334:	480b      	ldr	r0, [pc, #44]	; (8002364 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800233a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800233c:	d3f6      	bcc.n	800232c <CopyDataInit>
  ldr  r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002340:	e002      	b.n	8002348 <LoopFillZerobss>

08002342 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002342:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002344:	f842 3b04 	str.w	r3, [r2], #4

08002348 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800234c:	d3f9      	bcc.n	8002342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800234e:	f7ff ffd3 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f006 fa17 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002356:	f7ff fdad 	bl	8001eb4 <main>
  bx  lr    
 800235a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800235c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002360:	0800bb38 	.word	0x0800bb38
  ldr  r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002368:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800236c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002370:	20000f94 	.word	0x20000f94

08002374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC_IRQHandler>
	...

08002378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_Init+0x40>)
 8002382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_Init+0x40>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x40>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f92f 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fe8e 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f939 	bl	8002652 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f90f 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000004 	.word	0x20000004
 8002414:	2000000c 	.word	0x2000000c
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000f6c 	.word	0x20000f6c

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000f6c 	.word	0x20000f6c

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_Delay+0x40>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000000c 	.word	0x2000000c

080024a0 <__NVIC_SetPriorityGrouping>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_GetPriorityGrouping>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_SetPriority>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff47 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff5c 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ffb0 	bl	80025c0 <SysTick_Config>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_FLASH_Program+0xa0>)
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_FLASH_Program+0x1e>
 8002686:	2302      	movs	r3, #2
 8002688:	e03b      	b.n	8002702 <HAL_FLASH_Program+0x96>
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_FLASH_Program+0xa0>)
 800268c:	2201      	movs	r2, #1
 800268e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002690:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002694:	f000 f870 	bl	8002778 <FLASH_WaitForLastOperation>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12b      	bne.n	80026fa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80026a8:	783b      	ldrb	r3, [r7, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f000 f919 	bl	80028e4 <FLASH_Program_Byte>
 80026b2:	e016      	b.n	80026e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80026ba:	883b      	ldrh	r3, [r7, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	68b8      	ldr	r0, [r7, #8]
 80026c0:	f000 f8ec 	bl	800289c <FLASH_Program_HalfWord>
 80026c4:	e00d      	b.n	80026e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d105      	bne.n	80026d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	68b8      	ldr	r0, [r7, #8]
 80026d2:	f000 f8c1 	bl	8002858 <FLASH_Program_Word>
 80026d6:	e004      	b.n	80026e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80026d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f000 f88b 	bl	80027f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026e6:	f000 f847 	bl	8002778 <FLASH_WaitForLastOperation>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_FLASH_Program+0xa4>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_FLASH_Program+0xa4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_FLASH_Program+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002700:	7dfb      	ldrb	r3, [r7, #23]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000f70 	.word	0x20000f70
 8002710:	40023c00 	.word	0x40023c00

08002714 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da0b      	bge.n	800273e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_FLASH_Unlock+0x3c>)
 800272a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_FLASH_Unlock+0x38>)
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_FLASH_Unlock+0x40>)
 8002730:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da01      	bge.n	800273e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800273e:	79fb      	ldrb	r3, [r7, #7]
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40023c00 	.word	0x40023c00
 8002750:	45670123 	.word	0x45670123
 8002754:	cdef89ab 	.word	0xcdef89ab

08002758 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_FLASH_Lock+0x1c>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_FLASH_Lock+0x1c>)
 8002762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002766:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40023c00 	.word	0x40023c00

08002778 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <FLASH_WaitForLastOperation+0x78>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800278a:	f7ff fe5b 	bl	8002444 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002790:	e010      	b.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d00c      	beq.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <FLASH_WaitForLastOperation+0x38>
 80027a0:	f7ff fe50 	bl	8002444 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d201      	bcs.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e019      	b.n	80027e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e8      	bne.n	8002792 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027de:	f000 f8a3 	bl	8002928 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
  
}  
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000f70 	.word	0x20000f70
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80027f8:	b490      	push	{r4, r7}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 8002816:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800281a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <FLASH_Program_DoubleWord+0x5c>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800282e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	f04f 0400 	mov.w	r4, #0
 800283e:	0013      	movs	r3, r2
 8002840:	2400      	movs	r4, #0
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	3204      	adds	r2, #4
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bc90      	pop	{r4, r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00

08002858 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <FLASH_Program_Word+0x40>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <FLASH_Program_Word+0x40>)
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <FLASH_Program_Word+0x40>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <FLASH_Program_Word+0x40>)
 8002874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <FLASH_Program_Word+0x40>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <FLASH_Program_Word+0x40>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40023c00 	.word	0x40023c00

0800289c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <FLASH_Program_HalfWord+0x44>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	801a      	strh	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <FLASH_Program_Byte+0x40>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <FLASH_Program_Byte+0x40>)
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <FLASH_Program_Byte+0x40>)
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <FLASH_Program_Byte+0x40>)
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <FLASH_Program_Byte+0x40>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <FLASH_Program_Byte+0x40>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	701a      	strb	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00

08002928 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f043 0310 	orr.w	r3, r3, #16
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 8002942:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 8002946:	2210      	movs	r2, #16
 8002948:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 8002960:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 8002964:	2220      	movs	r2, #32
 8002966:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 800297e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 800299c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f043 0320 	orr.w	r3, r3, #32
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <FLASH_SetErrorCode+0xa8>)
 80029ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <FLASH_SetErrorCode+0xa4>)
 80029be:	2202      	movs	r2, #2
 80029c0:	60da      	str	r2, [r3, #12]
  }
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	20000f70 	.word	0x20000f70

080029d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_FLASHEx_Erase+0xd8>)
 80029e8:	7e1b      	ldrb	r3, [r3, #24]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_FLASHEx_Erase+0x1e>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e058      	b.n	8002aa4 <HAL_FLASHEx_Erase+0xd0>
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_FLASHEx_Erase+0xd8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029fc:	f7ff febc 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d148      	bne.n	8002a9c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d115      	bne.n	8002a46 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 f844 	bl	8002ab4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a30:	f7ff fea2 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_FLASHEx_Erase+0xdc>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_FLASHEx_Erase+0xdc>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	6113      	str	r3, [r2, #16]
 8002a44:	e028      	b.n	8002a98 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	e01c      	b.n	8002a88 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f000 f850 	bl	8002afc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a60:	f7ff fe8a 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_FLASHEx_Erase+0xdc>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_FLASHEx_Erase+0xdc>)
 8002a6e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a72:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	601a      	str	r2, [r3, #0]
          break;
 8002a80:	e00a      	b.n	8002a98 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3da      	bcc.n	8002a4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002a98:	f000 f878 	bl	8002b8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_FLASHEx_Erase+0xd8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	761a      	strb	r2, [r3, #24]

  return status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000f70 	.word	0x20000f70
 8002ab0:	40023c00 	.word	0x40023c00

08002ab4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <FLASH_MassErase+0x44>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6113      	str	r3, [r2, #16]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e010      	b.n	8002b3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d103      	bne.n	8002b26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e009      	b.n	8002b3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d103      	bne.n	8002b34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e002      	b.n	8002b3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	490f      	ldr	r1, [pc, #60]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <FLASH_Erase_Sector+0x8c>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6113      	str	r3, [r2, #16]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40023c00 	.word	0x40023c00

08002b8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d017      	beq.n	8002bcc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002ba2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bbe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bca:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d017      	beq.n	8002c08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bfa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <FLASH_FlushCaches+0x88>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c06:	6013      	str	r3, [r2, #0]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e16b      	b.n	8002f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 815a 	bne.w	8002f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d00b      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c66:	2b11      	cmp	r3, #17
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b12      	cmp	r3, #18
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0xfc>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80b4 	beq.w	8002f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_GPIO_Init+0x308>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a5e      	ldr	r2, [pc, #376]	; (8002f20 <HAL_GPIO_Init+0x308>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b5c      	ldr	r3, [pc, #368]	; (8002f20 <HAL_GPIO_Init+0x308>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_GPIO_Init+0x310>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_GPIO_Init+0x314>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4f      	ldr	r2, [pc, #316]	; (8002f30 <HAL_GPIO_Init+0x318>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4e      	ldr	r2, [pc, #312]	; (8002f34 <HAL_GPIO_Init+0x31c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4d      	ldr	r2, [pc, #308]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x216>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_GPIO_Init+0x324>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_GPIO_Init+0x328>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x20e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <HAL_GPIO_Init+0x32c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x20a>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e22:	2308      	movs	r3, #8
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e82:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb2:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f00:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae90 	bls.w	8002c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3724      	adds	r7, #36	; 0x24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40013800 	.word	0x40013800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020c00 	.word	0x40020c00
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40021400 	.word	0x40021400
 8002f40:	40021800 	.word	0x40021800
 8002f44:	40021c00 	.word	0x40021c00
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e001      	b.n	8002f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d104      	bne.n	8002fd2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	041a      	lsls	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e25b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d075      	beq.n	80030ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	4ba3      	ldr	r3, [pc, #652]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00c      	beq.n	8003028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d112      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b99      	ldr	r3, [pc, #612]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05b      	beq.n	80030ec <HAL_RCC_OscConfig+0x108>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d157      	bne.n	80030ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e236      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x74>
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a87      	ldr	r2, [pc, #540]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 800307c:	4b84      	ldr	r3, [pc, #528]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a83      	ldr	r2, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7ff f9d2 	bl	8002444 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7ff f9ce 	bl	8002444 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1fb      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7ff f9be 	bl	8002444 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f9ba 	bl	8002444 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1e7      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0xe8>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1bb      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b56      	ldr	r3, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4952      	ldr	r1, [pc, #328]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	e03a      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7ff f973 	bl	8002444 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7ff f96f 	bl	8002444 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e19c      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4940      	ldr	r1, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7ff f952 	bl	8002444 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a4:	f7ff f94e 	bl	8002444 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e17b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d030      	beq.n	8003230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7ff f932 	bl	8002444 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7ff f92e 	bl	8002444 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e15b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x200>
 8003202:	e015      	b.n	8003230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7ff f91b 	bl	8002444 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003212:	f7ff f917 	bl	8002444 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e144      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a0 	beq.w	800337e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d121      	bne.n	80032be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003286:	f7ff f8dd 	bl	8002444 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e011      	b.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
 800329c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7ff f8d0 	bl	8002444 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0fd      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCC_OscConfig+0x4d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
 80032c6:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x312>
 80032dc:	4b77      	ldr	r3, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a76      	ldr	r2, [pc, #472]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	4b74      	ldr	r3, [pc, #464]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a73      	ldr	r2, [pc, #460]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032f6:	4b71      	ldr	r3, [pc, #452]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a70      	ldr	r2, [pc, #448]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a6d      	ldr	r2, [pc, #436]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7ff f895 	bl	8002444 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7ff f891 	bl	8002444 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0bc      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x33a>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7ff f87f 	bl	8002444 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7ff f87b 	bl	8002444 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0a6      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b52      	ldr	r3, [pc, #328]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8092 	beq.w	80034ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d05c      	beq.n	800344e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d141      	bne.n	8003420 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7ff f84f 	bl	8002444 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7ff f84b 	bl	8002444 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e078      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	4933      	ldr	r1, [pc, #204]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff f824 	bl	8002444 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7ff f820 	bl	8002444 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04d      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x41c>
 800341e:	e045      	b.n	80034ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7ff f80d 	bl	8002444 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7ff f809 	bl	8002444 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e036      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x44a>
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e029      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	429a      	cmp	r2, r3
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003488:	4293      	cmp	r3, r2
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000
 80034bc:	40023800 	.word	0x40023800
 80034c0:	42470060 	.word	0x42470060

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0cc      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b68      	ldr	r3, [pc, #416]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e067      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4934      	ldr	r1, [pc, #208]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe ff46 	bl	8002444 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe ff42 	bl	8002444 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4601      	mov	r1, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	fa21 f303 	lsr.w	r3, r1, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fea6 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	0800b400 	.word	0x0800b400
 8003688:	20000004 	.word	0x20000004
 800368c:	20000008 	.word	0x20000008

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d007      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x32>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d008      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x38>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 808d 	bne.w	80037d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80036be:	60bb      	str	r3, [r7, #8]
       break;
 80036c0:	e08c      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036c4:	60bb      	str	r3, [r7, #8]
      break;
 80036c6:	e089      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d023      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea03 0501 	and.w	r5, r3, r1
 80036f4:	ea04 0602 	and.w	r6, r4, r2
 80036f8:	4a3d      	ldr	r2, [pc, #244]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fa:	fb02 f106 	mul.w	r1, r2, r6
 80036fe:	2200      	movs	r2, #0
 8003700:	fb02 f205 	mul.w	r2, r2, r5
 8003704:	440a      	add	r2, r1
 8003706:	493a      	ldr	r1, [pc, #232]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003708:	fba5 0101 	umull	r0, r1, r5, r1
 800370c:	1853      	adds	r3, r2, r1
 800370e:	4619      	mov	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f7fd fa45 	bl	8000ba8 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e049      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	f04f 0400 	mov.w	r4, #0
 8003730:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	ea03 0501 	and.w	r5, r3, r1
 800373c:	ea04 0602 	and.w	r6, r4, r2
 8003740:	4629      	mov	r1, r5
 8003742:	4632      	mov	r2, r6
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	0154      	lsls	r4, r2, #5
 800374e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	4619      	mov	r1, r3
 8003756:	4622      	mov	r2, r4
 8003758:	1b49      	subs	r1, r1, r5
 800375a:	eb62 0206 	sbc.w	r2, r2, r6
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	0194      	lsls	r4, r2, #6
 8003768:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800376c:	018b      	lsls	r3, r1, #6
 800376e:	1a5b      	subs	r3, r3, r1
 8003770:	eb64 0402 	sbc.w	r4, r4, r2
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	00e2      	lsls	r2, r4, #3
 800377e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	460b      	mov	r3, r1
 8003786:	4614      	mov	r4, r2
 8003788:	195b      	adds	r3, r3, r5
 800378a:	eb44 0406 	adc.w	r4, r4, r6
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	02a2      	lsls	r2, r4, #10
 8003798:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800379c:	0299      	lsls	r1, r3, #10
 800379e:	460b      	mov	r3, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	4621      	mov	r1, r4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	f7fd f9fa 	bl	8000ba8 <__aeabi_uldivmod>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	3301      	adds	r3, #1
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d2:	60bb      	str	r3, [r7, #8]
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80037d8:	60bb      	str	r3, [r7, #8]
      break;
 80037da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037dc:	68bb      	ldr	r3, [r7, #8]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	017d7840 	.word	0x017d7840

080037f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fe fbef 	bl	8001ffc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f814 	bl	8003854 <HAL_SD_InitCard>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00a      	b.n	800384c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af04      	add	r7, sp, #16
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003870:	2376      	movs	r3, #118	; 0x76
 8003872:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681d      	ldr	r5, [r3, #0]
 8003878:	466c      	mov	r4, sp
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800388c:	4628      	mov	r0, r5
 800388e:	f000 ff51 	bl	8004734 <SDIO_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e031      	b.n	8003908 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_SD_InitCard+0xbc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 ff89 	bl	80047c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_SD_InitCard+0xbc>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fe84 	bl	80045c8 <SD_PowerON>
 80038c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e013      	b.n	8003908 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fda3 	bl	800442c <SD_InitCard>
 80038e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	422580a0 	.word	0x422580a0

08003914 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b092      	sub	sp, #72	; 0x48
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7fe fd8f 	bl	8002444 <HAL_GetTick>
 8003926:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e1d9      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 81cc 	bne.w	8003cec <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800395a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	429a      	cmp	r2, r3
 8003966:	d907      	bls.n	8003978 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e1c0      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2203      	movs	r2, #3
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	2b01      	cmp	r3, #1
 800398e:	d002      	beq.n	8003996 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	025b      	lsls	r3, r3, #9
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 ffa4 	bl	80048ec <SDMMC_CmdBlockLength>
 80039a4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80039a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00f      	beq.n	80039cc <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a9b      	ldr	r2, [pc, #620]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e196      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039d8:	2390      	movs	r3, #144	; 0x90
 80039da:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039dc:	2302      	movs	r3, #2
 80039de:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f107 0214 	add.w	r2, r7, #20
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 ff4e 	bl	8004894 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d90a      	bls.n	8003a14 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 ffb2 	bl	8004974 <SDMMC_CmdReadMultiBlock>
 8003a10:	6478      	str	r0, [r7, #68]	; 0x44
 8003a12:	e009      	b.n	8003a28 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 ff85 	bl	8004930 <SDMMC_CmdReadSingleBlock>
 8003a26:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d012      	beq.n	8003a54 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7b      	ldr	r2, [pc, #492]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e152      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a58:	e061      	b.n	8003b1e <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03c      	beq.n	8003ae2 <HAL_SD_ReadBlocks+0x1ce>
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d039      	beq.n	8003ae2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
 8003a72:	e033      	b.n	8003adc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fe86 	bl	800478a <SDIO_ReadFIFO>
 8003a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	3b01      	subs	r3, #1
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	3b01      	subs	r3, #1
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	0e1b      	lsrs	r3, r3, #24
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	3301      	adds	r3, #1
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	3301      	adds	r3, #1
 8003ada:	643b      	str	r3, [r7, #64]	; 0x40
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	2b07      	cmp	r3, #7
 8003ae0:	d9c8      	bls.n	8003a74 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ae2:	f7fe fcaf 	bl	8002444 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d902      	bls.n	8003af8 <HAL_SD_ReadBlocks+0x1e4>
 8003af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d112      	bne.n	8003b1e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a48      	ldr	r2, [pc, #288]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0ed      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b24:	f240 332a 	movw	r3, #810	; 0x32a
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d095      	beq.n	8003a5a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d022      	beq.n	8003b82 <HAL_SD_ReadBlocks+0x26e>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d91f      	bls.n	8003b82 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d01b      	beq.n	8003b82 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 ff76 	bl	8004a40 <SDMMC_CmdStopTransfer>
 8003b54:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d012      	beq.n	8003b82 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0bb      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d012      	beq.n	8003bb6 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	f043 0208 	orr.w	r2, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0a1      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	f043 0202 	orr.w	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e087      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d064      	beq.n	8003cc2 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_SD_ReadBlocks+0x30c>)
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06d      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
 8003c1e:	bf00      	nop
 8003c20:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fdae 	bl	800478a <SDIO_ReadFIFO>
 8003c2e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c40:	3b01      	subs	r3, #1
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	3301      	adds	r3, #1
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c56:	3b01      	subs	r3, #1
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	3301      	adds	r3, #1
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	0e1b      	lsrs	r3, r3, #24
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	3b01      	subs	r3, #1
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c86:	f7fe fbdd 	bl	8002444 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d902      	bls.n	8003c9c <HAL_SD_ReadBlocks+0x388>
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d112      	bne.n	8003cc2 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_SD_ReadBlocks+0x3f0>)
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e01b      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_SD_ReadBlocks+0x3c2>
 8003cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1a6      	bne.n	8003c24 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e006      	b.n	8003cfa <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3748      	adds	r7, #72	; 0x48
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	004005ff 	.word	0x004005ff

08003d08 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b092      	sub	sp, #72	; 0x48
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d16:	f7fe fb95 	bl	8002444 <HAL_GetTick>
 8003d1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e184      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f040 8177 	bne.w	8004036 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d907      	bls.n	8003d6c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e16b      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d002      	beq.n	8003d8a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	025b      	lsls	r3, r3, #9
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fdaa 	bl	80048ec <SDMMC_CmdBlockLength>
 8003d98:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00f      	beq.n	8003dc0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a9d      	ldr	r2, [pc, #628]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e141      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	025b      	lsls	r3, r3, #9
 8003dca:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dcc:	2390      	movs	r3, #144	; 0x90
 8003dce:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f107 0218 	add.w	r2, r7, #24
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fd54 	bl	8004894 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d90a      	bls.n	8003e08 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fdfc 	bl	80049fc <SDMMC_CmdWriteMultiBlock>
 8003e04:	6478      	str	r0, [r7, #68]	; 0x44
 8003e06:	e009      	b.n	8003e1c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fdcf 	bl	80049b8 <SDMMC_CmdWriteSingleBlock>
 8003e1a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7d      	ldr	r2, [pc, #500]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0fd      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e4c:	e065      	b.n	8003f1a <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d040      	beq.n	8003ede <HAL_SD_WriteBlocks+0x1d6>
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03d      	beq.n	8003ede <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
 8003e66:	e037      	b.n	8003ed8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	3301      	adds	r3, #1
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	3b01      	subs	r3, #1
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e88:	3301      	adds	r3, #1
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	041a      	lsls	r2, r3, #16
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	061a      	lsls	r2, r3, #24
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	3301      	adds	r3, #1
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f107 0214 	add.w	r2, r7, #20
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fc69 	bl	80047a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eda:	2b07      	cmp	r3, #7
 8003edc:	d9c4      	bls.n	8003e68 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ede:	f7fe fab1 	bl	8002444 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d902      	bls.n	8003ef4 <HAL_SD_WriteBlocks+0x1ec>
 8003eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d112      	bne.n	8003f1a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a48      	ldr	r2, [pc, #288]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e094      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f20:	f240 331a 	movw	r3, #794	; 0x31a
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d091      	beq.n	8003e4e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d022      	beq.n	8003f7e <HAL_SD_WriteBlocks+0x276>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d91f      	bls.n	8003f7e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d01b      	beq.n	8003f7e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd78 	bl	8004a40 <SDMMC_CmdStopTransfer>
 8003f50:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d012      	beq.n	8003f7e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e062      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	f043 0208 	orr.w	r2, r3, #8
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e048      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d012      	beq.n	8003fe6 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e02e      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a08      	ldr	r2, [pc, #32]	; (800401c <HAL_SD_WriteBlocks+0x314>)
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e014      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
 800401a:	bf00      	nop
 800401c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f240 523a 	movw	r2, #1338	; 0x53a
 8004028:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e006      	b.n	8004044 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3748      	adds	r7, #72	; 0x48
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405a:	0f9b      	lsrs	r3, r3, #30
 800405c:	b2da      	uxtb	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004066:	0e9b      	lsrs	r3, r3, #26
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004078:	0e1b      	lsrs	r3, r3, #24
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2da      	uxtb	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	b2da      	uxtb	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ac:	0d1b      	lsrs	r3, r3, #20
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	0bdb      	lsrs	r3, r3, #15
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	0b9b      	lsrs	r3, r3, #14
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004100:	0b1b      	lsrs	r3, r3, #12
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	2b00      	cmp	r3, #0
 800411a:	d163      	bne.n	80041e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004126:	4013      	ands	r3, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800412c:	0f92      	lsrs	r2, r2, #30
 800412e:	431a      	orrs	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004138:	0edb      	lsrs	r3, r3, #27
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	b2da      	uxtb	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	0e1b      	lsrs	r3, r3, #24
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	0d5b      	lsrs	r3, r3, #21
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	b2da      	uxtb	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	0c9b      	lsrs	r3, r3, #18
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	b2da      	uxtb	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004180:	0bdb      	lsrs	r3, r3, #15
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	b2da      	uxtb	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	7e1b      	ldrb	r3, [r3, #24]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	3302      	adds	r3, #2
 80041a4:	2201      	movs	r2, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041ae:	fb02 f203 	mul.w	r2, r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	7a1b      	ldrb	r3, [r3, #8]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80041d0:	0a52      	lsrs	r2, r2, #9
 80041d2:	fb02 f203 	mul.w	r2, r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
 80041e2:	e031      	b.n	8004248 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d11d      	bne.n	8004228 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	3301      	adds	r3, #1
 8004208:	029a      	lsls	r2, r3, #10
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	661a      	str	r2, [r3, #96]	; 0x60
 8004226:	e00f      	b.n	8004248 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_SD_GetCardCSD+0x344>)
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e09d      	b.n	8004384 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424c:	0b9b      	lsrs	r3, r3, #14
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004266:	b2da      	uxtb	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004276:	b2da      	uxtb	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	0fdb      	lsrs	r3, r3, #31
 8004282:	b2da      	uxtb	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	0f5b      	lsrs	r3, r3, #29
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	b2da      	uxtb	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	0e9b      	lsrs	r3, r3, #26
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	0d9b      	lsrs	r3, r3, #22
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	0d5b      	lsrs	r3, r3, #21
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	0bdb      	lsrs	r3, r3, #15
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	0b9b      	lsrs	r3, r3, #14
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	0b5b      	lsrs	r3, r3, #13
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	0b1b      	lsrs	r3, r3, #12
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	b2da      	uxtb	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	004005ff 	.word	0x004005ff

08004394 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f970 	bl	80046e4 <SD_SendStatus>
 8004404:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	0a5b      	lsrs	r3, r3, #9
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004422:	693b      	ldr	r3, [r7, #16]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b094      	sub	sp, #80	; 0x50
 8004430:	af04      	add	r7, sp, #16
 8004432:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004434:	2301      	movs	r3, #1
 8004436:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f9d1 	bl	80047e4 <SDIO_GetPowerState>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004448:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800444c:	e0b7      	b.n	80045be <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	2b03      	cmp	r3, #3
 8004454:	d02f      	beq.n	80044b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fbb7 	bl	8004bce <SDMMC_CmdSendCID>
 8004460:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <SD_InitCard+0x40>
    {
      return errorstate;
 8004468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446a:	e0a8      	b.n	80045be <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f9fb 	bl	800486e <SDIO_GetResponse>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2104      	movs	r1, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f9f2 	bl	800486e <SDIO_GetResponse>
 800448a:	4602      	mov	r2, r0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2108      	movs	r1, #8
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f9e9 	bl	800486e <SDIO_GetResponse>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	210c      	movs	r1, #12
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f9e0 	bl	800486e <SDIO_GetResponse>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d00d      	beq.n	80044da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f107 020e 	add.w	r2, r7, #14
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fbbd 	bl	8004c48 <SDMMC_CmdSetRelAdd>
 80044ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <SD_InitCard+0xae>
    {
      return errorstate;
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	e071      	b.n	80045be <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d036      	beq.n	8004550 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80044e2:	89fb      	ldrh	r3, [r7, #14]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fb87 	bl	8004c0a <SDMMC_CmdSendCSD>
 80044fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	e05a      	b.n	80045be <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9ad 	bl	800486e <SDIO_GetResponse>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2104      	movs	r1, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f9a4 	bl	800486e <SDIO_GetResponse>
 8004526:	4602      	mov	r2, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2108      	movs	r1, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f99b 	bl	800486e <SDIO_GetResponse>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	210c      	movs	r1, #12
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f992 	bl	800486e <SDIO_GetResponse>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2104      	movs	r1, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f989 	bl	800486e <SDIO_GetResponse>
 800455c:	4603      	mov	r3, r0
 800455e:	0d1a      	lsrs	r2, r3, #20
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004564:	f107 0310 	add.w	r3, r7, #16
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fd6e 	bl	800404c <HAL_SD_GetCardCSD>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800457a:	e020      	b.n	80045be <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	461a      	mov	r2, r3
 800458c:	4623      	mov	r3, r4
 800458e:	4608      	mov	r0, r1
 8004590:	f000 fa78 	bl	8004a84 <SDMMC_CmdSelDesel>
 8004594:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SD_InitCard+0x174>
  {
    return errorstate;
 800459c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459e:	e00e      	b.n	80045be <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681d      	ldr	r5, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	466c      	mov	r4, sp
 80045a8:	f103 0210 	add.w	r2, r3, #16
 80045ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045b2:	3304      	adds	r3, #4
 80045b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f8bc 	bl	8004734 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3740      	adds	r7, #64	; 0x40
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080045c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fa72 	bl	8004aca <SDMMC_CmdGoIdleState>
 80045e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	e072      	b.n	80046d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa85 	bl	8004b06 <SDMMC_CmdOperCond>
 80045fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa5b 	bl	8004aca <SDMMC_CmdGoIdleState>
 8004614:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <SD_PowerON+0x5e>
    {
      return errorstate;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	e05b      	b.n	80046d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	2b01      	cmp	r3, #1
 800462c:	d137      	bne.n	800469e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa85 	bl	8004b44 <SDMMC_CmdAppCommand>
 800463a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02d      	beq.n	800469e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004646:	e047      	b.n	80046d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa78 	bl	8004b44 <SDMMC_CmdAppCommand>
 8004654:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SD_PowerON+0x98>
    {
      return errorstate;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	e03b      	b.n	80046d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	491e      	ldr	r1, [pc, #120]	; (80046e0 <SD_PowerON+0x118>)
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fa8e 	bl	8004b88 <SDMMC_CmdAppOperCommand>
 800466c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004678:	e02e      	b.n	80046d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f8f4 	bl	800486e <SDIO_GetResponse>
 8004686:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	0fdb      	lsrs	r3, r3, #31
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <SD_PowerON+0xcc>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <SD_PowerON+0xce>
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]

    count++;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d802      	bhi.n	80046ae <SD_PowerON+0xe6>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0cc      	beq.n	8004648 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d902      	bls.n	80046be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046bc:	e00c      	b.n	80046d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
 80046ce:	e002      	b.n	80046d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	c1100000 	.word	0xc1100000

080046e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80046f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046f8:	e018      	b.n	800472c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f000 fabf 	bl	8004c8a <SDMMC_CmdSendStatus>
 800470c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	e009      	b.n	800472c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8a5 	bl	800486e <SDIO_GetResponse>
 8004724:	4602      	mov	r2, r0
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004734:	b084      	sub	sp, #16
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	f107 001c 	add.w	r0, r7, #28
 8004742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800474a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800474c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800474e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004752:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004756:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800475a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800475e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800476e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	b004      	add	sp, #16
 8004788:	4770      	bx	lr

0800478a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80047d4:	2002      	movs	r0, #2
 80047d6:	f7fd fe41 	bl	800245c <HAL_Delay>
  
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0303 	and.w	r3, r3, #3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800481e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004824:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800482a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800483a:	f023 030f 	bic.w	r3, r3, #15
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	b2db      	uxtb	r3, r3
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3314      	adds	r3, #20
 800487c:	461a      	mov	r2, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	4413      	add	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
}  
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80048c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80048c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048de:	2300      	movs	r3, #0

}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048fa:	2310      	movs	r3, #16
 80048fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048fe:	2340      	movs	r3, #64	; 0x40
 8004900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ff74 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004918:	f241 3288 	movw	r2, #5000	; 0x1388
 800491c:	2110      	movs	r1, #16
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9fe 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004926:	69fb      	ldr	r3, [r7, #28]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800493e:	2311      	movs	r3, #17
 8004940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004942:	2340      	movs	r3, #64	; 0x40
 8004944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800494a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004950:	f107 0308 	add.w	r3, r7, #8
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff52 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	2111      	movs	r1, #17
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9dc 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004982:	2312      	movs	r3, #18
 8004984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004986:	2340      	movs	r3, #64	; 0x40
 8004988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800498e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff30 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	2112      	movs	r1, #18
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9ba 	bl	8004d20 <SDMMC_GetCmdResp1>
 80049ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ae:	69fb      	ldr	r3, [r7, #28]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80049c6:	2318      	movs	r3, #24
 80049c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff0e 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	2118      	movs	r1, #24
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f998 	bl	8004d20 <SDMMC_GetCmdResp1>
 80049f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f2:	69fb      	ldr	r3, [r7, #28]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a0a:	2319      	movs	r3, #25
 8004a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff feec 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	2119      	movs	r1, #25
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f976 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fecb 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <SDMMC_CmdStopTransfer+0x40>)
 8004a6c:	210c      	movs	r1, #12
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f956 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	05f5e100 	.word	0x05f5e100

08004a84 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a94:	2307      	movs	r3, #7
 8004a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	4619      	mov	r1, r3
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fea7 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	2107      	movs	r1, #7
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f931 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004abe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b088      	sub	sp, #32
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fe86 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8eb 	bl	8004cd0 <SDMMC_GetCmdError>
 8004afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afc:	69fb      	ldr	r3, [r7, #28]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b088      	sub	sp, #32
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004b14:	2308      	movs	r3, #8
 8004b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fe67 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fad4 	bl	80050e0 <SDMMC_GetCmdResp7>
 8004b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b52:	2337      	movs	r3, #55	; 0x37
 8004b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fe48 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	2137      	movs	r1, #55	; 0x37
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8d2 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b9e:	2329      	movs	r3, #41	; 0x29
 8004ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fe22 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9e1 	bl	8004f84 <SDMMC_GetCmdResp3>
 8004bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004bde:	23c0      	movs	r3, #192	; 0xc0
 8004be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bec:	f107 0308 	add.w	r3, r7, #8
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fe04 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f97d 	bl	8004ef8 <SDMMC_GetCmdResp2>
 8004bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c00:	69fb      	ldr	r3, [r7, #28]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c18:	2309      	movs	r3, #9
 8004c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c1c:	23c0      	movs	r3, #192	; 0xc0
 8004c1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fde5 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f95e 	bl	8004ef8 <SDMMC_GetCmdResp2>
 8004c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c56:	2303      	movs	r3, #3
 8004c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fdc6 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	2103      	movs	r1, #3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9bd 	bl	8004ff8 <SDMMC_GetCmdResp6>
 8004c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c80:	69fb      	ldr	r3, [r7, #28]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b088      	sub	sp, #32
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004c98:	230d      	movs	r3, #13
 8004c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004caa:	f107 0308 	add.w	r3, r7, #8
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fda5 	bl	8004800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	210d      	movs	r1, #13
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f82f 	bl	8004d20 <SDMMC_GetCmdResp1>
 8004cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004cd0:	b490      	push	{r4, r7}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <SDMMC_GetCmdError+0x48>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <SDMMC_GetCmdError+0x4c>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0a5b      	lsrs	r3, r3, #9
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004cec:	4623      	mov	r3, r4
 8004cee:	1e5c      	subs	r4, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cf8:	e009      	b.n	8004d0e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f2      	beq.n	8004cec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	22c5      	movs	r2, #197	; 0xc5
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc90      	pop	{r4, r7}
 8004d16:	4770      	bx	lr
 8004d18:	20000004 	.word	0x20000004
 8004d1c:	10624dd3 	.word	0x10624dd3

08004d20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <SDMMC_GetCmdResp1+0x1cc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6f      	ldr	r2, [pc, #444]	; (8004ef0 <SDMMC_GetCmdResp1+0x1d0>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d40:	4623      	mov	r3, r4
 8004d42:	1e5c      	subs	r4, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d4c:	e0c9      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <SDMMC_GetCmdResp1+0x20>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1eb      	bne.n	8004d40 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2204      	movs	r2, #4
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	e0b1      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0a6      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	22c5      	movs	r2, #197	; 0xc5
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fd5a 	bl	8004854 <SDIO_GetCommandResponse>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d001      	beq.n	8004dae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e099      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004dae:	2100      	movs	r1, #0
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fd5c 	bl	800486e <SDIO_GetResponse>
 8004db6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <SDMMC_GetCmdResp1+0x1d4>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e08d      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da02      	bge.n	8004dd2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dd0:	e087      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	e080      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	e079      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfc:	e071      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0c:	e069      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1c:	e061      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e2c:	e059      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e3c:	e051      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e4c:	e049      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e5c:	e041      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6c:	e039      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e7c:	e031      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e8c:	e029      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e9c:	e021      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ea8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eac:	e019      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ebc:	e011      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ecc:	e009      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004ed8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004edc:	e001      	b.n	8004ee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	10624dd3 	.word	0x10624dd3
 8004ef4:	fdffe008 	.word	0xfdffe008

08004ef8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004ef8:	b490      	push	{r4, r7}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <SDMMC_GetCmdResp2+0x84>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <SDMMC_GetCmdResp2+0x88>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	0a5b      	lsrs	r3, r3, #9
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f14:	4623      	mov	r3, r4
 8004f16:	1e5c      	subs	r4, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f20:	e026      	b.n	8004f70 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <SDMMC_GetCmdResp2+0x1c>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1eb      	bne.n	8004f14 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e00e      	b.n	8004f70 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e003      	b.n	8004f70 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	22c5      	movs	r2, #197	; 0xc5
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc90      	pop	{r4, r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000004 	.word	0x20000004
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004f84:	b490      	push	{r4, r7}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <SDMMC_GetCmdResp3+0x6c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <SDMMC_GetCmdResp3+0x70>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0a5b      	lsrs	r3, r3, #9
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	1e5c      	subs	r4, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fac:	e01b      	b.n	8004fe6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <SDMMC_GetCmdResp3+0x1c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1eb      	bne.n	8004fa0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e003      	b.n	8004fe6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	22c5      	movs	r2, #197	; 0xc5
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc90      	pop	{r4, r7}
 8004fee:	4770      	bx	lr
 8004ff0:	20000004 	.word	0x20000004
 8004ff4:	10624dd3 	.word	0x10624dd3

08004ff8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	460b      	mov	r3, r1
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <SDMMC_GetCmdResp6+0xe0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a34      	ldr	r2, [pc, #208]	; (80050dc <SDMMC_GetCmdResp6+0xe4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	0a5b      	lsrs	r3, r3, #9
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800501a:	4623      	mov	r3, r4
 800501c:	1e5c      	subs	r4, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005026:	e052      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <SDMMC_GetCmdResp6+0x22>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1eb      	bne.n	800501a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2204      	movs	r2, #4
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005054:	2304      	movs	r3, #4
 8005056:	e03a      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800506a:	2301      	movs	r3, #1
 800506c:	e02f      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff fbf0 	bl	8004854 <SDIO_GetCommandResponse>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	7afb      	ldrb	r3, [r7, #11]
 800507a:	4293      	cmp	r3, r2
 800507c:	d001      	beq.n	8005082 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800507e:	2301      	movs	r3, #1
 8005080:	e025      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22c5      	movs	r2, #197	; 0xc5
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005088:	2100      	movs	r1, #0
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fbef 	bl	800486e <SDIO_GetResponse>
 8005090:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e011      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b8:	e009      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c8:	e001      	b.n	80050ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000004 	.word	0x20000004
 80050dc:	10624dd3 	.word	0x10624dd3

080050e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80050e0:	b490      	push	{r4, r7}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <SDMMC_GetCmdResp7+0x90>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <SDMMC_GetCmdResp7+0x94>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	0a5b      	lsrs	r3, r3, #9
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80050fc:	4623      	mov	r3, r4
 80050fe:	1e5c      	subs	r4, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005108:	e02c      	b.n	8005164 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <SDMMC_GetCmdResp7+0x1c>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1eb      	bne.n	80050fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2204      	movs	r2, #4
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005136:	2304      	movs	r3, #4
 8005138:	e014      	b.n	8005164 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800514c:	2301      	movs	r3, #1
 800514e:	e009      	b.n	8005164 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2240      	movs	r2, #64	; 0x40
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
  
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bc90      	pop	{r4, r7}
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000004 	.word	0x20000004
 8005174:	10624dd3 	.word	0x10624dd3

08005178 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  // retSD = FATFS_LinkDriver(&SD_Driver, SDPath);

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800518a:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80051a2:	f000 f86b 	bl	800527c <BSP_SD_IsDetected>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e005      	b.n	80051bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <BSP_SD_Init+0x2c>)
 80051b2:	f7fe fb1f 	bl	80037f4 <HAL_SD_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80051ba:	79fb      	ldrb	r3, [r7, #7]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000ee8 	.word	0x20000ee8

080051c8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	4806      	ldr	r0, [pc, #24]	; (8005200 <BSP_SD_ReadBlocks+0x38>)
 80051e6:	f7fe fb95 	bl	8003914 <HAL_SD_ReadBlocks>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000ee8 	.word	0x20000ee8

08005204 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4806      	ldr	r0, [pc, #24]	; (800523c <BSP_SD_WriteBlocks+0x38>)
 8005222:	f7fe fd71 	bl	8003d08 <HAL_SD_WriteBlocks>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000ee8 	.word	0x20000ee8

08005240 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005244:	4805      	ldr	r0, [pc, #20]	; (800525c <BSP_SD_GetCardState+0x1c>)
 8005246:	f7ff f8d1 	bl	80043ec <HAL_SD_GetCardState>
 800524a:	4603      	mov	r3, r0
 800524c:	2b04      	cmp	r3, #4
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
}
 8005256:	4618      	mov	r0, r3
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000ee8 	.word	0x20000ee8

08005260 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4803      	ldr	r0, [pc, #12]	; (8005278 <BSP_SD_GetCardInfo+0x18>)
 800526c:	f7ff f892 	bl	8004394 <HAL_SD_GetCardInfo>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000ee8 	.word	0x20000ee8

0800527c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005282:	2301      	movs	r3, #1
 8005284:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8005286:	f000 f80b 	bl	80052a0 <BSP_PlatformIsDetected>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005290:	2300      	movs	r3, #0
 8005292:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	b2db      	uxtb	r3, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80052a6:	2301      	movs	r3, #1
 80052a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80052aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052ae:	4806      	ldr	r0, [pc, #24]	; (80052c8 <BSP_PlatformIsDetected+0x28>)
 80052b0:	f7fd fe4c 	bl	8002f4c <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80052ba:	2300      	movs	r3, #0
 80052bc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80052be:	79fb      	ldrb	r3, [r7, #7]
}  
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021c00 	.word	0x40021c00

080052cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <SD_CheckStatus+0x38>)
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80052dc:	f7ff ffb0 	bl	8005240 <BSP_SD_GetCardState>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <SD_CheckStatus+0x38>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4b04      	ldr	r3, [pc, #16]	; (8005304 <SD_CheckStatus+0x38>)
 80052f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <SD_CheckStatus+0x38>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2000000d 	.word	0x2000000d

08005308 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <SD_initialize+0x38>)
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005318:	f7ff ff3e 	bl	8005198 <BSP_SD_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ffd1 	bl	80052cc <SD_CheckStatus>
 800532a:	4603      	mov	r3, r0
 800532c:	461a      	mov	r2, r3
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <SD_initialize+0x38>)
 8005330:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005332:	4b03      	ldr	r3, [pc, #12]	; (8005340 <SD_initialize+0x38>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	2000000d 	.word	0x2000000d

08005344 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ffbb 	bl	80052cc <SD_CheckStatus>
 8005356:	4603      	mov	r3, r0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68b8      	ldr	r0, [r7, #8]
 800537e:	f7ff ff23 	bl	80051c8 <BSP_SD_ReadBlocks>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005388:	bf00      	nop
 800538a:	f7ff ff59 	bl	8005240 <BSP_SD_GetCardState>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1fa      	bne.n	800538a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4603      	mov	r3, r0
 80053b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	68b8      	ldr	r0, [r7, #8]
 80053c0:	f7ff ff20 	bl	8005204 <BSP_SD_WriteBlocks>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80053ca:	bf00      	nop
 80053cc:	f7ff ff38 	bl	8005240 <BSP_SD_GetCardState>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1fa      	bne.n	80053cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	; 0x30
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	603a      	str	r2, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
 80053f0:	460b      	mov	r3, r1
 80053f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80053fa:	4b25      	ldr	r3, [pc, #148]	; (8005490 <SD_ioctl+0xac>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <SD_ioctl+0x28>
 8005408:	2303      	movs	r3, #3
 800540a:	e03c      	b.n	8005486 <SD_ioctl+0xa2>

  switch (cmd)
 800540c:	79bb      	ldrb	r3, [r7, #6]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d834      	bhi.n	800547c <SD_ioctl+0x98>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <SD_ioctl+0x34>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005429 	.word	0x08005429
 800541c:	08005431 	.word	0x08005431
 8005420:	08005449 	.word	0x08005449
 8005424:	08005463 	.word	0x08005463
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800542e:	e028      	b.n	8005482 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff ff13 	bl	8005260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800543a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005446:	e01c      	b.n	8005482 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005448:	f107 030c 	add.w	r3, r7, #12
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff07 	bl	8005260 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	b29a      	uxth	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005460:	e00f      	b.n	8005482 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fefa 	bl	8005260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	0a5a      	lsrs	r2, r3, #9
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800547a:	e002      	b.n	8005482 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800547c:	2304      	movs	r3, #4
 800547e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005486:	4618      	mov	r0, r3
 8005488:	3730      	adds	r7, #48	; 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	2000000d 	.word	0x2000000d

08005494 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <disk_status+0x30>)
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	79fa      	ldrb	r2, [r7, #7]
 80054ac:	4905      	ldr	r1, [pc, #20]	; (80054c4 <disk_status+0x30>)
 80054ae:	440a      	add	r2, r1
 80054b0:	7a12      	ldrb	r2, [r2, #8]
 80054b2:	4610      	mov	r0, r2
 80054b4:	4798      	blx	r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000854 	.word	0x20000854

080054c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <disk_initialize+0x48>)
 80054da:	5cd3      	ldrb	r3, [r2, r3]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d111      	bne.n	8005504 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <disk_initialize+0x48>)
 80054e4:	2101      	movs	r1, #1
 80054e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <disk_initialize+0x48>)
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	79fa      	ldrb	r2, [r7, #7]
 80054f6:	4906      	ldr	r1, [pc, #24]	; (8005510 <disk_initialize+0x48>)
 80054f8:	440a      	add	r2, r1
 80054fa:	7a12      	ldrb	r2, [r2, #8]
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000854 	.word	0x20000854

08005514 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <disk_read+0x3c>)
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	689c      	ldr	r4, [r3, #8]
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	4a07      	ldr	r2, [pc, #28]	; (8005550 <disk_read+0x3c>)
 8005534:	4413      	add	r3, r2
 8005536:	7a18      	ldrb	r0, [r3, #8]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	47a0      	blx	r4
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]
  return res;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	20000854 	.word	0x20000854

08005554 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <disk_write+0x3c>)
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68dc      	ldr	r4, [r3, #12]
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	4a07      	ldr	r2, [pc, #28]	; (8005590 <disk_write+0x3c>)
 8005574:	4413      	add	r3, r2
 8005576:	7a18      	ldrb	r0, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	47a0      	blx	r4
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
  return res;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	20000854 	.word	0x20000854

08005594 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	603a      	str	r2, [r7, #0]
 800559e:	71fb      	strb	r3, [r7, #7]
 80055a0:	460b      	mov	r3, r1
 80055a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <disk_ioctl+0x38>)
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	4906      	ldr	r1, [pc, #24]	; (80055cc <disk_ioctl+0x38>)
 80055b4:	440a      	add	r2, r1
 80055b6:	7a10      	ldrb	r0, [r2, #8]
 80055b8:	79b9      	ldrb	r1, [r7, #6]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	4798      	blx	r3
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000854 	.word	0x20000854

080055d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3301      	adds	r3, #1
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	b21a      	sxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055f2:	89fb      	ldrh	r3, [r7, #14]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3303      	adds	r3, #3
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	3202      	adds	r2, #2
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	3201      	adds	r2, #1
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	7812      	ldrb	r2, [r2, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
	return rv;
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	887a      	ldrh	r2, [r7, #2]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	1c53      	adds	r3, r2, #1
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6179      	str	r1, [r7, #20]
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f1      	bne.n	80056ee <mem_cpy+0x1a>
	}
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	617a      	str	r2, [r7, #20]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3b01      	subs	r3, #1
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f3      	bne.n	8005726 <mem_set+0x10>
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800574a:	b480      	push	{r7}
 800574c:	b089      	sub	sp, #36	; 0x24
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	61fa      	str	r2, [r7, #28]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	61ba      	str	r2, [r7, #24]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	1acb      	subs	r3, r1, r3
 8005776:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <mem_cmp+0x40>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0eb      	beq.n	8005762 <mem_cmp+0x18>

	return r;
 800578a:	697b      	ldr	r3, [r7, #20]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3724      	adds	r7, #36	; 0x24
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057a2:	e002      	b.n	80057aa <chk_chr+0x12>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3301      	adds	r3, #1
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <chk_chr+0x26>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d1f2      	bne.n	80057a4 <chk_chr+0xc>
	return *str;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	781b      	ldrb	r3, [r3, #0]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e029      	b.n	8005838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <chk_lock+0xb4>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	4413      	add	r3, r2
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01d      	beq.n	800582e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057f2:	4a24      	ldr	r2, [pc, #144]	; (8005884 <chk_lock+0xb4>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4413      	add	r3, r2
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d116      	bne.n	8005832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <chk_lock+0xb4>)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4413      	add	r3, r2
 800580c:	3304      	adds	r3, #4
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005814:	429a      	cmp	r2, r3
 8005816:	d10c      	bne.n	8005832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005818:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <chk_lock+0xb4>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	4413      	add	r3, r2
 8005820:	3308      	adds	r3, #8
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005828:	429a      	cmp	r2, r3
 800582a:	d102      	bne.n	8005832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800582c:	e007      	b.n	800583e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800582e:	2301      	movs	r3, #1
 8005830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d9d2      	bls.n	80057e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d109      	bne.n	8005858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <chk_lock+0x80>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d101      	bne.n	8005854 <chk_lock+0x84>
 8005850:	2300      	movs	r3, #0
 8005852:	e010      	b.n	8005876 <chk_lock+0xa6>
 8005854:	2312      	movs	r3, #18
 8005856:	e00e      	b.n	8005876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <chk_lock+0xa0>
 800585e:	4a09      	ldr	r2, [pc, #36]	; (8005884 <chk_lock+0xb4>)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4413      	add	r3, r2
 8005866:	330c      	adds	r3, #12
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	d101      	bne.n	8005874 <chk_lock+0xa4>
 8005870:	2310      	movs	r3, #16
 8005872:	e000      	b.n	8005876 <chk_lock+0xa6>
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000634 	.word	0x20000634

08005888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
 8005892:	e002      	b.n	800589a <enq_lock+0x12>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d806      	bhi.n	80058ae <enq_lock+0x26>
 80058a0:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <enq_lock+0x40>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	4413      	add	r3, r2
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f2      	bne.n	8005894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000634 	.word	0x20000634

080058cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e01f      	b.n	800591c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058dc:	4a41      	ldr	r2, [pc, #260]	; (80059e4 <inc_lock+0x118>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	4413      	add	r3, r2
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d113      	bne.n	8005916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <inc_lock+0x118>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80058fe:	429a      	cmp	r2, r3
 8005900:	d109      	bne.n	8005916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005902:	4a38      	ldr	r2, [pc, #224]	; (80059e4 <inc_lock+0x118>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	4413      	add	r3, r2
 800590a:	3308      	adds	r3, #8
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005912:	429a      	cmp	r2, r3
 8005914:	d006      	beq.n	8005924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3301      	adds	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d9dc      	bls.n	80058dc <inc_lock+0x10>
 8005922:	e000      	b.n	8005926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d132      	bne.n	8005992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e002      	b.n	8005938 <inc_lock+0x6c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d806      	bhi.n	800594c <inc_lock+0x80>
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <inc_lock+0x118>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	4413      	add	r3, r2
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f2      	bne.n	8005932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d101      	bne.n	8005956 <inc_lock+0x8a>
 8005952:	2300      	movs	r3, #0
 8005954:	e040      	b.n	80059d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4922      	ldr	r1, [pc, #136]	; (80059e4 <inc_lock+0x118>)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	440b      	add	r3, r1
 8005962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	491e      	ldr	r1, [pc, #120]	; (80059e4 <inc_lock+0x118>)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	440b      	add	r3, r1
 8005970:	3304      	adds	r3, #4
 8005972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	491a      	ldr	r1, [pc, #104]	; (80059e4 <inc_lock+0x118>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	440b      	add	r3, r1
 8005980:	3308      	adds	r3, #8
 8005982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <inc_lock+0x118>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	4413      	add	r3, r2
 800598c:	330c      	adds	r3, #12
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <inc_lock+0xe0>
 8005998:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <inc_lock+0x118>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	330c      	adds	r3, #12
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <inc_lock+0xe0>
 80059a8:	2300      	movs	r3, #0
 80059aa:	e015      	b.n	80059d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <inc_lock+0xf8>
 80059b2:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <inc_lock+0x118>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	4413      	add	r3, r2
 80059ba:	330c      	adds	r3, #12
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	e001      	b.n	80059c8 <inc_lock+0xfc>
 80059c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c8:	4906      	ldr	r1, [pc, #24]	; (80059e4 <inc_lock+0x118>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	440b      	add	r3, r1
 80059d0:	330c      	adds	r3, #12
 80059d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20000634 	.word	0x20000634

080059e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d825      	bhi.n	8005a48 <dec_lock+0x60>
		n = Files[i].ctr;
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <dec_lock+0x74>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	330c      	adds	r3, #12
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a10:	d101      	bne.n	8005a16 <dec_lock+0x2e>
 8005a12:	2300      	movs	r3, #0
 8005a14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a16:	89fb      	ldrh	r3, [r7, #14]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <dec_lock+0x3a>
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a22:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <dec_lock+0x74>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	4413      	add	r3, r2
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	89fa      	ldrh	r2, [r7, #14]
 8005a2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a30:	89fb      	ldrh	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <dec_lock+0x5a>
 8005a36:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <dec_lock+0x74>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	4413      	add	r3, r2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	737b      	strb	r3, [r7, #13]
 8005a46:	e001      	b.n	8005a4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a48:	2302      	movs	r3, #2
 8005a4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000634 	.word	0x20000634

08005a60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e010      	b.n	8005a90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <clear_lock+0x44>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	4413      	add	r3, r2
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d105      	bne.n	8005a8a <clear_lock+0x2a>
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <clear_lock+0x44>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d9eb      	bls.n	8005a6e <clear_lock+0xe>
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000634 	.word	0x20000634

08005aa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d034      	beq.n	8005b26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7858      	ldrb	r0, [r3, #1]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005acc:	2301      	movs	r3, #1
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f7ff fd40 	bl	8005554 <disk_write>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	e022      	b.n	8005b26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d217      	bcs.n	8005b26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	e010      	b.n	8005b20 <sync_window+0x78>
					wsect += fs->fsize;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7858      	ldrb	r0, [r3, #1]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b12:	2301      	movs	r3, #1
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	f7ff fd1d 	bl	8005554 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d8eb      	bhi.n	8005afe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d01b      	beq.n	8005b80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ffad 	bl	8005aa8 <sync_window>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d113      	bne.n	8005b80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7858      	ldrb	r0, [r3, #1]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b62:	2301      	movs	r3, #1
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	f7ff fcd5 	bl	8005514 <disk_read>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff87 	bl	8005aa8 <sync_window>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d158      	bne.n	8005c56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d148      	bne.n	8005c3e <sync_fs+0xb2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d144      	bne.n	8005c3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3334      	adds	r3, #52	; 0x34
 8005bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fda9 	bl	8005716 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3334      	adds	r3, #52	; 0x34
 8005bc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bcc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fd38 	bl	8005646 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3334      	adds	r3, #52	; 0x34
 8005bda:	4921      	ldr	r1, [pc, #132]	; (8005c60 <sync_fs+0xd4>)
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fd4d 	bl	800567c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3334      	adds	r3, #52	; 0x34
 8005be6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005bea:	491e      	ldr	r1, [pc, #120]	; (8005c64 <sync_fs+0xd8>)
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fd45 	bl	800567c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3334      	adds	r3, #52	; 0x34
 8005bf6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7ff fd3b 	bl	800567c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3334      	adds	r3, #52	; 0x34
 8005c0a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7ff fd31 	bl	800567c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7858      	ldrb	r0, [r3, #1]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c32:	2301      	movs	r3, #1
 8005c34:	f7ff fc8e 	bl	8005554 <disk_write>
			fs->fsi_flag = 0;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fca4 	bl	8005594 <disk_ioctl>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <sync_fs+0xca>
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	41615252 	.word	0x41615252
 8005c64:	61417272 	.word	0x61417272

08005c68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3b02      	subs	r3, #2
 8005c76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	3b02      	subs	r3, #2
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d301      	bcc.n	8005c88 <clust2sect+0x20>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e008      	b.n	8005c9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	895b      	ldrh	r3, [r3, #10]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	fb03 f202 	mul.w	r2, r3, r2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4413      	add	r3, r2
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b086      	sub	sp, #24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d904      	bls.n	8005cc6 <get_fat+0x20>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e08c      	b.n	8005de6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d045      	beq.n	8005d66 <get_fat+0xc0>
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d05d      	beq.n	8005d9a <get_fat+0xf4>
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d177      	bne.n	8005dd2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0a5b      	lsrs	r3, r3, #9
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6938      	ldr	r0, [r7, #16]
 8005cfe:	f7ff ff17 	bl	8005b30 <move_window>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d167      	bne.n	8005dd8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	60fa      	str	r2, [r7, #12]
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d1a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	0a5b      	lsrs	r3, r3, #9
 8005d24:	4413      	add	r3, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	6938      	ldr	r0, [r7, #16]
 8005d2a:	f7ff ff01 	bl	8005b30 <move_window>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d153      	bne.n	8005ddc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <get_fat+0xb6>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	e002      	b.n	8005d62 <get_fat+0xbc>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d62:	617b      	str	r3, [r7, #20]
			break;
 8005d64:	e03f      	b.n	8005de6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	4413      	add	r3, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f7ff fedc 	bl	8005b30 <move_window>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d130      	bne.n	8005de0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc1e 	bl	80055d0 <ld_word>
 8005d94:	4603      	mov	r3, r0
 8005d96:	617b      	str	r3, [r7, #20]
			break;
 8005d98:	e025      	b.n	8005de6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	09db      	lsrs	r3, r3, #7
 8005da2:	4413      	add	r3, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	6938      	ldr	r0, [r7, #16]
 8005da8:	f7ff fec2 	bl	8005b30 <move_window>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005dc0:	4413      	add	r3, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fc1c 	bl	8005600 <ld_dword>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dce:	617b      	str	r3, [r7, #20]
			break;
 8005dd0:	e009      	b.n	8005de6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e006      	b.n	8005de6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dd8:	bf00      	nop
 8005dda:	e004      	b.n	8005de6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005de4:	bf00      	nop
		}
	}

	return val;
 8005de6:	697b      	ldr	r3, [r7, #20]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f240 80d6 	bls.w	8005fb4 <put_fat+0x1c4>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f080 80d0 	bcs.w	8005fb4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d073      	beq.n	8005f04 <put_fat+0x114>
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	f000 8091 	beq.w	8005f44 <put_fat+0x154>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	f040 80c6 	bne.w	8005fb4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	4413      	add	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	0a5b      	lsrs	r3, r3, #9
 8005e3e:	4413      	add	r3, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fe74 	bl	8005b30 <move_window>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80a9 	bne.w	8005fa6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	61b9      	str	r1, [r7, #24]
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	4413      	add	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <put_fat+0x9e>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	b25a      	sxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b25b      	sxtb	r3, r3
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	e001      	b.n	8005e92 <put_fat+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	0a5b      	lsrs	r3, r3, #9
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff fe41 	bl	8005b30 <move_window>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eb2:	7ffb      	ldrb	r3, [r7, #31]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d178      	bne.n	8005faa <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	4413      	add	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <put_fat+0xea>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e00e      	b.n	8005ef8 <put_fat+0x108>
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f023 030f 	bic.w	r3, r3, #15
 8005ee4:	b25a      	sxtb	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	b25b      	sxtb	r3, r3
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	70da      	strb	r2, [r3, #3]
			break;
 8005f02:	e057      	b.n	8005fb4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fe0d 	bl	8005b30 <move_window>
 8005f16:	4603      	mov	r3, r0
 8005f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f1a:	7ffb      	ldrb	r3, [r7, #31]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d146      	bne.n	8005fae <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f2e:	4413      	add	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	b292      	uxth	r2, r2
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fb85 	bl	8005646 <st_word>
			fs->wflag = 1;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	70da      	strb	r2, [r3, #3]
			break;
 8005f42:	e037      	b.n	8005fb4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	09db      	lsrs	r3, r3, #7
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fded 	bl	8005b30 <move_window>
 8005f56:	4603      	mov	r3, r0
 8005f58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d128      	bne.n	8005fb2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f74:	4413      	add	r3, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fb42 	bl	8005600 <ld_dword>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f82:	4323      	orrs	r3, r4
 8005f84:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f94:	4413      	add	r3, r2
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fb6f 	bl	800567c <st_dword>
			fs->wflag = 1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	70da      	strb	r2, [r3, #3]
			break;
 8005fa4:	e006      	b.n	8005fb4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fa6:	bf00      	nop
 8005fa8:	e004      	b.n	8005fb4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fb2:	bf00      	nop
		}
	}
	return res;
 8005fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}

08005fbe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d904      	bls.n	8005fe4 <remove_chain+0x26>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d301      	bcc.n	8005fe8 <remove_chain+0x2a>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e04b      	b.n	8006080 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	69b8      	ldr	r0, [r7, #24]
 8005ff6:	f7ff fefb 	bl	8005df0 <put_fat>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005ffe:	7ffb      	ldrb	r3, [r7, #31]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <remove_chain+0x4a>
 8006004:	7ffb      	ldrb	r3, [r7, #31]
 8006006:	e03b      	b.n	8006080 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fe4b 	bl	8005ca6 <get_fat>
 8006010:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d031      	beq.n	800607c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <remove_chain+0x64>
 800601e:	2302      	movs	r3, #2
 8006020:	e02e      	b.n	8006080 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d101      	bne.n	800602e <remove_chain+0x70>
 800602a:	2301      	movs	r3, #1
 800602c:	e028      	b.n	8006080 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800602e:	2200      	movs	r2, #0
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	69b8      	ldr	r0, [r7, #24]
 8006034:	f7ff fedc 	bl	8005df0 <put_fat>
 8006038:	4603      	mov	r3, r0
 800603a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800603c:	7ffb      	ldrb	r3, [r7, #31]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <remove_chain+0x88>
 8006042:	7ffb      	ldrb	r3, [r7, #31]
 8006044:	e01c      	b.n	8006080 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	3b02      	subs	r3, #2
 8006050:	429a      	cmp	r2, r3
 8006052:	d20b      	bcs.n	800606c <remove_chain+0xae>
			fs->free_clst++;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	791b      	ldrb	r3, [r3, #4]
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d3c6      	bcc.n	8006008 <remove_chain+0x4a>
 800607a:	e000      	b.n	800607e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800607c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <create_chain+0x2c>
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d31b      	bcc.n	80060ec <create_chain+0x64>
 80060b4:	2301      	movs	r3, #1
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e018      	b.n	80060ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fdf2 	bl	8005ca6 <get_fat>
 80060c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d801      	bhi.n	80060ce <create_chain+0x46>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e070      	b.n	80061b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d101      	bne.n	80060da <create_chain+0x52>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	e06a      	b.n	80061b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d201      	bcs.n	80060e8 <create_chain+0x60>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e063      	b.n	80061b0 <create_chain+0x128>
		scl = clst;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d307      	bcc.n	8006110 <create_chain+0x88>
				ncl = 2;
 8006100:	2302      	movs	r3, #2
 8006102:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	429a      	cmp	r2, r3
 800610a:	d901      	bls.n	8006110 <create_chain+0x88>
 800610c:	2300      	movs	r3, #0
 800610e:	e04f      	b.n	80061b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fdc7 	bl	8005ca6 <get_fat>
 8006118:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00e      	beq.n	800613e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d003      	beq.n	800612e <create_chain+0xa6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d101      	bne.n	8006132 <create_chain+0xaa>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	e03e      	b.n	80061b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d1da      	bne.n	80060f0 <create_chain+0x68>
 800613a:	2300      	movs	r3, #0
 800613c:	e038      	b.n	80061b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800613e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006140:	f04f 32ff 	mov.w	r2, #4294967295
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f7ff fe52 	bl	8005df0 <put_fat>
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <create_chain+0xe2>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d006      	beq.n	800616a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6938      	ldr	r0, [r7, #16]
 8006162:	f7ff fe45 	bl	8005df0 <put_fat>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d116      	bne.n	800619e <create_chain+0x116>
		fs->last_clst = ncl;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	3b02      	subs	r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d804      	bhi.n	800618e <create_chain+0x106>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	791b      	ldrb	r3, [r3, #4]
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	711a      	strb	r2, [r3, #4]
 800619c:	e007      	b.n	80061ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d102      	bne.n	80061aa <create_chain+0x122>
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	e000      	b.n	80061ac <create_chain+0x124>
 80061aa:	2301      	movs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80061ae:	69fb      	ldr	r3, [r7, #28]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	3304      	adds	r3, #4
 80061ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	0a5b      	lsrs	r3, r3, #9
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	8952      	ldrh	r2, [r2, #10]
 80061d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	613a      	str	r2, [r7, #16]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <clmt_clust+0x3a>
 80061ee:	2300      	movs	r3, #0
 80061f0:	e010      	b.n	8006214 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d307      	bcc.n	800620a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3304      	adds	r3, #4
 8006206:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006208:	e7e9      	b.n	80061de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800620a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
}
 8006214:	4618      	mov	r0, r3
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006236:	d204      	bcs.n	8006242 <dir_sdi+0x22>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006242:	2302      	movs	r3, #2
 8006244:	e063      	b.n	800630e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <dir_sdi+0x46>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d902      	bls.n	8006266 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10c      	bne.n	8006286 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	8912      	ldrh	r2, [r2, #8]
 8006274:	4293      	cmp	r3, r2
 8006276:	d301      	bcc.n	800627c <dir_sdi+0x5c>
 8006278:	2302      	movs	r3, #2
 800627a:	e048      	b.n	800630e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	61da      	str	r2, [r3, #28]
 8006284:	e029      	b.n	80062da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	895b      	ldrh	r3, [r3, #10]
 800628a:	025b      	lsls	r3, r3, #9
 800628c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800628e:	e019      	b.n	80062c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fd06 	bl	8005ca6 <get_fat>
 800629a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d101      	bne.n	80062a8 <dir_sdi+0x88>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e032      	b.n	800630e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d904      	bls.n	80062b8 <dir_sdi+0x98>
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d301      	bcc.n	80062bc <dir_sdi+0x9c>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e028      	b.n	800630e <dir_sdi+0xee>
			ofs -= csz;
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d2e1      	bcs.n	8006290 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	6938      	ldr	r0, [r7, #16]
 80062d0:	f7ff fcca 	bl	8005c68 <clust2sect>
 80062d4:	4602      	mov	r2, r0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <dir_sdi+0xcc>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e010      	b.n	800630e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	0a5b      	lsrs	r3, r3, #9
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	3320      	adds	r3, #32
 800632c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <dir_next+0x28>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633c:	d301      	bcc.n	8006342 <dir_next+0x2c>
 800633e:	2304      	movs	r3, #4
 8006340:	e0aa      	b.n	8006498 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 8098 	bne.w	800647e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	8912      	ldrh	r2, [r2, #8]
 8006368:	4293      	cmp	r3, r2
 800636a:	f0c0 8088 	bcc.w	800647e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	61da      	str	r2, [r3, #28]
 8006374:	2304      	movs	r3, #4
 8006376:	e08f      	b.n	8006498 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	0a5b      	lsrs	r3, r3, #9
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	8952      	ldrh	r2, [r2, #10]
 8006380:	3a01      	subs	r2, #1
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d17a      	bne.n	800647e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f7ff fc88 	bl	8005ca6 <get_fat>
 8006396:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d801      	bhi.n	80063a2 <dir_next+0x8c>
 800639e:	2302      	movs	r3, #2
 80063a0:	e07a      	b.n	8006498 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d101      	bne.n	80063ae <dir_next+0x98>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e074      	b.n	8006498 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d358      	bcc.n	800646a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	61da      	str	r2, [r3, #28]
 80063c4:	2304      	movs	r3, #4
 80063c6:	e067      	b.n	8006498 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7ff fe59 	bl	8006088 <create_chain>
 80063d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <dir_next+0xcc>
 80063de:	2307      	movs	r3, #7
 80063e0:	e05a      	b.n	8006498 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <dir_next+0xd6>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e055      	b.n	8006498 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d101      	bne.n	80063f8 <dir_next+0xe2>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e04f      	b.n	8006498 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff fb55 	bl	8005aa8 <sync_window>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <dir_next+0xf2>
 8006404:	2301      	movs	r3, #1
 8006406:	e047      	b.n	8006498 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3334      	adds	r3, #52	; 0x34
 800640c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff f97f 	bl	8005716 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fc22 	bl	8005c68 <clust2sect>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
 800642a:	e012      	b.n	8006452 <dir_next+0x13c>
						fs->wflag = 1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fb38 	bl	8005aa8 <sync_window>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <dir_next+0x12c>
 800643e:	2301      	movs	r3, #1
 8006440:	e02a      	b.n	8006498 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3301      	adds	r3, #1
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	895b      	ldrh	r3, [r3, #10]
 8006456:	461a      	mov	r2, r3
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4293      	cmp	r3, r2
 800645c:	d3e6      	bcc.n	800642c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fbf8 	bl	8005c68 <clust2sect>
 8006478:	4602      	mov	r2, r0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006490:	441a      	add	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff feb4 	bl	8006220 <dir_sdi>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12b      	bne.n	800651a <dir_alloc+0x7a>
		n = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fb2f 	bl	8005b30 <move_window>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11d      	bne.n	8006518 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2be5      	cmp	r3, #229	; 0xe5
 80064e4:	d004      	beq.n	80064f0 <dir_alloc+0x50>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d107      	bne.n	8006500 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	3301      	adds	r3, #1
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d102      	bne.n	8006504 <dir_alloc+0x64>
 80064fe:	e00c      	b.n	800651a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006504:	2101      	movs	r1, #1
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ff05 	bl	8006316 <dir_next>
 800650c:	4603      	mov	r3, r0
 800650e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0d7      	beq.n	80064c6 <dir_alloc+0x26>
 8006516:	e000      	b.n	800651a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006518:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d101      	bne.n	8006524 <dir_alloc+0x84>
 8006520:	2307      	movs	r3, #7
 8006522:	75fb      	strb	r3, [r7, #23]
	return res;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	331a      	adds	r3, #26
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff f847 	bl	80055d0 <ld_word>
 8006542:	4603      	mov	r3, r0
 8006544:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d109      	bne.n	8006562 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff f83c 	bl	80055d0 <ld_word>
 8006558:	4603      	mov	r3, r0
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	331a      	adds	r3, #26
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	b292      	uxth	r2, r2
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff f85f 	bl	8005646 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d109      	bne.n	80065a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f103 0214 	add.w	r2, r3, #20
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	b29b      	uxth	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7ff f851 	bl	8005646 <st_word>
	}
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80065ac:	b590      	push	{r4, r7, lr}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	331a      	adds	r3, #26
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff f808 	bl	80055d0 <ld_word>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <cmp_lfn+0x1e>
 80065c6:	2300      	movs	r3, #0
 80065c8:	e059      	b.n	800667e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d2:	1e5a      	subs	r2, r3, #1
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80065e0:	2301      	movs	r3, #1
 80065e2:	81fb      	strh	r3, [r7, #14]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e033      	b.n	8006652 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80065ea:	4a27      	ldr	r2, [pc, #156]	; (8006688 <cmp_lfn+0xdc>)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	4413      	add	r3, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe ffe9 	bl	80055d0 <ld_word>
 80065fe:	4603      	mov	r3, r0
 8006600:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006602:	89fb      	ldrh	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01a      	beq.n	800663e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2bfe      	cmp	r3, #254	; 0xfe
 800660c:	d812      	bhi.n	8006634 <cmp_lfn+0x88>
 800660e:	89bb      	ldrh	r3, [r7, #12]
 8006610:	4618      	mov	r0, r3
 8006612:	f002 f827 	bl	8008664 <ff_wtoupper>
 8006616:	4603      	mov	r3, r0
 8006618:	461c      	mov	r4, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	617a      	str	r2, [r7, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f002 f81b 	bl	8008664 <ff_wtoupper>
 800662e:	4603      	mov	r3, r0
 8006630:	429c      	cmp	r4, r3
 8006632:	d001      	beq.n	8006638 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006634:	2300      	movs	r3, #0
 8006636:	e022      	b.n	800667e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006638:	89bb      	ldrh	r3, [r7, #12]
 800663a:	81fb      	strh	r3, [r7, #14]
 800663c:	e006      	b.n	800664c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800663e:	89bb      	ldrh	r3, [r7, #12]
 8006640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006644:	4293      	cmp	r3, r2
 8006646:	d001      	beq.n	800664c <cmp_lfn+0xa0>
 8006648:	2300      	movs	r3, #0
 800664a:	e018      	b.n	800667e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3301      	adds	r3, #1
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b0c      	cmp	r3, #12
 8006656:	d9c8      	bls.n	80065ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <cmp_lfn+0xd0>
 8006664:	89fb      	ldrh	r3, [r7, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <cmp_lfn+0xd0>
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <cmp_lfn+0xd0>
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800667c:	2301      	movs	r3, #1
}
 800667e:	4618      	mov	r0, r3
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd90      	pop	{r4, r7, pc}
 8006686:	bf00      	nop
 8006688:	0800b4a4 	.word	0x0800b4a4

0800668c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	4613      	mov	r3, r2
 80066a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	330d      	adds	r3, #13
 80066a6:	79ba      	ldrb	r2, [r7, #6]
 80066a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	330b      	adds	r3, #11
 80066ae:	220f      	movs	r2, #15
 80066b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	330c      	adds	r3, #12
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	331a      	adds	r3, #26
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe ffc0 	bl	8005646 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	82fb      	strh	r3, [r7, #22]
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80066de:	8afb      	ldrh	r3, [r7, #22]
 80066e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <put_lfn+0x6c>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	61fa      	str	r2, [r7, #28]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <put_lfn+0xcc>)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	4413      	add	r3, r2
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	8afa      	ldrh	r2, [r7, #22]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe ff9b 	bl	8005646 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006710:	8afb      	ldrh	r3, [r7, #22]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <put_lfn+0x90>
 8006716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800671a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	3301      	adds	r3, #1
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d9da      	bls.n	80066de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006728:	8afb      	ldrh	r3, [r7, #22]
 800672a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800672e:	4293      	cmp	r3, r2
 8006730:	d006      	beq.n	8006740 <put_lfn+0xb4>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <put_lfn+0xbc>
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	701a      	strb	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	0800b4a4 	.word	0x0800b4a4

0800675c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800676a:	220b      	movs	r2, #11
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7fe ffb0 	bl	80056d4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d92b      	bls.n	80067d2 <gen_numname+0x76>
		sr = seq;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800677e:	e022      	b.n	80067c6 <gen_numname+0x6a>
			wc = *lfn++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800678a:	2300      	movs	r3, #0
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	e017      	b.n	80067c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005a      	lsls	r2, r3, #1
 8006794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800679e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <gen_numname+0x5e>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80067b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80067b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	3301      	adds	r3, #1
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2b0f      	cmp	r3, #15
 80067c4:	d9e4      	bls.n	8006790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d8      	bne.n	8006780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80067d2:	2307      	movs	r3, #7
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	3330      	adds	r3, #48	; 0x30
 80067e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80067e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ea:	2b39      	cmp	r3, #57	; 0x39
 80067ec:	d904      	bls.n	80067f8 <gen_numname+0x9c>
 80067ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067f2:	3307      	adds	r3, #7
 80067f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80067fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006802:	4413      	add	r3, r2
 8006804:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006808:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1de      	bne.n	80067d6 <gen_numname+0x7a>
	ns[i] = '~';
 8006818:	f107 0214 	add.w	r2, r7, #20
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	4413      	add	r3, r2
 8006820:	227e      	movs	r2, #126	; 0x7e
 8006822:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006824:	2300      	movs	r3, #0
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
 8006828:	e002      	b.n	8006830 <gen_numname+0xd4>
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	3301      	adds	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	429a      	cmp	r2, r3
 8006836:	d205      	bcs.n	8006844 <gen_numname+0xe8>
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	4413      	add	r3, r2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b20      	cmp	r3, #32
 8006842:	d1f2      	bne.n	800682a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2b07      	cmp	r3, #7
 8006848:	d808      	bhi.n	800685c <gen_numname+0x100>
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006850:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006854:	4413      	add	r3, r2
 8006856:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800685a:	e000      	b.n	800685e <gen_numname+0x102>
 800685c:	2120      	movs	r1, #32
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	627a      	str	r2, [r7, #36]	; 0x24
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	460a      	mov	r2, r1
 800686a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2b07      	cmp	r3, #7
 8006870:	d9e8      	bls.n	8006844 <gen_numname+0xe8>
}
 8006872:	bf00      	nop
 8006874:	3730      	adds	r7, #48	; 0x30
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006886:	230b      	movs	r3, #11
 8006888:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	0852      	lsrs	r2, r2, #1
 8006890:	01db      	lsls	r3, r3, #7
 8006892:	4313      	orrs	r3, r2
 8006894:	b2da      	uxtb	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1c59      	adds	r1, r3, #1
 800689a:	6079      	str	r1, [r7, #4]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	4413      	add	r3, r2
 80068a0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ed      	bne.n	800688a <sum_sfn+0x10>
	return sum;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068ca:	2100      	movs	r1, #0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fca7 	bl	8006220 <dir_sdi>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <dir_find+0x24>
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	e0a9      	b.n	8006a34 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80068e0:	23ff      	movs	r3, #255	; 0xff
 80068e2:	753b      	strb	r3, [r7, #20]
 80068e4:	7d3b      	ldrb	r3, [r7, #20]
 80068e6:	757b      	strb	r3, [r7, #21]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f7ff f91a 	bl	8005b30 <move_window>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f040 8090 	bne.w	8006a28 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <dir_find+0x60>
 8006916:	2304      	movs	r3, #4
 8006918:	75fb      	strb	r3, [r7, #23]
 800691a:	e08a      	b.n	8006a32 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	330b      	adds	r3, #11
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	2be5      	cmp	r3, #229	; 0xe5
 8006934:	d007      	beq.n	8006946 <dir_find+0x8a>
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <dir_find+0x98>
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b0f      	cmp	r3, #15
 8006944:	d006      	beq.n	8006954 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006946:	23ff      	movs	r3, #255	; 0xff
 8006948:	757b      	strb	r3, [r7, #21]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
 8006952:	e05e      	b.n	8006a12 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d136      	bne.n	80069c8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d154      	bne.n	8006a12 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	7b5b      	ldrb	r3, [r3, #13]
 8006978:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800697a:	7dbb      	ldrb	r3, [r7, #22]
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	75bb      	strb	r3, [r7, #22]
 8006982:	7dbb      	ldrb	r3, [r7, #22]
 8006984:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800698e:	7dba      	ldrb	r2, [r7, #22]
 8006990:	7d7b      	ldrb	r3, [r7, #21]
 8006992:	429a      	cmp	r2, r3
 8006994:	d115      	bne.n	80069c2 <dir_find+0x106>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	330d      	adds	r3, #13
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	7d3a      	ldrb	r2, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d10e      	bne.n	80069c2 <dir_find+0x106>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f7ff fdfc 	bl	80065ac <cmp_lfn>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <dir_find+0x106>
 80069ba:	7d7b      	ldrb	r3, [r7, #21]
 80069bc:	3b01      	subs	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	e000      	b.n	80069c4 <dir_find+0x108>
 80069c2:	23ff      	movs	r3, #255	; 0xff
 80069c4:	757b      	strb	r3, [r7, #21]
 80069c6:	e024      	b.n	8006a12 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80069c8:	7d7b      	ldrb	r3, [r7, #21]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <dir_find+0x126>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff ff51 	bl	800687a <sum_sfn>
 80069d8:	4603      	mov	r3, r0
 80069da:	461a      	mov	r2, r3
 80069dc:	7d3b      	ldrb	r3, [r7, #20]
 80069de:	4293      	cmp	r3, r2
 80069e0:	d024      	beq.n	8006a2c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <dir_find+0x14a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a18      	ldr	r0, [r3, #32]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	220b      	movs	r2, #11
 80069fa:	4619      	mov	r1, r3
 80069fc:	f7fe fea5 	bl	800574a <mem_cmp>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d014      	beq.n	8006a30 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a06:	23ff      	movs	r3, #255	; 0xff
 8006a08:	757b      	strb	r3, [r7, #21]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a12:	2100      	movs	r1, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fc7e 	bl	8006316 <dir_next>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f43f af65 	beq.w	80068f0 <dir_find+0x34>
 8006a26:	e004      	b.n	8006a32 <dir_find+0x176>
		if (res != FR_OK) break;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a30:	bf00      	nop

	return res;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a50:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <dir_register+0x20>
 8006a58:	2306      	movs	r3, #6
 8006a5a:	e0e0      	b.n	8006c1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	e002      	b.n	8006a68 <dir_register+0x2c>
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	3301      	adds	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f4      	bne.n	8006a62 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	220c      	movs	r2, #12
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fe25 	bl	80056d4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d032      	beq.n	8006afa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa0:	e016      	b.n	8006ad0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	f107 010c 	add.w	r1, r7, #12
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f7ff fe53 	bl	800675c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ff00 	bl	80068bc <dir_find>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	3301      	adds	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2b63      	cmp	r3, #99	; 0x63
 8006ad4:	d9e5      	bls.n	8006aa2 <dir_register+0x66>
 8006ad6:	e000      	b.n	8006ada <dir_register+0x9e>
			if (res != FR_OK) break;
 8006ad8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	2b64      	cmp	r3, #100	; 0x64
 8006ade:	d101      	bne.n	8006ae4 <dir_register+0xa8>
 8006ae0:	2307      	movs	r3, #7
 8006ae2:	e09c      	b.n	8006c1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d002      	beq.n	8006af2 <dir_register+0xb6>
 8006aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006af0:	e095      	b.n	8006c1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006af2:	7dfa      	ldrb	r2, [r7, #23]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <dir_register+0xd8>
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	330c      	adds	r3, #12
 8006b08:	4a47      	ldr	r2, [pc, #284]	; (8006c28 <dir_register+0x1ec>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	3301      	adds	r3, #1
 8006b12:	e000      	b.n	8006b16 <dir_register+0xda>
 8006b14:	2301      	movs	r3, #1
 8006b16:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b18:	6a39      	ldr	r1, [r7, #32]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fcc0 	bl	80064a0 <dir_alloc>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d148      	bne.n	8006bc0 <dir_register+0x184>
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d042      	beq.n	8006bc0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	015b      	lsls	r3, r3, #5
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fb6a 	bl	8006220 <dir_sdi>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d132      	bne.n	8006bc0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fe8b 	bl	800687a <sum_sfn>
 8006b64:	4603      	mov	r3, r0
 8006b66:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	69f8      	ldr	r0, [r7, #28]
 8006b70:	f7fe ffde 	bl	8005b30 <move_window>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	68d8      	ldr	r0, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a19      	ldr	r1, [r3, #32]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	7efb      	ldrb	r3, [r7, #27]
 8006b90:	f7ff fd7c 	bl	800668c <put_lfn>
				fs->wflag = 1;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2201      	movs	r2, #1
 8006b98:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff fbba 	bl	8006316 <dir_next>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <dir_register+0x184>
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1d5      	bne.n	8006b68 <dir_register+0x12c>
 8006bbc:	e000      	b.n	8006bc0 <dir_register+0x184>
				if (res != FR_OK) break;
 8006bbe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d128      	bne.n	8006c1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	69f8      	ldr	r0, [r7, #28]
 8006bd0:	f7fe ffae 	bl	8005b30 <move_window>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11b      	bne.n	8006c1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	2220      	movs	r2, #32
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fd93 	bl	8005716 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a18      	ldr	r0, [r3, #32]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	220b      	movs	r2, #11
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7fe fd6a 	bl	80056d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	f002 0218 	and.w	r2, r2, #24
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2201      	movs	r2, #1
 8006c18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3730      	adds	r7, #48	; 0x30
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	4ec4ec4f 	.word	0x4ec4ec4f

08006c2c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d007      	beq.n	8006c5a <dir_remove+0x2e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff fae5 	bl	8006220 <dir_sdi>
 8006c56:	4603      	mov	r3, r0
 8006c58:	e000      	b.n	8006c5c <dir_remove+0x30>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d128      	bne.n	8006cb6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f7fe ff60 	bl	8005b30 <move_window>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d115      	bne.n	8006ca6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	22e5      	movs	r2, #229	; 0xe5
 8006c80:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2201      	movs	r2, #1
 8006c86:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d90b      	bls.n	8006caa <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8006c92:	2100      	movs	r1, #0
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fb3e 	bl	8006316 <dir_next>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0df      	beq.n	8006c64 <dir_remove+0x38>
 8006ca4:	e002      	b.n	8006cac <dir_remove+0x80>
			if (res != FR_OK) break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006caa:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d101      	bne.n	8006cb6 <dir_remove+0x8a>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	61ba      	str	r2, [r7, #24]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf0:	2b1f      	cmp	r3, #31
 8006cf2:	d940      	bls.n	8006d76 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf6:	2b2f      	cmp	r3, #47	; 0x2f
 8006cf8:	d006      	beq.n	8006d08 <create_name+0x48>
 8006cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfc:	2b5c      	cmp	r3, #92	; 0x5c
 8006cfe:	d110      	bne.n	8006d22 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006d00:	e002      	b.n	8006d08 <create_name+0x48>
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b2f      	cmp	r3, #47	; 0x2f
 8006d12:	d0f6      	beq.n	8006d02 <create_name+0x42>
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	4413      	add	r3, r2
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b5c      	cmp	r3, #92	; 0x5c
 8006d1e:	d0f0      	beq.n	8006d02 <create_name+0x42>
			break;
 8006d20:	e02a      	b.n	8006d78 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2bfe      	cmp	r3, #254	; 0xfe
 8006d26:	d901      	bls.n	8006d2c <create_name+0x6c>
 8006d28:	2306      	movs	r3, #6
 8006d2a:	e177      	b.n	800701c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fc58 	bl	80085ec <ff_convert>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <create_name+0x8a>
 8006d46:	2306      	movs	r3, #6
 8006d48:	e168      	b.n	800701c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4e:	d809      	bhi.n	8006d64 <create_name+0xa4>
 8006d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d52:	4619      	mov	r1, r3
 8006d54:	48b3      	ldr	r0, [pc, #716]	; (8007024 <create_name+0x364>)
 8006d56:	f7fe fd1f 	bl	8005798 <chk_chr>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <create_name+0xa4>
 8006d60:	2306      	movs	r3, #6
 8006d62:	e15b      	b.n	800701c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	617a      	str	r2, [r7, #20]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006d74:	e7b4      	b.n	8006ce0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006d76:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	441a      	add	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d84:	2b1f      	cmp	r3, #31
 8006d86:	d801      	bhi.n	8006d8c <create_name+0xcc>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	e000      	b.n	8006d8e <create_name+0xce>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006d92:	e011      	b.n	8006db8 <create_name+0xf8>
		w = lfn[di - 1];
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d002      	beq.n	8006db2 <create_name+0xf2>
 8006dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dae:	2b2e      	cmp	r3, #46	; 0x2e
 8006db0:	d106      	bne.n	8006dc0 <create_name+0x100>
		di--;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1ea      	bne.n	8006d94 <create_name+0xd4>
 8006dbe:	e000      	b.n	8006dc2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006dc0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <create_name+0x118>
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	e121      	b.n	800701c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	220b      	movs	r2, #11
 8006dde:	2120      	movs	r1, #32
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fc98 	bl	8005716 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e002      	b.n	8006df2 <create_name+0x132>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d0f5      	beq.n	8006dec <create_name+0x12c>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0c:	d0ee      	beq.n	8006dec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <create_name+0x168>
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e18:	f043 0303 	orr.w	r3, r3, #3
 8006e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006e20:	e002      	b.n	8006e28 <create_name+0x168>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <create_name+0x182>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	3b01      	subs	r3, #1
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e40:	d1ef      	bne.n	8006e22 <create_name+0x162>

	i = b = 0; ni = 8;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e48:	2300      	movs	r3, #0
 8006e4a:	623b      	str	r3, [r7, #32]
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	61ba      	str	r2, [r7, #24]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8090 	beq.w	8006f88 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d006      	beq.n	8006e7c <create_name+0x1bc>
 8006e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e70:	2b2e      	cmp	r3, #46	; 0x2e
 8006e72:	d10a      	bne.n	8006e8a <create_name+0x1ca>
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d006      	beq.n	8006e8a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e80:	f043 0303 	orr.w	r3, r3, #3
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e88:	e07d      	b.n	8006f86 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d203      	bcs.n	8006e9a <create_name+0x1da>
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d123      	bne.n	8006ee2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b0b      	cmp	r3, #11
 8006e9e:	d106      	bne.n	8006eae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea4:	f043 0303 	orr.w	r3, r3, #3
 8006ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006eac:	e06f      	b.n	8006f8e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d005      	beq.n	8006ec2 <create_name+0x202>
 8006eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eba:	f043 0303 	orr.w	r3, r3, #3
 8006ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d860      	bhi.n	8006f8c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	2308      	movs	r3, #8
 8006ed0:	623b      	str	r3, [r7, #32]
 8006ed2:	230b      	movs	r3, #11
 8006ed4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ee0:	e051      	b.n	8006f86 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee6:	d914      	bls.n	8006f12 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fb7d 	bl	80085ec <ff_convert>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <create_name+0x246>
 8006efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efe:	3b80      	subs	r3, #128	; 0x80
 8006f00:	4a49      	ldr	r2, [pc, #292]	; (8007028 <create_name+0x368>)
 8006f02:	5cd3      	ldrb	r3, [r2, r3]
 8006f04:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0a:	f043 0302 	orr.w	r3, r3, #2
 8006f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <create_name+0x268>
 8006f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4843      	ldr	r0, [pc, #268]	; (800702c <create_name+0x36c>)
 8006f1e:	f7fe fc3b 	bl	8005798 <chk_chr>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006f28:	235f      	movs	r3, #95	; 0x5f
 8006f2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f30:	f043 0303 	orr.w	r3, r3, #3
 8006f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f38:	e01b      	b.n	8006f72 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d909      	bls.n	8006f54 <create_name+0x294>
 8006f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f42:	2b5a      	cmp	r3, #90	; 0x5a
 8006f44:	d806      	bhi.n	8006f54 <create_name+0x294>
					b |= 2;
 8006f46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f4a:	f043 0302 	orr.w	r3, r3, #2
 8006f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f52:	e00e      	b.n	8006f72 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f56:	2b60      	cmp	r3, #96	; 0x60
 8006f58:	d90b      	bls.n	8006f72 <create_name+0x2b2>
 8006f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f5c:	2b7a      	cmp	r3, #122	; 0x7a
 8006f5e:	d808      	bhi.n	8006f72 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f6e:	3b20      	subs	r3, #32
 8006f70:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	623a      	str	r2, [r7, #32]
 8006f78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f7a:	b2d1      	uxtb	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	460a      	mov	r2, r1
 8006f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006f86:	e763      	b.n	8006e50 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006f88:	bf00      	nop
 8006f8a:	e000      	b.n	8006f8e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006f8c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f94:	2be5      	cmp	r3, #229	; 0xe5
 8006f96:	d103      	bne.n	8006fa0 <create_name+0x2e0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d104      	bne.n	8006fb0 <create_name+0x2f0>
 8006fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d005      	beq.n	8006fc8 <create_name+0x308>
 8006fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d105      	bne.n	8006fd4 <create_name+0x314>
 8006fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d117      	bne.n	8007010 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d105      	bne.n	8006ff8 <create_name+0x338>
 8006fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff0:	f043 0310 	orr.w	r3, r3, #16
 8006ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ffc:	f003 030c 	and.w	r3, r3, #12
 8007000:	2b04      	cmp	r3, #4
 8007002:	d105      	bne.n	8007010 <create_name+0x350>
 8007004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007008:	f043 0308 	orr.w	r3, r3, #8
 800700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007016:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800701a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800701c:	4618      	mov	r0, r3
 800701e:	3728      	adds	r7, #40	; 0x28
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	0800b3b8 	.word	0x0800b3b8
 8007028:	0800b424 	.word	0x0800b424
 800702c:	0800b3c4 	.word	0x0800b3c4

08007030 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007044:	e002      	b.n	800704c <follow_path+0x1c>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b2f      	cmp	r3, #47	; 0x2f
 8007052:	d0f8      	beq.n	8007046 <follow_path+0x16>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b5c      	cmp	r3, #92	; 0x5c
 800705a:	d0f4      	beq.n	8007046 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2200      	movs	r2, #0
 8007060:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b1f      	cmp	r3, #31
 8007068:	d80a      	bhi.n	8007080 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2280      	movs	r2, #128	; 0x80
 800706e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007072:	2100      	movs	r1, #0
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff f8d3 	bl	8006220 <dir_sdi>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]
 800707e:	e043      	b.n	8007108 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007080:	463b      	mov	r3, r7
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff fe1b 	bl	8006cc0 <create_name>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d134      	bne.n	80070fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff fc11 	bl	80068bc <dir_find>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d127      	bne.n	8007102 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80070b2:	7afb      	ldrb	r3, [r7, #11]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d122      	bne.n	8007102 <follow_path+0xd2>
 80070bc:	2305      	movs	r3, #5
 80070be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80070c0:	e01f      	b.n	8007102 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11c      	bne.n	8007106 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	799b      	ldrb	r3, [r3, #6]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80070d8:	2305      	movs	r3, #5
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	e014      	b.n	8007108 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	4413      	add	r3, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff fa1c 	bl	800652e <ld_clust>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070fc:	e7c0      	b.n	8007080 <follow_path+0x50>
			if (res != FR_OK) break;
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <follow_path+0xd8>
				break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007106:	bf00      	nop
			}
		}
	}

	return res;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007112:	b480      	push	{r7}
 8007114:	b087      	sub	sp, #28
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
 800711e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d031      	beq.n	800718c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e002      	b.n	8007136 <get_ldnumber+0x24>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b1f      	cmp	r3, #31
 800713c:	d903      	bls.n	8007146 <get_ldnumber+0x34>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b3a      	cmp	r3, #58	; 0x3a
 8007144:	d1f4      	bne.n	8007130 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b3a      	cmp	r3, #58	; 0x3a
 800714c:	d11c      	bne.n	8007188 <get_ldnumber+0x76>
			tp = *path;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	60fa      	str	r2, [r7, #12]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	3b30      	subs	r3, #48	; 0x30
 800715e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b09      	cmp	r3, #9
 8007164:	d80e      	bhi.n	8007184 <get_ldnumber+0x72>
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d10a      	bne.n	8007184 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d107      	bne.n	8007184 <get_ldnumber+0x72>
					vol = (int)i;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	3301      	adds	r3, #1
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e002      	b.n	800718e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800718c:	693b      	ldr	r3, [r7, #16]
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	70da      	strb	r2, [r3, #3]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fe fcba 	bl	8005b30 <move_window>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <check_fs+0x2a>
 80071c2:	2304      	movs	r3, #4
 80071c4:	e038      	b.n	8007238 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3334      	adds	r3, #52	; 0x34
 80071ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe f9fe 	bl	80055d0 <ld_word>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071dc:	429a      	cmp	r2, r3
 80071de:	d001      	beq.n	80071e4 <check_fs+0x48>
 80071e0:	2303      	movs	r3, #3
 80071e2:	e029      	b.n	8007238 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ea:	2be9      	cmp	r3, #233	; 0xe9
 80071ec:	d009      	beq.n	8007202 <check_fs+0x66>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071f4:	2beb      	cmp	r3, #235	; 0xeb
 80071f6:	d11e      	bne.n	8007236 <check_fs+0x9a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071fe:	2b90      	cmp	r3, #144	; 0x90
 8007200:	d119      	bne.n	8007236 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3334      	adds	r3, #52	; 0x34
 8007206:	3336      	adds	r3, #54	; 0x36
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe f9f9 	bl	8005600 <ld_dword>
 800720e:	4603      	mov	r3, r0
 8007210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007214:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <check_fs+0xa4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d101      	bne.n	800721e <check_fs+0x82>
 800721a:	2300      	movs	r3, #0
 800721c:	e00c      	b.n	8007238 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3334      	adds	r3, #52	; 0x34
 8007222:	3352      	adds	r3, #82	; 0x52
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe f9eb 	bl	8005600 <ld_dword>
 800722a:	4602      	mov	r2, r0
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <check_fs+0xa8>)
 800722e:	429a      	cmp	r2, r3
 8007230:	d101      	bne.n	8007236 <check_fs+0x9a>
 8007232:	2300      	movs	r3, #0
 8007234:	e000      	b.n	8007238 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007236:	2302      	movs	r3, #2
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	00544146 	.word	0x00544146
 8007244:	33544146 	.word	0x33544146

08007248 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b096      	sub	sp, #88	; 0x58
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff ff58 	bl	8007112 <get_ldnumber>
 8007262:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	da01      	bge.n	800726e <find_volume+0x26>
 800726a:	230b      	movs	r3, #11
 800726c:	e231      	b.n	80076d2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800726e:	4aa8      	ldr	r2, [pc, #672]	; (8007510 <find_volume+0x2c8>)
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <find_volume+0x3a>
 800727e:	230c      	movs	r3, #12
 8007280:	e227      	b.n	80076d2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007286:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01a      	beq.n	80072ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe f8f9 	bl	8005494 <disk_status>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80072a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10c      	bne.n	80072ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <find_volume+0x82>
 80072ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80072c6:	230a      	movs	r3, #10
 80072c8:	e203      	b.n	80076d2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80072ca:	2300      	movs	r3, #0
 80072cc:	e201      	b.n	80076d2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe f8f1 	bl	80054c8 <disk_initialize>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80072ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072f8:	2303      	movs	r3, #3
 80072fa:	e1ea      	b.n	80076d2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <find_volume+0xca>
 8007302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800730e:	230a      	movs	r3, #10
 8007310:	e1df      	b.n	80076d2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800731a:	f7ff ff3f 	bl	800719c <check_fs>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007328:	2b02      	cmp	r3, #2
 800732a:	d14b      	bne.n	80073c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800732c:	2300      	movs	r3, #0
 800732e:	643b      	str	r3, [r7, #64]	; 0x40
 8007330:	e01f      	b.n	8007372 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007340:	4413      	add	r3, r2
 8007342:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	3304      	adds	r3, #4
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d006      	beq.n	800735c <find_volume+0x114>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	3308      	adds	r3, #8
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe f954 	bl	8005600 <ld_dword>
 8007358:	4602      	mov	r2, r0
 800735a:	e000      	b.n	800735e <find_volume+0x116>
 800735c:	2200      	movs	r2, #0
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007366:	440b      	add	r3, r1
 8007368:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736e:	3301      	adds	r3, #1
 8007370:	643b      	str	r3, [r7, #64]	; 0x40
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	2b03      	cmp	r3, #3
 8007376:	d9dc      	bls.n	8007332 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007378:	2300      	movs	r3, #0
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800737c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <find_volume+0x140>
 8007382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007384:	3b01      	subs	r3, #1
 8007386:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007390:	4413      	add	r3, r2
 8007392:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007396:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <find_volume+0x162>
 800739e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a2:	f7ff fefb 	bl	800719c <check_fs>
 80073a6:	4603      	mov	r3, r0
 80073a8:	e000      	b.n	80073ac <find_volume+0x164>
 80073aa:	2303      	movs	r3, #3
 80073ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d905      	bls.n	80073c4 <find_volume+0x17c>
 80073b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ba:	3301      	adds	r3, #1
 80073bc:	643b      	str	r3, [r7, #64]	; 0x40
 80073be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d9e1      	bls.n	8007388 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d101      	bne.n	80073d0 <find_volume+0x188>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e180      	b.n	80076d2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d901      	bls.n	80073dc <find_volume+0x194>
 80073d8:	230d      	movs	r3, #13
 80073da:	e17a      	b.n	80076d2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	3334      	adds	r3, #52	; 0x34
 80073e0:	330b      	adds	r3, #11
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe f8f4 	bl	80055d0 <ld_word>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ee:	d001      	beq.n	80073f4 <find_volume+0x1ac>
 80073f0:	230d      	movs	r3, #13
 80073f2:	e16e      	b.n	80076d2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	3334      	adds	r3, #52	; 0x34
 80073f8:	3316      	adds	r3, #22
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe f8e8 	bl	80055d0 <ld_word>
 8007400:	4603      	mov	r3, r0
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <find_volume+0x1d0>
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	3334      	adds	r3, #52	; 0x34
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe f8f5 	bl	8005600 <ld_dword>
 8007416:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800741c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	789b      	ldrb	r3, [r3, #2]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d005      	beq.n	800743c <find_volume+0x1f4>
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	789b      	ldrb	r3, [r3, #2]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d001      	beq.n	800743c <find_volume+0x1f4>
 8007438:	230d      	movs	r3, #13
 800743a:	e14a      	b.n	80076d2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	789b      	ldrb	r3, [r3, #2]
 8007440:	461a      	mov	r2, r3
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007450:	b29a      	uxth	r2, r3
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	895b      	ldrh	r3, [r3, #10]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <find_volume+0x228>
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	895b      	ldrh	r3, [r3, #10]
 8007462:	461a      	mov	r2, r3
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	895b      	ldrh	r3, [r3, #10]
 8007468:	3b01      	subs	r3, #1
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <find_volume+0x22c>
 8007470:	230d      	movs	r3, #13
 8007472:	e12e      	b.n	80076d2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	3334      	adds	r3, #52	; 0x34
 8007478:	3311      	adds	r3, #17
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe f8a8 	bl	80055d0 <ld_word>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	891b      	ldrh	r3, [r3, #8]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <find_volume+0x252>
 8007496:	230d      	movs	r3, #13
 8007498:	e11b      	b.n	80076d2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	3334      	adds	r3, #52	; 0x34
 800749e:	3313      	adds	r3, #19
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe f895 	bl	80055d0 <ld_word>
 80074a6:	4603      	mov	r3, r0
 80074a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <find_volume+0x276>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	3334      	adds	r3, #52	; 0x34
 80074b4:	3320      	adds	r3, #32
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f8a2 	bl	8005600 <ld_dword>
 80074bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	3334      	adds	r3, #52	; 0x34
 80074c2:	330e      	adds	r3, #14
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe f883 	bl	80055d0 <ld_word>
 80074ca:	4603      	mov	r3, r0
 80074cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80074ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <find_volume+0x290>
 80074d4:	230d      	movs	r3, #13
 80074d6:	e0fc      	b.n	80076d2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074dc:	4413      	add	r3, r2
 80074de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e0:	8912      	ldrh	r2, [r2, #8]
 80074e2:	0912      	lsrs	r2, r2, #4
 80074e4:	b292      	uxth	r2, r2
 80074e6:	4413      	add	r3, r2
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80074ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d201      	bcs.n	80074f6 <find_volume+0x2ae>
 80074f2:	230d      	movs	r3, #13
 80074f4:	e0ed      	b.n	80076d2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fe:	8952      	ldrh	r2, [r2, #10]
 8007500:	fbb3 f3f2 	udiv	r3, r3, r2
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <find_volume+0x2cc>
 800750c:	230d      	movs	r3, #13
 800750e:	e0e0      	b.n	80076d2 <find_volume+0x48a>
 8007510:	2000062c 	.word	0x2000062c
		fmt = FS_FAT32;
 8007514:	2303      	movs	r3, #3
 8007516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007520:	4293      	cmp	r3, r2
 8007522:	d802      	bhi.n	800752a <find_volume+0x2e2>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007530:	4293      	cmp	r3, r2
 8007532:	d802      	bhi.n	800753a <find_volume+0x2f2>
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	1c9a      	adds	r2, r3, #2
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007546:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007548:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800754a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754c:	441a      	add	r2, r3
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	441a      	add	r2, r3
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800755c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007560:	2b03      	cmp	r3, #3
 8007562:	d11e      	bne.n	80075a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	3334      	adds	r3, #52	; 0x34
 8007568:	332a      	adds	r3, #42	; 0x2a
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe f830 	bl	80055d0 <ld_word>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <find_volume+0x332>
 8007576:	230d      	movs	r3, #13
 8007578:	e0ab      	b.n	80076d2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	891b      	ldrh	r3, [r3, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <find_volume+0x33e>
 8007582:	230d      	movs	r3, #13
 8007584:	e0a5      	b.n	80076d2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	3334      	adds	r3, #52	; 0x34
 800758a:	332c      	adds	r3, #44	; 0x2c
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe f837 	bl	8005600 <ld_dword>
 8007592:	4602      	mov	r2, r0
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
 80075a0:	e01f      	b.n	80075e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	891b      	ldrh	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <find_volume+0x366>
 80075aa:	230d      	movs	r3, #13
 80075ac:	e091      	b.n	80076d2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b4:	441a      	add	r2, r3
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d103      	bne.n	80075ca <find_volume+0x382>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	e00a      	b.n	80075e0 <find_volume+0x398>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	4613      	mov	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	085a      	lsrs	r2, r3, #1
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80075e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	69da      	ldr	r2, [r3, #28]
 80075e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80075ec:	0a5b      	lsrs	r3, r3, #9
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d201      	bcs.n	80075f6 <find_volume+0x3ae>
 80075f2:	230d      	movs	r3, #13
 80075f4:	e06d      	b.n	80076d2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	f04f 32ff 	mov.w	r2, #4294967295
 80075fc:	615a      	str	r2, [r3, #20]
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	2280      	movs	r2, #128	; 0x80
 800760a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800760c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007610:	2b03      	cmp	r3, #3
 8007612:	d149      	bne.n	80076a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	3334      	adds	r3, #52	; 0x34
 8007618:	3330      	adds	r3, #48	; 0x30
 800761a:	4618      	mov	r0, r3
 800761c:	f7fd ffd8 	bl	80055d0 <ld_word>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d140      	bne.n	80076a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007628:	3301      	adds	r3, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800762e:	f7fe fa7f 	bl	8005b30 <move_window>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d137      	bne.n	80076a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	2200      	movs	r2, #0
 800763c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	3334      	adds	r3, #52	; 0x34
 8007642:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd ffc2 	bl	80055d0 <ld_word>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007654:	429a      	cmp	r2, r3
 8007656:	d127      	bne.n	80076a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	3334      	adds	r3, #52	; 0x34
 800765c:	4618      	mov	r0, r3
 800765e:	f7fd ffcf 	bl	8005600 <ld_dword>
 8007662:	4602      	mov	r2, r0
 8007664:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <find_volume+0x494>)
 8007666:	429a      	cmp	r2, r3
 8007668:	d11e      	bne.n	80076a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	3334      	adds	r3, #52	; 0x34
 800766e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fd ffc4 	bl	8005600 <ld_dword>
 8007678:	4602      	mov	r2, r0
 800767a:	4b19      	ldr	r3, [pc, #100]	; (80076e0 <find_volume+0x498>)
 800767c:	429a      	cmp	r2, r3
 800767e:	d113      	bne.n	80076a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	3334      	adds	r3, #52	; 0x34
 8007684:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007688:	4618      	mov	r0, r3
 800768a:	f7fd ffb9 	bl	8005600 <ld_dword>
 800768e:	4602      	mov	r2, r0
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	3334      	adds	r3, #52	; 0x34
 8007698:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800769c:	4618      	mov	r0, r3
 800769e:	f7fd ffaf 	bl	8005600 <ld_dword>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076b0:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <find_volume+0x49c>)
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <find_volume+0x49c>)
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <find_volume+0x49c>)
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	4a08      	ldr	r2, [pc, #32]	; (80076e8 <find_volume+0x4a0>)
 80076c8:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80076ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076cc:	f7fe f9c8 	bl	8005a60 <clear_lock>
#endif
	return FR_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3758      	adds	r7, #88	; 0x58
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	41615252 	.word	0x41615252
 80076e0:	61417272 	.word	0x61417272
 80076e4:	20000630 	.word	0x20000630
 80076e8:	20000654 	.word	0x20000654

080076ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80076f6:	2309      	movs	r3, #9
 80076f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01c      	beq.n	800773a <validate+0x4e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d018      	beq.n	800773a <validate+0x4e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d013      	beq.n	800773a <validate+0x4e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	889a      	ldrh	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	429a      	cmp	r2, r3
 800771e:	d10c      	bne.n	800773a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd feb4 	bl	8005494 <disk_status>
 800772c:	4603      	mov	r3, r0
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <validate+0x4e>
			res = FR_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <validate+0x5a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	e000      	b.n	8007748 <validate+0x5c>
 8007746:	2300      	movs	r3, #0
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	6013      	str	r3, [r2, #0]
	return res;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800776a:	f107 0310 	add.w	r3, r7, #16
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fccf 	bl	8007112 <get_ldnumber>
 8007774:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da01      	bge.n	8007780 <f_mount+0x28>
 800777c:	230b      	movs	r3, #11
 800777e:	e02b      	b.n	80077d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <f_mount+0x88>)
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007788:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007790:	69b8      	ldr	r0, [r7, #24]
 8007792:	f7fe f965 	bl	8005a60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	490d      	ldr	r1, [pc, #52]	; (80077e0 <f_mount+0x88>)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <f_mount+0x66>
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d001      	beq.n	80077c2 <f_mount+0x6a>
 80077be:	2300      	movs	r3, #0
 80077c0:	e00a      	b.n	80077d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80077c2:	f107 010c 	add.w	r1, r7, #12
 80077c6:	f107 0308 	add.w	r3, r7, #8
 80077ca:	2200      	movs	r2, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fd3b 	bl	8007248 <find_volume>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	2000062c 	.word	0x2000062c

080077e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b09a      	sub	sp, #104	; 0x68
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <f_open+0x18>
 80077f8:	2309      	movs	r3, #9
 80077fa:	e1ad      	b.n	8007b58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007802:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007804:	79fa      	ldrb	r2, [r7, #7]
 8007806:	f107 0114 	add.w	r1, r7, #20
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fd1a 	bl	8007248 <find_volume>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800781a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 8191 	bne.w	8007b46 <f_open+0x362>
		dj.obj.fs = fs;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	f107 0318 	add.w	r3, r7, #24
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fbfd 	bl	8007030 <follow_path>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800783c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11a      	bne.n	800787a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007848:	b25b      	sxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	da03      	bge.n	8007856 <f_open+0x72>
				res = FR_INVALID_NAME;
 800784e:	2306      	movs	r3, #6
 8007850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007854:	e011      	b.n	800787a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	f107 0318 	add.w	r3, r7, #24
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd ffae 	bl	80057d0 <chk_lock>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	f003 031c 	and.w	r3, r3, #28
 8007880:	2b00      	cmp	r3, #0
 8007882:	d07f      	beq.n	8007984 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800788c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007890:	2b04      	cmp	r3, #4
 8007892:	d10e      	bne.n	80078b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007894:	f7fd fff8 	bl	8005888 <enq_lock>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d006      	beq.n	80078ac <f_open+0xc8>
 800789e:	f107 0318 	add.w	r3, r7, #24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff f8ca 	bl	8006a3c <dir_register>
 80078a8:	4603      	mov	r3, r0
 80078aa:	e000      	b.n	80078ae <f_open+0xca>
 80078ac:	2312      	movs	r3, #18
 80078ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	f043 0308 	orr.w	r3, r3, #8
 80078b8:	71fb      	strb	r3, [r7, #7]
 80078ba:	e010      	b.n	80078de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078bc:	7fbb      	ldrb	r3, [r7, #30]
 80078be:	f003 0311 	and.w	r3, r3, #17
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <f_open+0xea>
					res = FR_DENIED;
 80078c6:	2307      	movs	r3, #7
 80078c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80078cc:	e007      	b.n	80078de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <f_open+0xfa>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80078de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d168      	bne.n	80079b8 <f_open+0x1d4>
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d063      	beq.n	80079b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80078f0:	f7fd fc49 	bl	8005186 <get_fattime>
 80078f4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	330e      	adds	r3, #14
 80078fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd febd 	bl	800567c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	3316      	adds	r3, #22
 8007906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007908:	4618      	mov	r0, r3
 800790a:	f7fd feb7 	bl	800567c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	330b      	adds	r3, #11
 8007912:	2220      	movs	r2, #32
 8007914:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fe06 	bl	800652e <ld_clust>
 8007922:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007928:	2200      	movs	r2, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fe1e 	bl	800656c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	331c      	adds	r3, #28
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f7fd fea0 	bl	800567c <st_dword>
					fs->wflag = 1;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2201      	movs	r2, #1
 8007940:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007944:	2b00      	cmp	r3, #0
 8007946:	d037      	beq.n	80079b8 <f_open+0x1d4>
						dw = fs->winsect;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800794e:	f107 0318 	add.w	r3, r7, #24
 8007952:	2200      	movs	r2, #0
 8007954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fb31 	bl	8005fbe <remove_chain>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007966:	2b00      	cmp	r3, #0
 8007968:	d126      	bne.n	80079b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe f8de 	bl	8005b30 <move_window>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800797e:	3a01      	subs	r2, #1
 8007980:	611a      	str	r2, [r3, #16]
 8007982:	e019      	b.n	80079b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007984:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007988:	2b00      	cmp	r3, #0
 800798a:	d115      	bne.n	80079b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800798c:	7fbb      	ldrb	r3, [r7, #30]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007996:	2304      	movs	r3, #4
 8007998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800799c:	e00c      	b.n	80079b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d007      	beq.n	80079b8 <f_open+0x1d4>
 80079a8:	7fbb      	ldrb	r3, [r7, #30]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <f_open+0x1d4>
						res = FR_DENIED;
 80079b2:	2307      	movs	r3, #7
 80079b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80079b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d128      	bne.n	8007a12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80079da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	f107 0318 	add.w	r3, r7, #24
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd ff67 	bl	80058cc <inc_lock>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <f_open+0x22e>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 8095 	bne.w	8007b46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fd83 	bl	800652e <ld_clust>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	331c      	adds	r3, #28
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd fde4 	bl	8005600 <ld_dword>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	88da      	ldrh	r2, [r3, #6]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	79fa      	ldrb	r2, [r7, #7]
 8007a56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3330      	adds	r3, #48	; 0x30
 8007a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fe4e 	bl	8005716 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d060      	beq.n	8007b46 <f_open+0x362>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05c      	beq.n	8007b46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	895b      	ldrh	r3, [r3, #10]
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa8:	e016      	b.n	8007ad8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe f8f9 	bl	8005ca6 <get_fat>
 8007ab4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d802      	bhi.n	8007ac2 <f_open+0x2de>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d102      	bne.n	8007ad0 <f_open+0x2ec>
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <f_open+0x304>
 8007ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d8e0      	bhi.n	8007aaa <f_open+0x2c6>
				}
				fp->clust = clst;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007aee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d127      	bne.n	8007b46 <f_open+0x362>
 8007af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d022      	beq.n	8007b46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe f8af 	bl	8005c68 <clust2sect>
 8007b0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <f_open+0x336>
						res = FR_INT_ERR;
 8007b12:	2302      	movs	r3, #2
 8007b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b18:	e015      	b.n	8007b46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1c:	0a5a      	lsrs	r2, r3, #9
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	7858      	ldrb	r0, [r3, #1]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	2301      	movs	r3, #1
 8007b36:	f7fd fced 	bl	8005514 <disk_read>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <f_open+0x362>
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <f_open+0x370>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3768      	adds	r7, #104	; 0x68
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08e      	sub	sp, #56	; 0x38
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f107 0214 	add.w	r2, r7, #20
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fdb3 	bl	80076ec <validate>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <f_read+0x44>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	7d5b      	ldrb	r3, [r3, #21]
 8007b98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <f_read+0x4a>
 8007ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ba8:	e115      	b.n	8007dd6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	7d1b      	ldrb	r3, [r3, #20]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <f_read+0x5a>
 8007bb6:	2307      	movs	r3, #7
 8007bb8:	e10d      	b.n	8007dd6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	f240 80fe 	bls.w	8007dcc <f_read+0x26c>
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007bd4:	e0fa      	b.n	8007dcc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 80c6 	bne.w	8007d70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	0a5b      	lsrs	r3, r3, #9
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	8952      	ldrh	r2, [r2, #10]
 8007bee:	3a01      	subs	r2, #1
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12f      	bne.n	8007c5a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	633b      	str	r3, [r7, #48]	; 0x30
 8007c08:	e013      	b.n	8007c32 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7fe facd 	bl	80061b8 <clmt_clust>
 8007c1e:	6338      	str	r0, [r7, #48]	; 0x30
 8007c20:	e007      	b.n	8007c32 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe f83b 	bl	8005ca6 <get_fat>
 8007c30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d804      	bhi.n	8007c42 <f_read+0xe2>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	755a      	strb	r2, [r3, #21]
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e0c9      	b.n	8007dd6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d104      	bne.n	8007c54 <f_read+0xf4>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	755a      	strb	r2, [r3, #21]
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0c0      	b.n	8007dd6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe f800 	bl	8005c68 <clust2sect>
 8007c68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d104      	bne.n	8007c7a <f_read+0x11a>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2202      	movs	r2, #2
 8007c74:	755a      	strb	r2, [r3, #21]
 8007c76:	2302      	movs	r3, #2
 8007c78:	e0ad      	b.n	8007dd6 <f_read+0x276>
			sect += csect;
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0a5b      	lsrs	r3, r3, #9
 8007c86:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d039      	beq.n	8007d02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	4413      	add	r3, r2
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	8952      	ldrh	r2, [r2, #10]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d905      	bls.n	8007ca8 <f_read+0x148>
					cc = fs->csize - csect;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	895b      	ldrh	r3, [r3, #10]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	7858      	ldrb	r0, [r3, #1]
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cb2:	f7fd fc2f 	bl	8005514 <disk_read>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <f_read+0x166>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	755a      	strb	r2, [r3, #21]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e087      	b.n	8007dd6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	7d1b      	ldrb	r3, [r3, #20]
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da14      	bge.n	8007cfa <f_read+0x19a>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1a      	ldr	r2, [r3, #32]
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d90d      	bls.n	8007cfa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1a      	ldr	r2, [r3, #32]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	025b      	lsls	r3, r3, #9
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	18d0      	adds	r0, r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3330      	adds	r3, #48	; 0x30
 8007cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f7fd fced 	bl	80056d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	025b      	lsls	r3, r3, #9
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007d00:	e050      	b.n	8007da4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d02e      	beq.n	8007d6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7d1b      	ldrb	r3, [r3, #20]
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da18      	bge.n	8007d48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	7858      	ldrb	r0, [r3, #1]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	2301      	movs	r3, #1
 8007d26:	f7fd fc15 	bl	8005554 <disk_write>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <f_read+0x1da>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	755a      	strb	r2, [r3, #21]
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04d      	b.n	8007dd6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	7d1b      	ldrb	r3, [r3, #20]
 8007d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	7858      	ldrb	r0, [r3, #1]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d52:	2301      	movs	r3, #1
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	f7fd fbdd 	bl	8005514 <disk_read>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <f_read+0x20a>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2201      	movs	r2, #1
 8007d64:	755a      	strb	r2, [r3, #21]
 8007d66:	2301      	movs	r3, #1
 8007d68:	e035      	b.n	8007dd6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d901      	bls.n	8007d8a <f_read+0x22a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d98:	4413      	add	r3, r2
 8007d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007da0:	f7fd fc98 	bl	80056d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	4413      	add	r3, r2
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	619a      	str	r2, [r3, #24]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	441a      	add	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f47f af01 	bne.w	8007bd6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3738      	adds	r7, #56	; 0x38
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f107 0208 	add.w	r2, r7, #8
 8007dec:	4611      	mov	r1, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff fc7c 	bl	80076ec <validate>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d168      	bne.n	8007ed0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7d1b      	ldrb	r3, [r3, #20]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d062      	beq.n	8007ed0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7d1b      	ldrb	r3, [r3, #20]
 8007e0e:	b25b      	sxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da15      	bge.n	8007e40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	7858      	ldrb	r0, [r3, #1]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	2301      	movs	r3, #1
 8007e24:	f7fd fb96 	bl	8005554 <disk_write>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <f_sync+0x54>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e04f      	b.n	8007ed2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7d1b      	ldrb	r3, [r3, #20]
 8007e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e40:	f7fd f9a1 	bl	8005186 <get_fattime>
 8007e44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fd fe6e 	bl	8005b30 <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d138      	bne.n	8007ed0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	330b      	adds	r3, #11
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	330b      	adds	r3, #11
 8007e6e:	f042 0220 	orr.w	r2, r2, #32
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	f7fe fb73 	bl	800656c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f103 021c 	add.w	r2, r3, #28
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fd fbf2 	bl	800567c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3316      	adds	r3, #22
 8007e9c:	6939      	ldr	r1, [r7, #16]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fd fbec 	bl	800567c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3312      	adds	r3, #18
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fd fbcb 	bl	8005646 <st_word>
					fs->wflag = 1;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fd fe67 	bl	8005b8c <sync_fs>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	7d1b      	ldrb	r3, [r3, #20]
 8007ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff ff7b 	bl	8007dde <f_sync>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d118      	bne.n	8007f24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f107 0208 	add.w	r2, r7, #8
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fbf6 	bl	80076ec <validate>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10c      	bne.n	8007f24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd fd6a 	bl	80059e8 <dec_lock>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b090      	sub	sp, #64	; 0x40
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fbd3 	bl	80076ec <validate>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <f_lseek+0x2e>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	7d5b      	ldrb	r3, [r3, #21]
 8007f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <f_lseek+0x3c>
 8007f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f68:	e1e6      	b.n	8008338 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80d1 	beq.w	8008116 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7a:	d15a      	bne.n	8008032 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	627a      	str	r2, [r7, #36]	; 0x24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d03a      	beq.n	8008012 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fe74 	bl	8005ca6 <get_fat>
 8007fbe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d804      	bhi.n	8007fd0 <f_lseek+0xa2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	755a      	strb	r2, [r3, #21]
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e1b3      	b.n	8008338 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d104      	bne.n	8007fe2 <f_lseek+0xb4>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	755a      	strb	r2, [r3, #21]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e1aa      	b.n	8008338 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d0de      	beq.n	8007faa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d809      	bhi.n	8008008 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	1d1a      	adds	r2, r3, #4
 8007ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8007ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	627a      	str	r2, [r7, #36]	; 0x24
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800e:	429a      	cmp	r2, r3
 8008010:	d3c4      	bcc.n	8007f9c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008018:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	429a      	cmp	r2, r3
 8008020:	d803      	bhi.n	800802a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	e184      	b.n	8008334 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800802a:	2311      	movs	r3, #17
 800802c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008030:	e180      	b.n	8008334 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d902      	bls.n	8008042 <f_lseek+0x114>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8172 	beq.w	8008334 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	3b01      	subs	r3, #1
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7fe f8ae 	bl	80061b8 <clmt_clust>
 800805c:	4602      	mov	r2, r0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fd fdfc 	bl	8005c68 <clust2sect>
 8008070:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <f_lseek+0x154>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	755a      	strb	r2, [r3, #21]
 800807e:	2302      	movs	r3, #2
 8008080:	e15a      	b.n	8008338 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	3b01      	subs	r3, #1
 8008086:	0a5b      	lsrs	r3, r3, #9
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	8952      	ldrh	r2, [r2, #10]
 800808c:	3a01      	subs	r2, #1
 800808e:	4013      	ands	r3, r2
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	4413      	add	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 8148 	beq.w	8008334 <f_lseek+0x406>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	f000 8142 	beq.w	8008334 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	b25b      	sxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da18      	bge.n	80080ec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	7858      	ldrb	r0, [r3, #1]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	2301      	movs	r3, #1
 80080ca:	f7fd fa43 	bl	8005554 <disk_write>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <f_lseek+0x1b0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	755a      	strb	r2, [r3, #21]
 80080da:	2301      	movs	r3, #1
 80080dc:	e12c      	b.n	8008338 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7d1b      	ldrb	r3, [r3, #20]
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	7858      	ldrb	r0, [r3, #1]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080f6:	2301      	movs	r3, #1
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	f7fd fa0b 	bl	8005514 <disk_read>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <f_lseek+0x1e0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	755a      	strb	r2, [r3, #21]
 800810a:	2301      	movs	r3, #1
 800810c:	e114      	b.n	8008338 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	621a      	str	r2, [r3, #32]
 8008114:	e10e      	b.n	8008334 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d908      	bls.n	8008132 <f_lseek+0x204>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7d1b      	ldrb	r3, [r3, #20]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008140:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80a7 	beq.w	8008298 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	895b      	ldrh	r3, [r3, #10]
 800814e:	025b      	lsls	r3, r3, #9
 8008150:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01b      	beq.n	8008190 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	1e59      	subs	r1, r3, #1
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800816c:	429a      	cmp	r2, r3
 800816e:	d30f      	bcc.n	8008190 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	425b      	negs	r3, r3
 8008178:	401a      	ands	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38
 800818e:	e022      	b.n	80081d6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d119      	bne.n	80081d0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fd ff71 	bl	8006088 <create_chain>
 80081a6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d104      	bne.n	80081b8 <f_lseek+0x28a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2202      	movs	r2, #2
 80081b2:	755a      	strb	r2, [r3, #21]
 80081b4:	2302      	movs	r3, #2
 80081b6:	e0bf      	b.n	8008338 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d104      	bne.n	80081ca <f_lseek+0x29c>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	755a      	strb	r2, [r3, #21]
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0b6      	b.n	8008338 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081d4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d05d      	beq.n	8008298 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80081dc:	e03a      	b.n	8008254 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7d1b      	ldrb	r3, [r3, #20]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008202:	4618      	mov	r0, r3
 8008204:	f7fd ff40 	bl	8006088 <create_chain>
 8008208:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <f_lseek+0x2f4>
							ofs = 0; break;
 8008210:	2300      	movs	r3, #0
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	e022      	b.n	800825c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800821a:	4618      	mov	r0, r3
 800821c:	f7fd fd43 	bl	8005ca6 <get_fat>
 8008220:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008228:	d104      	bne.n	8008234 <f_lseek+0x306>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	755a      	strb	r2, [r3, #21]
 8008230:	2301      	movs	r3, #1
 8008232:	e081      	b.n	8008338 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	2b01      	cmp	r3, #1
 8008238:	d904      	bls.n	8008244 <f_lseek+0x316>
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008240:	429a      	cmp	r2, r3
 8008242:	d304      	bcc.n	800824e <f_lseek+0x320>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	755a      	strb	r2, [r3, #21]
 800824a:	2302      	movs	r3, #2
 800824c:	e074      	b.n	8008338 <f_lseek+0x40a>
					fp->clust = clst;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008252:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	429a      	cmp	r2, r3
 800825a:	d8c0      	bhi.n	80081de <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	441a      	add	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826e:	2b00      	cmp	r3, #0
 8008270:	d012      	beq.n	8008298 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd fcf6 	bl	8005c68 <clust2sect>
 800827c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <f_lseek+0x360>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	755a      	strb	r2, [r3, #21]
 800828a:	2302      	movs	r3, #2
 800828c:	e054      	b.n	8008338 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	0a5b      	lsrs	r3, r3, #9
 8008292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008294:	4413      	add	r3, r2
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d90a      	bls.n	80082ba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	7d1b      	ldrb	r3, [r3, #20]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d036      	beq.n	8008334 <f_lseek+0x406>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d031      	beq.n	8008334 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7d1b      	ldrb	r3, [r3, #20]
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da18      	bge.n	800830c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	7858      	ldrb	r0, [r3, #1]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1a      	ldr	r2, [r3, #32]
 80082e8:	2301      	movs	r3, #1
 80082ea:	f7fd f933 	bl	8005554 <disk_write>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <f_lseek+0x3d0>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	755a      	strb	r2, [r3, #21]
 80082fa:	2301      	movs	r3, #1
 80082fc:	e01c      	b.n	8008338 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7d1b      	ldrb	r3, [r3, #20]
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	b2da      	uxtb	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	7858      	ldrb	r0, [r3, #1]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008316:	2301      	movs	r3, #1
 8008318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831a:	f7fd f8fb 	bl	8005514 <disk_read>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <f_lseek+0x400>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	755a      	strb	r2, [r3, #21]
 800832a:	2301      	movs	r3, #1
 800832c:	e004      	b.n	8008338 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008332:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008334:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008338:	4618      	mov	r0, r3
 800833a:	3740      	adds	r7, #64	; 0x40
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8008340:	b590      	push	{r4, r7, lr}
 8008342:	b0a7      	sub	sp, #156	; 0x9c
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800834a:	463b      	mov	r3, r7
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fee0 	bl	8007112 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8008352:	f107 0120 	add.w	r1, r7, #32
 8008356:	1d3b      	adds	r3, r7, #4
 8008358:	2202      	movs	r2, #2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe ff74 	bl	8007248 <find_volume>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8008366:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 80db 	bne.w	8008526 <f_rename+0x1e6>
		djo.obj.fs = fs;
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	65bb      	str	r3, [r7, #88]	; 0x58
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fe57 	bl	8007030 <follow_path>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8008388:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <f_rename+0x62>
 8008390:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008394:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <f_rename+0x62>
 800839c:	2306      	movs	r3, #6
 800839e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if _FS_LOCK != 0
		if (res == FR_OK) {
 80083a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 80083aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd fa0d 	bl	80057d0 <chk_lock>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 80083bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 80b0 	bne.w	8008526 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 80083c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c8:	f103 010b 	add.w	r1, r3, #11
 80083cc:	f107 0308 	add.w	r3, r7, #8
 80083d0:	2215      	movs	r2, #21
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd f97e 	bl	80056d4 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 80083d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80083dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e0:	2234      	movs	r2, #52	; 0x34
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd f976 	bl	80056d4 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fe1d 	bl	8007030 <follow_path>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 80083fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10c      	bne.n	800841e <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8008404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008408:	429a      	cmp	r2, r3
 800840a:	d105      	bne.n	8008418 <f_rename+0xd8>
 800840c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800840e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008410:	429a      	cmp	r2, r3
 8008412:	d101      	bne.n	8008418 <f_rename+0xd8>
 8008414:	2304      	movs	r3, #4
 8008416:	e000      	b.n	800841a <f_rename+0xda>
 8008418:	2308      	movs	r3, #8
 800841a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800841e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008422:	2b04      	cmp	r3, #4
 8008424:	d168      	bne.n	80084f8 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8008426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fb06 	bl	8006a3c <dir_register>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK) {
 8008436:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800843a:	2b00      	cmp	r3, #0
 800843c:	d15c      	bne.n	80084f8 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						mem_cpy(dir + 13, buf + 2, 19);
 8008444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008448:	f103 000d 	add.w	r0, r3, #13
 800844c:	f107 0308 	add.w	r3, r7, #8
 8008450:	3302      	adds	r3, #2
 8008452:	2213      	movs	r2, #19
 8008454:	4619      	mov	r1, r3
 8008456:	f7fd f93d 	bl	80056d4 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800845a:	7a3a      	ldrb	r2, [r7, #8]
 800845c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008460:	330b      	adds	r3, #11
 8008462:	f042 0220 	orr.w	r2, r2, #32
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	2201      	movs	r2, #1
 800846e:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8008470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008474:	330b      	adds	r3, #11
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d03b      	beq.n	80084f8 <f_rename+0x1b8>
 8008480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d037      	beq.n	80084f8 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8008488:	6a3c      	ldr	r4, [r7, #32]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe f84c 	bl	800652e <ld_clust>
 8008496:	4603      	mov	r3, r0
 8008498:	4619      	mov	r1, r3
 800849a:	4620      	mov	r0, r4
 800849c:	f7fd fbe4 	bl	8005c68 <clust2sect>
 80084a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
							if (!dw) {
 80084a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <f_rename+0x174>
								res = FR_INT_ERR;
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80084b2:	e021      	b.n	80084f8 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd fb38 	bl	8005b30 <move_window>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	3334      	adds	r3, #52	; 0x34
 80084ca:	3320      	adds	r3, #32
 80084cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
								if (res == FR_OK && dir[1] == '.') {
 80084d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10f      	bne.n	80084f8 <f_rename+0x1b8>
 80084d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084dc:	3301      	adds	r3, #1
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b2e      	cmp	r3, #46	; 0x2e
 80084e2:	d109      	bne.n	80084f8 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe f83d 	bl	800656c <st_clust>
									fs->wflag = 1;
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	2201      	movs	r2, #1
 80084f6:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 80084f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d112      	bne.n	8008526 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8008500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fb91 	bl	8006c2c <dir_remove>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				if (res == FR_OK) {
 8008510:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <f_rename+0x1e6>
					res = sync_fs(fs);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fd fb36 	bl	8005b8c <sync_fs>
 8008520:	4603      	mov	r3, r0
 8008522:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008526:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800852a:	4618      	mov	r0, r3
 800852c:	379c      	adds	r7, #156	; 0x9c
 800852e:	46bd      	mov	sp, r7
 8008530:	bd90      	pop	{r4, r7, pc}
	...

08008534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800854a:	4b1f      	ldr	r3, [pc, #124]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 800854c:	7a5b      	ldrb	r3, [r3, #9]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d131      	bne.n	80085b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008554:	4b1c      	ldr	r3, [pc, #112]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008556:	7a5b      	ldrb	r3, [r3, #9]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 800855e:	2100      	movs	r1, #0
 8008560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008562:	4b19      	ldr	r3, [pc, #100]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008564:	7a5b      	ldrb	r3, [r3, #9]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008574:	7a5b      	ldrb	r3, [r3, #9]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 800857c:	4413      	add	r3, r2
 800857e:	79fa      	ldrb	r2, [r7, #7]
 8008580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008582:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008584:	7a5b      	ldrb	r3, [r3, #9]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	b2d1      	uxtb	r1, r2
 800858c:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <FATFS_LinkDriverEx+0x94>)
 800858e:	7251      	strb	r1, [r2, #9]
 8008590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	3330      	adds	r3, #48	; 0x30
 8008596:	b2da      	uxtb	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3301      	adds	r3, #1
 80085a0:	223a      	movs	r2, #58	; 0x3a
 80085a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3302      	adds	r3, #2
 80085a8:	222f      	movs	r2, #47	; 0x2f
 80085aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3303      	adds	r3, #3
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000854 	.word	0x20000854

080085cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ffaa 	bl	8008534 <FATFS_LinkDriverEx>
 80085e0:	4603      	mov	r3, r0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	2b7f      	cmp	r3, #127	; 0x7f
 80085fc:	d802      	bhi.n	8008604 <ff_convert+0x18>
		c = chr;
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	81fb      	strh	r3, [r7, #14]
 8008602:	e025      	b.n	8008650 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	2bff      	cmp	r3, #255	; 0xff
 800860e:	d805      	bhi.n	800861c <ff_convert+0x30>
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	3b80      	subs	r3, #128	; 0x80
 8008614:	4a12      	ldr	r2, [pc, #72]	; (8008660 <ff_convert+0x74>)
 8008616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800861a:	e000      	b.n	800861e <ff_convert+0x32>
 800861c:	2300      	movs	r3, #0
 800861e:	81fb      	strh	r3, [r7, #14]
 8008620:	e016      	b.n	8008650 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008622:	2300      	movs	r3, #0
 8008624:	81fb      	strh	r3, [r7, #14]
 8008626:	e009      	b.n	800863c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	4a0d      	ldr	r2, [pc, #52]	; (8008660 <ff_convert+0x74>)
 800862c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	429a      	cmp	r2, r3
 8008634:	d006      	beq.n	8008644 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008636:	89fb      	ldrh	r3, [r7, #14]
 8008638:	3301      	adds	r3, #1
 800863a:	81fb      	strh	r3, [r7, #14]
 800863c:	89fb      	ldrh	r3, [r7, #14]
 800863e:	2b7f      	cmp	r3, #127	; 0x7f
 8008640:	d9f2      	bls.n	8008628 <ff_convert+0x3c>
 8008642:	e000      	b.n	8008646 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008644:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008646:	89fb      	ldrh	r3, [r7, #14]
 8008648:	3380      	adds	r3, #128	; 0x80
 800864a:	b29b      	uxth	r3, r3
 800864c:	b2db      	uxtb	r3, r3
 800864e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008650:	89fb      	ldrh	r3, [r7, #14]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	0800b4b4 	.word	0x0800b4b4

08008664 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008674:	d201      	bcs.n	800867a <ff_wtoupper+0x16>
 8008676:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <ff_wtoupper+0x10c>)
 8008678:	e000      	b.n	800867c <ff_wtoupper+0x18>
 800867a:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <ff_wtoupper+0x110>)
 800867c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	1c9a      	adds	r2, r3, #2
 8008682:	617a      	str	r2, [r7, #20]
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008688:	8a7b      	ldrh	r3, [r7, #18]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d068      	beq.n	8008760 <ff_wtoupper+0xfc>
 800868e:	88fa      	ldrh	r2, [r7, #6]
 8008690:	8a7b      	ldrh	r3, [r7, #18]
 8008692:	429a      	cmp	r2, r3
 8008694:	d364      	bcc.n	8008760 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	1c9a      	adds	r2, r3, #2
 800869a:	617a      	str	r2, [r7, #20]
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	823b      	strh	r3, [r7, #16]
 80086a0:	8a3b      	ldrh	r3, [r7, #16]
 80086a2:	0a1b      	lsrs	r3, r3, #8
 80086a4:	81fb      	strh	r3, [r7, #14]
 80086a6:	8a3b      	ldrh	r3, [r7, #16]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80086ac:	88fa      	ldrh	r2, [r7, #6]
 80086ae:	8a79      	ldrh	r1, [r7, #18]
 80086b0:	8a3b      	ldrh	r3, [r7, #16]
 80086b2:	440b      	add	r3, r1
 80086b4:	429a      	cmp	r2, r3
 80086b6:	da49      	bge.n	800874c <ff_wtoupper+0xe8>
			switch (cmd) {
 80086b8:	89fb      	ldrh	r3, [r7, #14]
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d84f      	bhi.n	800875e <ff_wtoupper+0xfa>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <ff_wtoupper+0x60>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	08008711 	.word	0x08008711
 80086d0:	08008719 	.word	0x08008719
 80086d4:	08008721 	.word	0x08008721
 80086d8:	08008729 	.word	0x08008729
 80086dc:	08008731 	.word	0x08008731
 80086e0:	08008739 	.word	0x08008739
 80086e4:	08008741 	.word	0x08008741
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	8a7b      	ldrh	r3, [r7, #18]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	80fb      	strh	r3, [r7, #6]
 80086f8:	e027      	b.n	800874a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	8a7b      	ldrh	r3, [r7, #18]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	b29b      	uxth	r3, r3
 8008708:	88fa      	ldrh	r2, [r7, #6]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	80fb      	strh	r3, [r7, #6]
 800870e:	e01c      	b.n	800874a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	3b10      	subs	r3, #16
 8008714:	80fb      	strh	r3, [r7, #6]
 8008716:	e018      	b.n	800874a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	3b20      	subs	r3, #32
 800871c:	80fb      	strh	r3, [r7, #6]
 800871e:	e014      	b.n	800874a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	3b30      	subs	r3, #48	; 0x30
 8008724:	80fb      	strh	r3, [r7, #6]
 8008726:	e010      	b.n	800874a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	3b1a      	subs	r3, #26
 800872c:	80fb      	strh	r3, [r7, #6]
 800872e:	e00c      	b.n	800874a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	3308      	adds	r3, #8
 8008734:	80fb      	strh	r3, [r7, #6]
 8008736:	e008      	b.n	800874a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	3b50      	subs	r3, #80	; 0x50
 800873c:	80fb      	strh	r3, [r7, #6]
 800873e:	e004      	b.n	800874a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008746:	80fb      	strh	r3, [r7, #6]
 8008748:	bf00      	nop
			}
			break;
 800874a:	e008      	b.n	800875e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800874c:	89fb      	ldrh	r3, [r7, #14]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d195      	bne.n	800867e <ff_wtoupper+0x1a>
 8008752:	8a3b      	ldrh	r3, [r7, #16]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800875c:	e78f      	b.n	800867e <ff_wtoupper+0x1a>
			break;
 800875e:	bf00      	nop
	}

	return chr;
 8008760:	88fb      	ldrh	r3, [r7, #6]
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	0800b5b4 	.word	0x0800b5b4
 8008774:	0800b7a8 	.word	0x0800b7a8

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000010 	.word	0x20000010

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4e0d      	ldr	r6, [pc, #52]	; (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	; (80087c0 <__libc_init_array+0x3c>)
 800878a:	1ba4      	subs	r4, r4, r6
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2500      	movs	r5, #0
 8008790:	42a5      	cmp	r5, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4e0b      	ldr	r6, [pc, #44]	; (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	; (80087c8 <__libc_init_array+0x44>)
 8008798:	f002 fbac 	bl	800aef4 <_init>
 800879c:	1ba4      	subs	r4, r4, r6
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2500      	movs	r5, #0
 80087a2:	42a5      	cmp	r5, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087ac:	4798      	blx	r3
 80087ae:	3501      	adds	r5, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087b6:	4798      	blx	r3
 80087b8:	3501      	adds	r5, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	0800bb30 	.word	0x0800bb30
 80087c0:	0800bb30 	.word	0x0800bb30
 80087c4:	0800bb30 	.word	0x0800bb30
 80087c8:	0800bb34 	.word	0x0800bb34

080087cc <memset>:
 80087cc:	4402      	add	r2, r0
 80087ce:	4603      	mov	r3, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <__cvt>:
 80087dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	ec55 4b10 	vmov	r4, r5, d0
 80087e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	460e      	mov	r6, r1
 80087ee:	4691      	mov	r9, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	bfb8      	it	lt
 80087f4:	4622      	movlt	r2, r4
 80087f6:	462b      	mov	r3, r5
 80087f8:	f027 0720 	bic.w	r7, r7, #32
 80087fc:	bfbb      	ittet	lt
 80087fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008802:	461d      	movlt	r5, r3
 8008804:	2300      	movge	r3, #0
 8008806:	232d      	movlt	r3, #45	; 0x2d
 8008808:	bfb8      	it	lt
 800880a:	4614      	movlt	r4, r2
 800880c:	2f46      	cmp	r7, #70	; 0x46
 800880e:	700b      	strb	r3, [r1, #0]
 8008810:	d004      	beq.n	800881c <__cvt+0x40>
 8008812:	2f45      	cmp	r7, #69	; 0x45
 8008814:	d100      	bne.n	8008818 <__cvt+0x3c>
 8008816:	3601      	adds	r6, #1
 8008818:	2102      	movs	r1, #2
 800881a:	e000      	b.n	800881e <__cvt+0x42>
 800881c:	2103      	movs	r1, #3
 800881e:	ab03      	add	r3, sp, #12
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	ab02      	add	r3, sp, #8
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4632      	mov	r2, r6
 8008828:	4653      	mov	r3, sl
 800882a:	ec45 4b10 	vmov	d0, r4, r5
 800882e:	f000 fdfb 	bl	8009428 <_dtoa_r>
 8008832:	2f47      	cmp	r7, #71	; 0x47
 8008834:	4680      	mov	r8, r0
 8008836:	d102      	bne.n	800883e <__cvt+0x62>
 8008838:	f019 0f01 	tst.w	r9, #1
 800883c:	d026      	beq.n	800888c <__cvt+0xb0>
 800883e:	2f46      	cmp	r7, #70	; 0x46
 8008840:	eb08 0906 	add.w	r9, r8, r6
 8008844:	d111      	bne.n	800886a <__cvt+0x8e>
 8008846:	f898 3000 	ldrb.w	r3, [r8]
 800884a:	2b30      	cmp	r3, #48	; 0x30
 800884c:	d10a      	bne.n	8008864 <__cvt+0x88>
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f8 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800885a:	b918      	cbnz	r0, 8008864 <__cvt+0x88>
 800885c:	f1c6 0601 	rsb	r6, r6, #1
 8008860:	f8ca 6000 	str.w	r6, [sl]
 8008864:	f8da 3000 	ldr.w	r3, [sl]
 8008868:	4499      	add	r9, r3
 800886a:	2200      	movs	r2, #0
 800886c:	2300      	movs	r3, #0
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f8 f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8008876:	b938      	cbnz	r0, 8008888 <__cvt+0xac>
 8008878:	2230      	movs	r2, #48	; 0x30
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	454b      	cmp	r3, r9
 800887e:	d205      	bcs.n	800888c <__cvt+0xb0>
 8008880:	1c59      	adds	r1, r3, #1
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e7f8      	b.n	800887a <__cvt+0x9e>
 8008888:	f8cd 900c 	str.w	r9, [sp, #12]
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008890:	eba3 0308 	sub.w	r3, r3, r8
 8008894:	4640      	mov	r0, r8
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	b004      	add	sp, #16
 800889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800889e <__exponent>:
 800889e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088a0:	2900      	cmp	r1, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	bfba      	itte	lt
 80088a6:	4249      	neglt	r1, r1
 80088a8:	232d      	movlt	r3, #45	; 0x2d
 80088aa:	232b      	movge	r3, #43	; 0x2b
 80088ac:	2909      	cmp	r1, #9
 80088ae:	f804 2b02 	strb.w	r2, [r4], #2
 80088b2:	7043      	strb	r3, [r0, #1]
 80088b4:	dd20      	ble.n	80088f8 <__exponent+0x5a>
 80088b6:	f10d 0307 	add.w	r3, sp, #7
 80088ba:	461f      	mov	r7, r3
 80088bc:	260a      	movs	r6, #10
 80088be:	fb91 f5f6 	sdiv	r5, r1, r6
 80088c2:	fb06 1115 	mls	r1, r6, r5, r1
 80088c6:	3130      	adds	r1, #48	; 0x30
 80088c8:	2d09      	cmp	r5, #9
 80088ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80088d2:	4629      	mov	r1, r5
 80088d4:	dc09      	bgt.n	80088ea <__exponent+0x4c>
 80088d6:	3130      	adds	r1, #48	; 0x30
 80088d8:	3b02      	subs	r3, #2
 80088da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088de:	42bb      	cmp	r3, r7
 80088e0:	4622      	mov	r2, r4
 80088e2:	d304      	bcc.n	80088ee <__exponent+0x50>
 80088e4:	1a10      	subs	r0, r2, r0
 80088e6:	b003      	add	sp, #12
 80088e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ea:	4613      	mov	r3, r2
 80088ec:	e7e7      	b.n	80088be <__exponent+0x20>
 80088ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f2:	f804 2b01 	strb.w	r2, [r4], #1
 80088f6:	e7f2      	b.n	80088de <__exponent+0x40>
 80088f8:	2330      	movs	r3, #48	; 0x30
 80088fa:	4419      	add	r1, r3
 80088fc:	7083      	strb	r3, [r0, #2]
 80088fe:	1d02      	adds	r2, r0, #4
 8008900:	70c1      	strb	r1, [r0, #3]
 8008902:	e7ef      	b.n	80088e4 <__exponent+0x46>

08008904 <_printf_float>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	b08d      	sub	sp, #52	; 0x34
 800890a:	460c      	mov	r4, r1
 800890c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008910:	4616      	mov	r6, r2
 8008912:	461f      	mov	r7, r3
 8008914:	4605      	mov	r5, r0
 8008916:	f001 fcb9 	bl	800a28c <_localeconv_r>
 800891a:	6803      	ldr	r3, [r0, #0]
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	4618      	mov	r0, r3
 8008920:	f7f7 fc56 	bl	80001d0 <strlen>
 8008924:	2300      	movs	r3, #0
 8008926:	930a      	str	r3, [sp, #40]	; 0x28
 8008928:	f8d8 3000 	ldr.w	r3, [r8]
 800892c:	9005      	str	r0, [sp, #20]
 800892e:	3307      	adds	r3, #7
 8008930:	f023 0307 	bic.w	r3, r3, #7
 8008934:	f103 0208 	add.w	r2, r3, #8
 8008938:	f894 a018 	ldrb.w	sl, [r4, #24]
 800893c:	f8d4 b000 	ldr.w	fp, [r4]
 8008940:	f8c8 2000 	str.w	r2, [r8]
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800894c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008950:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008954:	9307      	str	r3, [sp, #28]
 8008956:	f8cd 8018 	str.w	r8, [sp, #24]
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	4ba7      	ldr	r3, [pc, #668]	; (8008bfc <_printf_float+0x2f8>)
 8008960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008964:	f7f8 f8e2 	bl	8000b2c <__aeabi_dcmpun>
 8008968:	bb70      	cbnz	r0, 80089c8 <_printf_float+0xc4>
 800896a:	f04f 32ff 	mov.w	r2, #4294967295
 800896e:	4ba3      	ldr	r3, [pc, #652]	; (8008bfc <_printf_float+0x2f8>)
 8008970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008974:	f7f8 f8bc 	bl	8000af0 <__aeabi_dcmple>
 8008978:	bb30      	cbnz	r0, 80089c8 <_printf_float+0xc4>
 800897a:	2200      	movs	r2, #0
 800897c:	2300      	movs	r3, #0
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f8 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8008986:	b110      	cbz	r0, 800898e <_printf_float+0x8a>
 8008988:	232d      	movs	r3, #45	; 0x2d
 800898a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898e:	4a9c      	ldr	r2, [pc, #624]	; (8008c00 <_printf_float+0x2fc>)
 8008990:	4b9c      	ldr	r3, [pc, #624]	; (8008c04 <_printf_float+0x300>)
 8008992:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008996:	bf8c      	ite	hi
 8008998:	4690      	movhi	r8, r2
 800899a:	4698      	movls	r8, r3
 800899c:	2303      	movs	r3, #3
 800899e:	f02b 0204 	bic.w	r2, fp, #4
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	f04f 0900 	mov.w	r9, #0
 80089aa:	9700      	str	r7, [sp, #0]
 80089ac:	4633      	mov	r3, r6
 80089ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f9e6 	bl	8008d84 <_printf_common>
 80089b8:	3001      	adds	r0, #1
 80089ba:	f040 808d 	bne.w	8008ad8 <_printf_float+0x1d4>
 80089be:	f04f 30ff 	mov.w	r0, #4294967295
 80089c2:	b00d      	add	sp, #52	; 0x34
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	f7f8 f8ac 	bl	8000b2c <__aeabi_dcmpun>
 80089d4:	b110      	cbz	r0, 80089dc <_printf_float+0xd8>
 80089d6:	4a8c      	ldr	r2, [pc, #560]	; (8008c08 <_printf_float+0x304>)
 80089d8:	4b8c      	ldr	r3, [pc, #560]	; (8008c0c <_printf_float+0x308>)
 80089da:	e7da      	b.n	8008992 <_printf_float+0x8e>
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	1c4b      	adds	r3, r1, #1
 80089e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80089e4:	a80a      	add	r0, sp, #40	; 0x28
 80089e6:	d13e      	bne.n	8008a66 <_printf_float+0x162>
 80089e8:	2306      	movs	r3, #6
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	2300      	movs	r3, #0
 80089ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089f2:	ab09      	add	r3, sp, #36	; 0x24
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	ec49 8b10 	vmov	d0, r8, r9
 80089fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	f8cd a004 	str.w	sl, [sp, #4]
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	4628      	mov	r0, r5
 8008a08:	f7ff fee8 	bl	80087dc <__cvt>
 8008a0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008a10:	2b47      	cmp	r3, #71	; 0x47
 8008a12:	4680      	mov	r8, r0
 8008a14:	d109      	bne.n	8008a2a <_printf_float+0x126>
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	1cd8      	adds	r0, r3, #3
 8008a1a:	db02      	blt.n	8008a22 <_printf_float+0x11e>
 8008a1c:	6862      	ldr	r2, [r4, #4]
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	dd47      	ble.n	8008ab2 <_printf_float+0x1ae>
 8008a22:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a26:	fa5f fa8a 	uxtb.w	sl, sl
 8008a2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a30:	d824      	bhi.n	8008a7c <_printf_float+0x178>
 8008a32:	3901      	subs	r1, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a3a:	9109      	str	r1, [sp, #36]	; 0x24
 8008a3c:	f7ff ff2f 	bl	800889e <__exponent>
 8008a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a42:	1813      	adds	r3, r2, r0
 8008a44:	2a01      	cmp	r2, #1
 8008a46:	4681      	mov	r9, r0
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	dc02      	bgt.n	8008a52 <_printf_float+0x14e>
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	07d1      	lsls	r1, r2, #31
 8008a50:	d501      	bpl.n	8008a56 <_printf_float+0x152>
 8008a52:	3301      	adds	r3, #1
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0a5      	beq.n	80089aa <_printf_float+0xa6>
 8008a5e:	232d      	movs	r3, #45	; 0x2d
 8008a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a64:	e7a1      	b.n	80089aa <_printf_float+0xa6>
 8008a66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008a6a:	f000 8177 	beq.w	8008d5c <_printf_float+0x458>
 8008a6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a72:	d1bb      	bne.n	80089ec <_printf_float+0xe8>
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d1b9      	bne.n	80089ec <_printf_float+0xe8>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e7b6      	b.n	80089ea <_printf_float+0xe6>
 8008a7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008a80:	d119      	bne.n	8008ab6 <_printf_float+0x1b2>
 8008a82:	2900      	cmp	r1, #0
 8008a84:	6863      	ldr	r3, [r4, #4]
 8008a86:	dd0c      	ble.n	8008aa2 <_printf_float+0x19e>
 8008a88:	6121      	str	r1, [r4, #16]
 8008a8a:	b913      	cbnz	r3, 8008a92 <_printf_float+0x18e>
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	07d2      	lsls	r2, r2, #31
 8008a90:	d502      	bpl.n	8008a98 <_printf_float+0x194>
 8008a92:	3301      	adds	r3, #1
 8008a94:	440b      	add	r3, r1
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a9c:	f04f 0900 	mov.w	r9, #0
 8008aa0:	e7d9      	b.n	8008a56 <_printf_float+0x152>
 8008aa2:	b913      	cbnz	r3, 8008aaa <_printf_float+0x1a6>
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	07d0      	lsls	r0, r2, #31
 8008aa8:	d501      	bpl.n	8008aae <_printf_float+0x1aa>
 8008aaa:	3302      	adds	r3, #2
 8008aac:	e7f3      	b.n	8008a96 <_printf_float+0x192>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7f1      	b.n	8008a96 <_printf_float+0x192>
 8008ab2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008ab6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008aba:	4293      	cmp	r3, r2
 8008abc:	db05      	blt.n	8008aca <_printf_float+0x1c6>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	07d1      	lsls	r1, r2, #31
 8008ac4:	d5e8      	bpl.n	8008a98 <_printf_float+0x194>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	e7e5      	b.n	8008a96 <_printf_float+0x192>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfd4      	ite	le
 8008ace:	f1c3 0302 	rsble	r3, r3, #2
 8008ad2:	2301      	movgt	r3, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	e7de      	b.n	8008a96 <_printf_float+0x192>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	055a      	lsls	r2, r3, #21
 8008adc:	d407      	bmi.n	8008aee <_printf_float+0x1ea>
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d12b      	bne.n	8008b44 <_printf_float+0x240>
 8008aec:	e767      	b.n	80089be <_printf_float+0xba>
 8008aee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008af2:	f240 80dc 	bls.w	8008cae <_printf_float+0x3aa>
 8008af6:	2200      	movs	r2, #0
 8008af8:	2300      	movs	r3, #0
 8008afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008afe:	f7f7 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d033      	beq.n	8008b6e <_printf_float+0x26a>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4a41      	ldr	r2, [pc, #260]	; (8008c10 <_printf_float+0x30c>)
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f af54 	beq.w	80089be <_printf_float+0xba>
 8008b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	db02      	blt.n	8008b24 <_printf_float+0x220>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	07d8      	lsls	r0, r3, #31
 8008b22:	d50f      	bpl.n	8008b44 <_printf_float+0x240>
 8008b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f af45 	beq.w	80089be <_printf_float+0xba>
 8008b34:	f04f 0800 	mov.w	r8, #0
 8008b38:	f104 091a 	add.w	r9, r4, #26
 8008b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	4543      	cmp	r3, r8
 8008b42:	dc09      	bgt.n	8008b58 <_printf_float+0x254>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	079b      	lsls	r3, r3, #30
 8008b48:	f100 8103 	bmi.w	8008d52 <_printf_float+0x44e>
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b50:	4298      	cmp	r0, r3
 8008b52:	bfb8      	it	lt
 8008b54:	4618      	movlt	r0, r3
 8008b56:	e734      	b.n	80089c2 <_printf_float+0xbe>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	464a      	mov	r2, r9
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f af2b 	beq.w	80089be <_printf_float+0xba>
 8008b68:	f108 0801 	add.w	r8, r8, #1
 8008b6c:	e7e6      	b.n	8008b3c <_printf_float+0x238>
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc2b      	bgt.n	8008bcc <_printf_float+0x2c8>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4a26      	ldr	r2, [pc, #152]	; (8008c10 <_printf_float+0x30c>)
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f af1d 	beq.w	80089be <_printf_float+0xba>
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	b923      	cbnz	r3, 8008b92 <_printf_float+0x28e>
 8008b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8a:	b913      	cbnz	r3, 8008b92 <_printf_float+0x28e>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	07d9      	lsls	r1, r3, #31
 8008b90:	d5d8      	bpl.n	8008b44 <_printf_float+0x240>
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f43f af0e 	beq.w	80089be <_printf_float+0xba>
 8008ba2:	f04f 0900 	mov.w	r9, #0
 8008ba6:	f104 0a1a 	add.w	sl, r4, #26
 8008baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bac:	425b      	negs	r3, r3
 8008bae:	454b      	cmp	r3, r9
 8008bb0:	dc01      	bgt.n	8008bb6 <_printf_float+0x2b2>
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	e794      	b.n	8008ae0 <_printf_float+0x1dc>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4652      	mov	r2, sl
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f aefc 	beq.w	80089be <_printf_float+0xba>
 8008bc6:	f109 0901 	add.w	r9, r9, #1
 8008bca:	e7ee      	b.n	8008baa <_printf_float+0x2a6>
 8008bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	bfa8      	it	ge
 8008bd4:	461a      	movge	r2, r3
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	4691      	mov	r9, r2
 8008bda:	dd07      	ble.n	8008bec <_printf_float+0x2e8>
 8008bdc:	4613      	mov	r3, r2
 8008bde:	4631      	mov	r1, r6
 8008be0:	4642      	mov	r2, r8
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f aee9 	beq.w	80089be <_printf_float+0xba>
 8008bec:	f104 031a 	add.w	r3, r4, #26
 8008bf0:	f04f 0b00 	mov.w	fp, #0
 8008bf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bf8:	9306      	str	r3, [sp, #24]
 8008bfa:	e015      	b.n	8008c28 <_printf_float+0x324>
 8008bfc:	7fefffff 	.word	0x7fefffff
 8008c00:	0800b86c 	.word	0x0800b86c
 8008c04:	0800b868 	.word	0x0800b868
 8008c08:	0800b874 	.word	0x0800b874
 8008c0c:	0800b870 	.word	0x0800b870
 8008c10:	0800b878 	.word	0x0800b878
 8008c14:	2301      	movs	r3, #1
 8008c16:	9a06      	ldr	r2, [sp, #24]
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	47b8      	blx	r7
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f43f aecd 	beq.w	80089be <_printf_float+0xba>
 8008c24:	f10b 0b01 	add.w	fp, fp, #1
 8008c28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c2c:	ebaa 0309 	sub.w	r3, sl, r9
 8008c30:	455b      	cmp	r3, fp
 8008c32:	dcef      	bgt.n	8008c14 <_printf_float+0x310>
 8008c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	44d0      	add	r8, sl
 8008c3c:	db15      	blt.n	8008c6a <_printf_float+0x366>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	07da      	lsls	r2, r3, #31
 8008c42:	d412      	bmi.n	8008c6a <_printf_float+0x366>
 8008c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c48:	eba3 020a 	sub.w	r2, r3, sl
 8008c4c:	eba3 0a01 	sub.w	sl, r3, r1
 8008c50:	4592      	cmp	sl, r2
 8008c52:	bfa8      	it	ge
 8008c54:	4692      	movge	sl, r2
 8008c56:	f1ba 0f00 	cmp.w	sl, #0
 8008c5a:	dc0e      	bgt.n	8008c7a <_printf_float+0x376>
 8008c5c:	f04f 0800 	mov.w	r8, #0
 8008c60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c64:	f104 091a 	add.w	r9, r4, #26
 8008c68:	e019      	b.n	8008c9e <_printf_float+0x39a>
 8008c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1e5      	bne.n	8008c44 <_printf_float+0x340>
 8008c78:	e6a1      	b.n	80089be <_printf_float+0xba>
 8008c7a:	4653      	mov	r3, sl
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	d1e9      	bne.n	8008c5c <_printf_float+0x358>
 8008c88:	e699      	b.n	80089be <_printf_float+0xba>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	464a      	mov	r2, r9
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f ae92 	beq.w	80089be <_printf_float+0xba>
 8008c9a:	f108 0801 	add.w	r8, r8, #1
 8008c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	eba3 030a 	sub.w	r3, r3, sl
 8008ca8:	4543      	cmp	r3, r8
 8008caa:	dcee      	bgt.n	8008c8a <_printf_float+0x386>
 8008cac:	e74a      	b.n	8008b44 <_printf_float+0x240>
 8008cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb0:	2a01      	cmp	r2, #1
 8008cb2:	dc01      	bgt.n	8008cb8 <_printf_float+0x3b4>
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d53a      	bpl.n	8008d2e <_printf_float+0x42a>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4642      	mov	r2, r8
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f ae7b 	beq.w	80089be <_printf_float+0xba>
 8008cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f108 0801 	add.w	r8, r8, #1
 8008cd8:	f43f ae71 	beq.w	80089be <_printf_float+0xba>
 8008cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f7f7 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cee:	b9c8      	cbnz	r0, 8008d24 <_printf_float+0x420>
 8008cf0:	4653      	mov	r3, sl
 8008cf2:	4642      	mov	r2, r8
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d10e      	bne.n	8008d1c <_printf_float+0x418>
 8008cfe:	e65e      	b.n	80089be <_printf_float+0xba>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4652      	mov	r2, sl
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	f43f ae57 	beq.w	80089be <_printf_float+0xba>
 8008d10:	f108 0801 	add.w	r8, r8, #1
 8008d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d16:	3b01      	subs	r3, #1
 8008d18:	4543      	cmp	r3, r8
 8008d1a:	dcf1      	bgt.n	8008d00 <_printf_float+0x3fc>
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d22:	e6de      	b.n	8008ae2 <_printf_float+0x1de>
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	f104 0a1a 	add.w	sl, r4, #26
 8008d2c:	e7f2      	b.n	8008d14 <_printf_float+0x410>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7df      	b.n	8008cf2 <_printf_float+0x3ee>
 8008d32:	2301      	movs	r3, #1
 8008d34:	464a      	mov	r2, r9
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae3e 	beq.w	80089be <_printf_float+0xba>
 8008d42:	f108 0801 	add.w	r8, r8, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	dcf0      	bgt.n	8008d32 <_printf_float+0x42e>
 8008d50:	e6fc      	b.n	8008b4c <_printf_float+0x248>
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	f104 0919 	add.w	r9, r4, #25
 8008d5a:	e7f4      	b.n	8008d46 <_printf_float+0x442>
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	f43f ae8b 	beq.w	8008a78 <_printf_float+0x174>
 8008d62:	2300      	movs	r3, #0
 8008d64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d68:	ab09      	add	r3, sp, #36	; 0x24
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	ec49 8b10 	vmov	d0, r8, r9
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	f8cd a004 	str.w	sl, [sp, #4]
 8008d76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f7ff fd2e 	bl	80087dc <__cvt>
 8008d80:	4680      	mov	r8, r0
 8008d82:	e648      	b.n	8008a16 <_printf_float+0x112>

08008d84 <_printf_common>:
 8008d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	4691      	mov	r9, r2
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	688a      	ldr	r2, [r1, #8]
 8008d8e:	690b      	ldr	r3, [r1, #16]
 8008d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bfb8      	it	lt
 8008d98:	4613      	movlt	r3, r2
 8008d9a:	f8c9 3000 	str.w	r3, [r9]
 8008d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008da2:	4606      	mov	r6, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	b112      	cbz	r2, 8008dae <_printf_common+0x2a>
 8008da8:	3301      	adds	r3, #1
 8008daa:	f8c9 3000 	str.w	r3, [r9]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	0699      	lsls	r1, r3, #26
 8008db2:	bf42      	ittt	mi
 8008db4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008db8:	3302      	addmi	r3, #2
 8008dba:	f8c9 3000 	strmi.w	r3, [r9]
 8008dbe:	6825      	ldr	r5, [r4, #0]
 8008dc0:	f015 0506 	ands.w	r5, r5, #6
 8008dc4:	d107      	bne.n	8008dd6 <_printf_common+0x52>
 8008dc6:	f104 0a19 	add.w	sl, r4, #25
 8008dca:	68e3      	ldr	r3, [r4, #12]
 8008dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	dc28      	bgt.n	8008e28 <_printf_common+0xa4>
 8008dd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	3300      	adds	r3, #0
 8008dde:	bf18      	it	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	0692      	lsls	r2, r2, #26
 8008de4:	d42d      	bmi.n	8008e42 <_printf_common+0xbe>
 8008de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dea:	4639      	mov	r1, r7
 8008dec:	4630      	mov	r0, r6
 8008dee:	47c0      	blx	r8
 8008df0:	3001      	adds	r0, #1
 8008df2:	d020      	beq.n	8008e36 <_printf_common+0xb2>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	68e5      	ldr	r5, [r4, #12]
 8008df8:	f8d9 2000 	ldr.w	r2, [r9]
 8008dfc:	f003 0306 	and.w	r3, r3, #6
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	bf08      	it	eq
 8008e04:	1aad      	subeq	r5, r5, r2
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	bf0c      	ite	eq
 8008e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e10:	2500      	movne	r5, #0
 8008e12:	4293      	cmp	r3, r2
 8008e14:	bfc4      	itt	gt
 8008e16:	1a9b      	subgt	r3, r3, r2
 8008e18:	18ed      	addgt	r5, r5, r3
 8008e1a:	f04f 0900 	mov.w	r9, #0
 8008e1e:	341a      	adds	r4, #26
 8008e20:	454d      	cmp	r5, r9
 8008e22:	d11a      	bne.n	8008e5a <_printf_common+0xd6>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e008      	b.n	8008e3a <_printf_common+0xb6>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	47c0      	blx	r8
 8008e32:	3001      	adds	r0, #1
 8008e34:	d103      	bne.n	8008e3e <_printf_common+0xba>
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3e:	3501      	adds	r5, #1
 8008e40:	e7c3      	b.n	8008dca <_printf_common+0x46>
 8008e42:	18e1      	adds	r1, r4, r3
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	2030      	movs	r0, #48	; 0x30
 8008e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e4c:	4422      	add	r2, r4
 8008e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e56:	3302      	adds	r3, #2
 8008e58:	e7c5      	b.n	8008de6 <_printf_common+0x62>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4639      	mov	r1, r7
 8008e60:	4630      	mov	r0, r6
 8008e62:	47c0      	blx	r8
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0e6      	beq.n	8008e36 <_printf_common+0xb2>
 8008e68:	f109 0901 	add.w	r9, r9, #1
 8008e6c:	e7d8      	b.n	8008e20 <_printf_common+0x9c>
	...

08008e70 <_printf_i>:
 8008e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e78:	460c      	mov	r4, r1
 8008e7a:	7e09      	ldrb	r1, [r1, #24]
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	296e      	cmp	r1, #110	; 0x6e
 8008e80:	4617      	mov	r7, r2
 8008e82:	4606      	mov	r6, r0
 8008e84:	4698      	mov	r8, r3
 8008e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e88:	f000 80b3 	beq.w	8008ff2 <_printf_i+0x182>
 8008e8c:	d822      	bhi.n	8008ed4 <_printf_i+0x64>
 8008e8e:	2963      	cmp	r1, #99	; 0x63
 8008e90:	d036      	beq.n	8008f00 <_printf_i+0x90>
 8008e92:	d80a      	bhi.n	8008eaa <_printf_i+0x3a>
 8008e94:	2900      	cmp	r1, #0
 8008e96:	f000 80b9 	beq.w	800900c <_printf_i+0x19c>
 8008e9a:	2958      	cmp	r1, #88	; 0x58
 8008e9c:	f000 8083 	beq.w	8008fa6 <_printf_i+0x136>
 8008ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ea8:	e032      	b.n	8008f10 <_printf_i+0xa0>
 8008eaa:	2964      	cmp	r1, #100	; 0x64
 8008eac:	d001      	beq.n	8008eb2 <_printf_i+0x42>
 8008eae:	2969      	cmp	r1, #105	; 0x69
 8008eb0:	d1f6      	bne.n	8008ea0 <_printf_i+0x30>
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	6813      	ldr	r3, [r2, #0]
 8008eb6:	0605      	lsls	r5, r0, #24
 8008eb8:	f103 0104 	add.w	r1, r3, #4
 8008ebc:	d52a      	bpl.n	8008f14 <_printf_i+0xa4>
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6011      	str	r1, [r2, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da03      	bge.n	8008ece <_printf_i+0x5e>
 8008ec6:	222d      	movs	r2, #45	; 0x2d
 8008ec8:	425b      	negs	r3, r3
 8008eca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ece:	486f      	ldr	r0, [pc, #444]	; (800908c <_printf_i+0x21c>)
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	e039      	b.n	8008f48 <_printf_i+0xd8>
 8008ed4:	2973      	cmp	r1, #115	; 0x73
 8008ed6:	f000 809d 	beq.w	8009014 <_printf_i+0x1a4>
 8008eda:	d808      	bhi.n	8008eee <_printf_i+0x7e>
 8008edc:	296f      	cmp	r1, #111	; 0x6f
 8008ede:	d020      	beq.n	8008f22 <_printf_i+0xb2>
 8008ee0:	2970      	cmp	r1, #112	; 0x70
 8008ee2:	d1dd      	bne.n	8008ea0 <_printf_i+0x30>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f043 0320 	orr.w	r3, r3, #32
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	e003      	b.n	8008ef6 <_printf_i+0x86>
 8008eee:	2975      	cmp	r1, #117	; 0x75
 8008ef0:	d017      	beq.n	8008f22 <_printf_i+0xb2>
 8008ef2:	2978      	cmp	r1, #120	; 0x78
 8008ef4:	d1d4      	bne.n	8008ea0 <_printf_i+0x30>
 8008ef6:	2378      	movs	r3, #120	; 0x78
 8008ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008efc:	4864      	ldr	r0, [pc, #400]	; (8009090 <_printf_i+0x220>)
 8008efe:	e055      	b.n	8008fac <_printf_i+0x13c>
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	1d19      	adds	r1, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6011      	str	r1, [r2, #0]
 8008f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f10:	2301      	movs	r3, #1
 8008f12:	e08c      	b.n	800902e <_printf_i+0x1be>
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6011      	str	r1, [r2, #0]
 8008f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f1c:	bf18      	it	ne
 8008f1e:	b21b      	sxthne	r3, r3
 8008f20:	e7cf      	b.n	8008ec2 <_printf_i+0x52>
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	6825      	ldr	r5, [r4, #0]
 8008f26:	1d18      	adds	r0, r3, #4
 8008f28:	6010      	str	r0, [r2, #0]
 8008f2a:	0628      	lsls	r0, r5, #24
 8008f2c:	d501      	bpl.n	8008f32 <_printf_i+0xc2>
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	e002      	b.n	8008f38 <_printf_i+0xc8>
 8008f32:	0668      	lsls	r0, r5, #25
 8008f34:	d5fb      	bpl.n	8008f2e <_printf_i+0xbe>
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	4854      	ldr	r0, [pc, #336]	; (800908c <_printf_i+0x21c>)
 8008f3a:	296f      	cmp	r1, #111	; 0x6f
 8008f3c:	bf14      	ite	ne
 8008f3e:	220a      	movne	r2, #10
 8008f40:	2208      	moveq	r2, #8
 8008f42:	2100      	movs	r1, #0
 8008f44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f48:	6865      	ldr	r5, [r4, #4]
 8008f4a:	60a5      	str	r5, [r4, #8]
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	f2c0 8095 	blt.w	800907c <_printf_i+0x20c>
 8008f52:	6821      	ldr	r1, [r4, #0]
 8008f54:	f021 0104 	bic.w	r1, r1, #4
 8008f58:	6021      	str	r1, [r4, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d13d      	bne.n	8008fda <_printf_i+0x16a>
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	f040 808e 	bne.w	8009080 <_printf_i+0x210>
 8008f64:	4665      	mov	r5, ip
 8008f66:	2a08      	cmp	r2, #8
 8008f68:	d10b      	bne.n	8008f82 <_printf_i+0x112>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	07db      	lsls	r3, r3, #31
 8008f6e:	d508      	bpl.n	8008f82 <_printf_i+0x112>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	bfde      	ittt	le
 8008f78:	2330      	movle	r3, #48	; 0x30
 8008f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f82:	ebac 0305 	sub.w	r3, ip, r5
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	f8cd 8000 	str.w	r8, [sp]
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	aa03      	add	r2, sp, #12
 8008f90:	4621      	mov	r1, r4
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff fef6 	bl	8008d84 <_printf_common>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d14d      	bne.n	8009038 <_printf_i+0x1c8>
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	b005      	add	sp, #20
 8008fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	4839      	ldr	r0, [pc, #228]	; (800908c <_printf_i+0x21c>)
 8008fa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008fac:	6813      	ldr	r3, [r2, #0]
 8008fae:	6821      	ldr	r1, [r4, #0]
 8008fb0:	1d1d      	adds	r5, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6015      	str	r5, [r2, #0]
 8008fb6:	060a      	lsls	r2, r1, #24
 8008fb8:	d50b      	bpl.n	8008fd2 <_printf_i+0x162>
 8008fba:	07ca      	lsls	r2, r1, #31
 8008fbc:	bf44      	itt	mi
 8008fbe:	f041 0120 	orrmi.w	r1, r1, #32
 8008fc2:	6021      	strmi	r1, [r4, #0]
 8008fc4:	b91b      	cbnz	r3, 8008fce <_printf_i+0x15e>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	f022 0220 	bic.w	r2, r2, #32
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	e7b7      	b.n	8008f42 <_printf_i+0xd2>
 8008fd2:	064d      	lsls	r5, r1, #25
 8008fd4:	bf48      	it	mi
 8008fd6:	b29b      	uxthmi	r3, r3
 8008fd8:	e7ef      	b.n	8008fba <_printf_i+0x14a>
 8008fda:	4665      	mov	r5, ip
 8008fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe0:	fb02 3311 	mls	r3, r2, r1, r3
 8008fe4:	5cc3      	ldrb	r3, [r0, r3]
 8008fe6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fea:	460b      	mov	r3, r1
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d1f5      	bne.n	8008fdc <_printf_i+0x16c>
 8008ff0:	e7b9      	b.n	8008f66 <_printf_i+0xf6>
 8008ff2:	6813      	ldr	r3, [r2, #0]
 8008ff4:	6825      	ldr	r5, [r4, #0]
 8008ff6:	6961      	ldr	r1, [r4, #20]
 8008ff8:	1d18      	adds	r0, r3, #4
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	0628      	lsls	r0, r5, #24
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	d501      	bpl.n	8009006 <_printf_i+0x196>
 8009002:	6019      	str	r1, [r3, #0]
 8009004:	e002      	b.n	800900c <_printf_i+0x19c>
 8009006:	066a      	lsls	r2, r5, #25
 8009008:	d5fb      	bpl.n	8009002 <_printf_i+0x192>
 800900a:	8019      	strh	r1, [r3, #0]
 800900c:	2300      	movs	r3, #0
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	4665      	mov	r5, ip
 8009012:	e7b9      	b.n	8008f88 <_printf_i+0x118>
 8009014:	6813      	ldr	r3, [r2, #0]
 8009016:	1d19      	adds	r1, r3, #4
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	681d      	ldr	r5, [r3, #0]
 800901c:	6862      	ldr	r2, [r4, #4]
 800901e:	2100      	movs	r1, #0
 8009020:	4628      	mov	r0, r5
 8009022:	f7f7 f8dd 	bl	80001e0 <memchr>
 8009026:	b108      	cbz	r0, 800902c <_printf_i+0x1bc>
 8009028:	1b40      	subs	r0, r0, r5
 800902a:	6060      	str	r0, [r4, #4]
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	2300      	movs	r3, #0
 8009032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009036:	e7a7      	b.n	8008f88 <_printf_i+0x118>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	462a      	mov	r2, r5
 800903c:	4639      	mov	r1, r7
 800903e:	4630      	mov	r0, r6
 8009040:	47c0      	blx	r8
 8009042:	3001      	adds	r0, #1
 8009044:	d0aa      	beq.n	8008f9c <_printf_i+0x12c>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	079b      	lsls	r3, r3, #30
 800904a:	d413      	bmi.n	8009074 <_printf_i+0x204>
 800904c:	68e0      	ldr	r0, [r4, #12]
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	4298      	cmp	r0, r3
 8009052:	bfb8      	it	lt
 8009054:	4618      	movlt	r0, r3
 8009056:	e7a3      	b.n	8008fa0 <_printf_i+0x130>
 8009058:	2301      	movs	r3, #1
 800905a:	464a      	mov	r2, r9
 800905c:	4639      	mov	r1, r7
 800905e:	4630      	mov	r0, r6
 8009060:	47c0      	blx	r8
 8009062:	3001      	adds	r0, #1
 8009064:	d09a      	beq.n	8008f9c <_printf_i+0x12c>
 8009066:	3501      	adds	r5, #1
 8009068:	68e3      	ldr	r3, [r4, #12]
 800906a:	9a03      	ldr	r2, [sp, #12]
 800906c:	1a9b      	subs	r3, r3, r2
 800906e:	42ab      	cmp	r3, r5
 8009070:	dcf2      	bgt.n	8009058 <_printf_i+0x1e8>
 8009072:	e7eb      	b.n	800904c <_printf_i+0x1dc>
 8009074:	2500      	movs	r5, #0
 8009076:	f104 0919 	add.w	r9, r4, #25
 800907a:	e7f5      	b.n	8009068 <_printf_i+0x1f8>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1ac      	bne.n	8008fda <_printf_i+0x16a>
 8009080:	7803      	ldrb	r3, [r0, #0]
 8009082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800908a:	e76c      	b.n	8008f66 <_printf_i+0xf6>
 800908c:	0800b87a 	.word	0x0800b87a
 8009090:	0800b88b 	.word	0x0800b88b

08009094 <iprintf>:
 8009094:	b40f      	push	{r0, r1, r2, r3}
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <iprintf+0x2c>)
 8009098:	b513      	push	{r0, r1, r4, lr}
 800909a:	681c      	ldr	r4, [r3, #0]
 800909c:	b124      	cbz	r4, 80090a8 <iprintf+0x14>
 800909e:	69a3      	ldr	r3, [r4, #24]
 80090a0:	b913      	cbnz	r3, 80090a8 <iprintf+0x14>
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 f868 	bl	800a178 <__sinit>
 80090a8:	ab05      	add	r3, sp, #20
 80090aa:	9a04      	ldr	r2, [sp, #16]
 80090ac:	68a1      	ldr	r1, [r4, #8]
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 fd2b 	bl	800ab0c <_vfiprintf_r>
 80090b6:	b002      	add	sp, #8
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	b004      	add	sp, #16
 80090be:	4770      	bx	lr
 80090c0:	20000010 	.word	0x20000010

080090c4 <_puts_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460e      	mov	r6, r1
 80090c8:	4605      	mov	r5, r0
 80090ca:	b118      	cbz	r0, 80090d4 <_puts_r+0x10>
 80090cc:	6983      	ldr	r3, [r0, #24]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_puts_r+0x10>
 80090d0:	f001 f852 	bl	800a178 <__sinit>
 80090d4:	69ab      	ldr	r3, [r5, #24]
 80090d6:	68ac      	ldr	r4, [r5, #8]
 80090d8:	b913      	cbnz	r3, 80090e0 <_puts_r+0x1c>
 80090da:	4628      	mov	r0, r5
 80090dc:	f001 f84c 	bl	800a178 <__sinit>
 80090e0:	4b23      	ldr	r3, [pc, #140]	; (8009170 <_puts_r+0xac>)
 80090e2:	429c      	cmp	r4, r3
 80090e4:	d117      	bne.n	8009116 <_puts_r+0x52>
 80090e6:	686c      	ldr	r4, [r5, #4]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	071b      	lsls	r3, r3, #28
 80090ec:	d51d      	bpl.n	800912a <_puts_r+0x66>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	b1db      	cbz	r3, 800912a <_puts_r+0x66>
 80090f2:	3e01      	subs	r6, #1
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090fa:	3b01      	subs	r3, #1
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	b9e9      	cbnz	r1, 800913c <_puts_r+0x78>
 8009100:	2b00      	cmp	r3, #0
 8009102:	da2e      	bge.n	8009162 <_puts_r+0x9e>
 8009104:	4622      	mov	r2, r4
 8009106:	210a      	movs	r1, #10
 8009108:	4628      	mov	r0, r5
 800910a:	f000 f83f 	bl	800918c <__swbuf_r>
 800910e:	3001      	adds	r0, #1
 8009110:	d011      	beq.n	8009136 <_puts_r+0x72>
 8009112:	200a      	movs	r0, #10
 8009114:	e011      	b.n	800913a <_puts_r+0x76>
 8009116:	4b17      	ldr	r3, [pc, #92]	; (8009174 <_puts_r+0xb0>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d101      	bne.n	8009120 <_puts_r+0x5c>
 800911c:	68ac      	ldr	r4, [r5, #8]
 800911e:	e7e3      	b.n	80090e8 <_puts_r+0x24>
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <_puts_r+0xb4>)
 8009122:	429c      	cmp	r4, r3
 8009124:	bf08      	it	eq
 8009126:	68ec      	ldreq	r4, [r5, #12]
 8009128:	e7de      	b.n	80090e8 <_puts_r+0x24>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f87f 	bl	8009230 <__swsetup_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d0dd      	beq.n	80090f2 <_puts_r+0x2e>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	2b00      	cmp	r3, #0
 800913e:	da04      	bge.n	800914a <_puts_r+0x86>
 8009140:	69a2      	ldr	r2, [r4, #24]
 8009142:	429a      	cmp	r2, r3
 8009144:	dc06      	bgt.n	8009154 <_puts_r+0x90>
 8009146:	290a      	cmp	r1, #10
 8009148:	d004      	beq.n	8009154 <_puts_r+0x90>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	7019      	strb	r1, [r3, #0]
 8009152:	e7cf      	b.n	80090f4 <_puts_r+0x30>
 8009154:	4622      	mov	r2, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f818 	bl	800918c <__swbuf_r>
 800915c:	3001      	adds	r0, #1
 800915e:	d1c9      	bne.n	80090f4 <_puts_r+0x30>
 8009160:	e7e9      	b.n	8009136 <_puts_r+0x72>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	200a      	movs	r0, #10
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	7018      	strb	r0, [r3, #0]
 800916c:	e7e5      	b.n	800913a <_puts_r+0x76>
 800916e:	bf00      	nop
 8009170:	0800b8cc 	.word	0x0800b8cc
 8009174:	0800b8ec 	.word	0x0800b8ec
 8009178:	0800b8ac 	.word	0x0800b8ac

0800917c <puts>:
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <puts+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f7ff bf9f 	b.w	80090c4 <_puts_r>
 8009186:	bf00      	nop
 8009188:	20000010 	.word	0x20000010

0800918c <__swbuf_r>:
 800918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918e:	460e      	mov	r6, r1
 8009190:	4614      	mov	r4, r2
 8009192:	4605      	mov	r5, r0
 8009194:	b118      	cbz	r0, 800919e <__swbuf_r+0x12>
 8009196:	6983      	ldr	r3, [r0, #24]
 8009198:	b90b      	cbnz	r3, 800919e <__swbuf_r+0x12>
 800919a:	f000 ffed 	bl	800a178 <__sinit>
 800919e:	4b21      	ldr	r3, [pc, #132]	; (8009224 <__swbuf_r+0x98>)
 80091a0:	429c      	cmp	r4, r3
 80091a2:	d12a      	bne.n	80091fa <__swbuf_r+0x6e>
 80091a4:	686c      	ldr	r4, [r5, #4]
 80091a6:	69a3      	ldr	r3, [r4, #24]
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	071a      	lsls	r2, r3, #28
 80091ae:	d52e      	bpl.n	800920e <__swbuf_r+0x82>
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b363      	cbz	r3, 800920e <__swbuf_r+0x82>
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	6820      	ldr	r0, [r4, #0]
 80091b8:	1ac0      	subs	r0, r0, r3
 80091ba:	6963      	ldr	r3, [r4, #20]
 80091bc:	b2f6      	uxtb	r6, r6
 80091be:	4283      	cmp	r3, r0
 80091c0:	4637      	mov	r7, r6
 80091c2:	dc04      	bgt.n	80091ce <__swbuf_r+0x42>
 80091c4:	4621      	mov	r1, r4
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 ff6c 	bl	800a0a4 <_fflush_r>
 80091cc:	bb28      	cbnz	r0, 800921a <__swbuf_r+0x8e>
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	6022      	str	r2, [r4, #0]
 80091da:	701e      	strb	r6, [r3, #0]
 80091dc:	6963      	ldr	r3, [r4, #20]
 80091de:	3001      	adds	r0, #1
 80091e0:	4283      	cmp	r3, r0
 80091e2:	d004      	beq.n	80091ee <__swbuf_r+0x62>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	07db      	lsls	r3, r3, #31
 80091e8:	d519      	bpl.n	800921e <__swbuf_r+0x92>
 80091ea:	2e0a      	cmp	r6, #10
 80091ec:	d117      	bne.n	800921e <__swbuf_r+0x92>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 ff57 	bl	800a0a4 <_fflush_r>
 80091f6:	b190      	cbz	r0, 800921e <__swbuf_r+0x92>
 80091f8:	e00f      	b.n	800921a <__swbuf_r+0x8e>
 80091fa:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <__swbuf_r+0x9c>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	d101      	bne.n	8009204 <__swbuf_r+0x78>
 8009200:	68ac      	ldr	r4, [r5, #8]
 8009202:	e7d0      	b.n	80091a6 <__swbuf_r+0x1a>
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <__swbuf_r+0xa0>)
 8009206:	429c      	cmp	r4, r3
 8009208:	bf08      	it	eq
 800920a:	68ec      	ldreq	r4, [r5, #12]
 800920c:	e7cb      	b.n	80091a6 <__swbuf_r+0x1a>
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f80d 	bl	8009230 <__swsetup_r>
 8009216:	2800      	cmp	r0, #0
 8009218:	d0cc      	beq.n	80091b4 <__swbuf_r+0x28>
 800921a:	f04f 37ff 	mov.w	r7, #4294967295
 800921e:	4638      	mov	r0, r7
 8009220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009222:	bf00      	nop
 8009224:	0800b8cc 	.word	0x0800b8cc
 8009228:	0800b8ec 	.word	0x0800b8ec
 800922c:	0800b8ac 	.word	0x0800b8ac

08009230 <__swsetup_r>:
 8009230:	4b32      	ldr	r3, [pc, #200]	; (80092fc <__swsetup_r+0xcc>)
 8009232:	b570      	push	{r4, r5, r6, lr}
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	4606      	mov	r6, r0
 8009238:	460c      	mov	r4, r1
 800923a:	b125      	cbz	r5, 8009246 <__swsetup_r+0x16>
 800923c:	69ab      	ldr	r3, [r5, #24]
 800923e:	b913      	cbnz	r3, 8009246 <__swsetup_r+0x16>
 8009240:	4628      	mov	r0, r5
 8009242:	f000 ff99 	bl	800a178 <__sinit>
 8009246:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <__swsetup_r+0xd0>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d10f      	bne.n	800926c <__swsetup_r+0x3c>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009252:	b29a      	uxth	r2, r3
 8009254:	0715      	lsls	r5, r2, #28
 8009256:	d42c      	bmi.n	80092b2 <__swsetup_r+0x82>
 8009258:	06d0      	lsls	r0, r2, #27
 800925a:	d411      	bmi.n	8009280 <__swsetup_r+0x50>
 800925c:	2209      	movs	r2, #9
 800925e:	6032      	str	r2, [r6, #0]
 8009260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	e03e      	b.n	80092ea <__swsetup_r+0xba>
 800926c:	4b25      	ldr	r3, [pc, #148]	; (8009304 <__swsetup_r+0xd4>)
 800926e:	429c      	cmp	r4, r3
 8009270:	d101      	bne.n	8009276 <__swsetup_r+0x46>
 8009272:	68ac      	ldr	r4, [r5, #8]
 8009274:	e7eb      	b.n	800924e <__swsetup_r+0x1e>
 8009276:	4b24      	ldr	r3, [pc, #144]	; (8009308 <__swsetup_r+0xd8>)
 8009278:	429c      	cmp	r4, r3
 800927a:	bf08      	it	eq
 800927c:	68ec      	ldreq	r4, [r5, #12]
 800927e:	e7e6      	b.n	800924e <__swsetup_r+0x1e>
 8009280:	0751      	lsls	r1, r2, #29
 8009282:	d512      	bpl.n	80092aa <__swsetup_r+0x7a>
 8009284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009286:	b141      	cbz	r1, 800929a <__swsetup_r+0x6a>
 8009288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800928c:	4299      	cmp	r1, r3
 800928e:	d002      	beq.n	8009296 <__swsetup_r+0x66>
 8009290:	4630      	mov	r0, r6
 8009292:	f001 fb69 	bl	800a968 <_free_r>
 8009296:	2300      	movs	r3, #0
 8009298:	6363      	str	r3, [r4, #52]	; 0x34
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	2300      	movs	r3, #0
 80092a4:	6063      	str	r3, [r4, #4]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f043 0308 	orr.w	r3, r3, #8
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	b94b      	cbnz	r3, 80092ca <__swsetup_r+0x9a>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c0:	d003      	beq.n	80092ca <__swsetup_r+0x9a>
 80092c2:	4621      	mov	r1, r4
 80092c4:	4630      	mov	r0, r6
 80092c6:	f001 f813 	bl	800a2f0 <__smakebuf_r>
 80092ca:	89a2      	ldrh	r2, [r4, #12]
 80092cc:	f012 0301 	ands.w	r3, r2, #1
 80092d0:	d00c      	beq.n	80092ec <__swsetup_r+0xbc>
 80092d2:	2300      	movs	r3, #0
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	425b      	negs	r3, r3
 80092da:	61a3      	str	r3, [r4, #24]
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	b953      	cbnz	r3, 80092f6 <__swsetup_r+0xc6>
 80092e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80092e8:	d1ba      	bne.n	8009260 <__swsetup_r+0x30>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	0792      	lsls	r2, r2, #30
 80092ee:	bf58      	it	pl
 80092f0:	6963      	ldrpl	r3, [r4, #20]
 80092f2:	60a3      	str	r3, [r4, #8]
 80092f4:	e7f2      	b.n	80092dc <__swsetup_r+0xac>
 80092f6:	2000      	movs	r0, #0
 80092f8:	e7f7      	b.n	80092ea <__swsetup_r+0xba>
 80092fa:	bf00      	nop
 80092fc:	20000010 	.word	0x20000010
 8009300:	0800b8cc 	.word	0x0800b8cc
 8009304:	0800b8ec 	.word	0x0800b8ec
 8009308:	0800b8ac 	.word	0x0800b8ac

0800930c <quorem>:
 800930c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	6903      	ldr	r3, [r0, #16]
 8009312:	690c      	ldr	r4, [r1, #16]
 8009314:	42a3      	cmp	r3, r4
 8009316:	4680      	mov	r8, r0
 8009318:	f2c0 8082 	blt.w	8009420 <quorem+0x114>
 800931c:	3c01      	subs	r4, #1
 800931e:	f101 0714 	add.w	r7, r1, #20
 8009322:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009326:	f100 0614 	add.w	r6, r0, #20
 800932a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800932e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009332:	eb06 030c 	add.w	r3, r6, ip
 8009336:	3501      	adds	r5, #1
 8009338:	eb07 090c 	add.w	r9, r7, ip
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009342:	b395      	cbz	r5, 80093aa <quorem+0x9e>
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	4638      	mov	r0, r7
 800934a:	46b6      	mov	lr, r6
 800934c:	46d3      	mov	fp, sl
 800934e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009352:	b293      	uxth	r3, r2
 8009354:	fb05 a303 	mla	r3, r5, r3, sl
 8009358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800935c:	b29b      	uxth	r3, r3
 800935e:	ebab 0303 	sub.w	r3, fp, r3
 8009362:	0c12      	lsrs	r2, r2, #16
 8009364:	f8de b000 	ldr.w	fp, [lr]
 8009368:	fb05 a202 	mla	r2, r5, r2, sl
 800936c:	fa13 f38b 	uxtah	r3, r3, fp
 8009370:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009374:	fa1f fb82 	uxth.w	fp, r2
 8009378:	f8de 2000 	ldr.w	r2, [lr]
 800937c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009384:	b29b      	uxth	r3, r3
 8009386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800938a:	4581      	cmp	r9, r0
 800938c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009390:	f84e 3b04 	str.w	r3, [lr], #4
 8009394:	d2db      	bcs.n	800934e <quorem+0x42>
 8009396:	f856 300c 	ldr.w	r3, [r6, ip]
 800939a:	b933      	cbnz	r3, 80093aa <quorem+0x9e>
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	3b04      	subs	r3, #4
 80093a0:	429e      	cmp	r6, r3
 80093a2:	461a      	mov	r2, r3
 80093a4:	d330      	bcc.n	8009408 <quorem+0xfc>
 80093a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80093aa:	4640      	mov	r0, r8
 80093ac:	f001 fa08 	bl	800a7c0 <__mcmp>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	db25      	blt.n	8009400 <quorem+0xf4>
 80093b4:	3501      	adds	r5, #1
 80093b6:	4630      	mov	r0, r6
 80093b8:	f04f 0c00 	mov.w	ip, #0
 80093bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80093c0:	f8d0 e000 	ldr.w	lr, [r0]
 80093c4:	b293      	uxth	r3, r2
 80093c6:	ebac 0303 	sub.w	r3, ip, r3
 80093ca:	0c12      	lsrs	r2, r2, #16
 80093cc:	fa13 f38e 	uxtah	r3, r3, lr
 80093d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d8:	b29b      	uxth	r3, r3
 80093da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093de:	45b9      	cmp	r9, r7
 80093e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093e4:	f840 3b04 	str.w	r3, [r0], #4
 80093e8:	d2e8      	bcs.n	80093bc <quorem+0xb0>
 80093ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80093ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80093f2:	b92a      	cbnz	r2, 8009400 <quorem+0xf4>
 80093f4:	3b04      	subs	r3, #4
 80093f6:	429e      	cmp	r6, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	d30b      	bcc.n	8009414 <quorem+0x108>
 80093fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009400:	4628      	mov	r0, r5
 8009402:	b003      	add	sp, #12
 8009404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	3b04      	subs	r3, #4
 800940c:	2a00      	cmp	r2, #0
 800940e:	d1ca      	bne.n	80093a6 <quorem+0x9a>
 8009410:	3c01      	subs	r4, #1
 8009412:	e7c5      	b.n	80093a0 <quorem+0x94>
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	3b04      	subs	r3, #4
 8009418:	2a00      	cmp	r2, #0
 800941a:	d1ef      	bne.n	80093fc <quorem+0xf0>
 800941c:	3c01      	subs	r4, #1
 800941e:	e7ea      	b.n	80093f6 <quorem+0xea>
 8009420:	2000      	movs	r0, #0
 8009422:	e7ee      	b.n	8009402 <quorem+0xf6>
 8009424:	0000      	movs	r0, r0
	...

08009428 <_dtoa_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ec57 6b10 	vmov	r6, r7, d0
 8009430:	b097      	sub	sp, #92	; 0x5c
 8009432:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009434:	9106      	str	r1, [sp, #24]
 8009436:	4604      	mov	r4, r0
 8009438:	920b      	str	r2, [sp, #44]	; 0x2c
 800943a:	9312      	str	r3, [sp, #72]	; 0x48
 800943c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009440:	e9cd 6700 	strd	r6, r7, [sp]
 8009444:	b93d      	cbnz	r5, 8009456 <_dtoa_r+0x2e>
 8009446:	2010      	movs	r0, #16
 8009448:	f000 ff92 	bl	800a370 <malloc>
 800944c:	6260      	str	r0, [r4, #36]	; 0x24
 800944e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009452:	6005      	str	r5, [r0, #0]
 8009454:	60c5      	str	r5, [r0, #12]
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	b151      	cbz	r1, 8009472 <_dtoa_r+0x4a>
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	604a      	str	r2, [r1, #4]
 8009460:	2301      	movs	r3, #1
 8009462:	4093      	lsls	r3, r2
 8009464:	608b      	str	r3, [r1, #8]
 8009466:	4620      	mov	r0, r4
 8009468:	f000 ffc9 	bl	800a3fe <_Bfree>
 800946c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	1e3b      	subs	r3, r7, #0
 8009474:	bfbb      	ittet	lt
 8009476:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800947a:	9301      	strlt	r3, [sp, #4]
 800947c:	2300      	movge	r3, #0
 800947e:	2201      	movlt	r2, #1
 8009480:	bfac      	ite	ge
 8009482:	f8c8 3000 	strge.w	r3, [r8]
 8009486:	f8c8 2000 	strlt.w	r2, [r8]
 800948a:	4baf      	ldr	r3, [pc, #700]	; (8009748 <_dtoa_r+0x320>)
 800948c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009490:	ea33 0308 	bics.w	r3, r3, r8
 8009494:	d114      	bne.n	80094c0 <_dtoa_r+0x98>
 8009496:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009498:	f242 730f 	movw	r3, #9999	; 0x270f
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	b923      	cbnz	r3, 80094ac <_dtoa_r+0x84>
 80094a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f000 8542 	beq.w	8009f30 <_dtoa_r+0xb08>
 80094ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800975c <_dtoa_r+0x334>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8544 	beq.w	8009f40 <_dtoa_r+0xb18>
 80094b8:	f10b 0303 	add.w	r3, fp, #3
 80094bc:	f000 bd3e 	b.w	8009f3c <_dtoa_r+0xb14>
 80094c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2300      	movs	r3, #0
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d0:	4681      	mov	r9, r0
 80094d2:	b168      	cbz	r0, 80094f0 <_dtoa_r+0xc8>
 80094d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094d6:	2301      	movs	r3, #1
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8524 	beq.w	8009f2a <_dtoa_r+0xb02>
 80094e2:	4b9a      	ldr	r3, [pc, #616]	; (800974c <_dtoa_r+0x324>)
 80094e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	f000 bd28 	b.w	8009f40 <_dtoa_r+0xb18>
 80094f0:	aa14      	add	r2, sp, #80	; 0x50
 80094f2:	a915      	add	r1, sp, #84	; 0x54
 80094f4:	ec47 6b10 	vmov	d0, r6, r7
 80094f8:	4620      	mov	r0, r4
 80094fa:	f001 f9d8 	bl	800a8ae <__d2b>
 80094fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009502:	9004      	str	r0, [sp, #16]
 8009504:	2d00      	cmp	r5, #0
 8009506:	d07c      	beq.n	8009602 <_dtoa_r+0x1da>
 8009508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800950c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009510:	46b2      	mov	sl, r6
 8009512:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800951a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800951e:	2200      	movs	r2, #0
 8009520:	4b8b      	ldr	r3, [pc, #556]	; (8009750 <_dtoa_r+0x328>)
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f6 feaf 	bl	8000288 <__aeabi_dsub>
 800952a:	a381      	add	r3, pc, #516	; (adr r3, 8009730 <_dtoa_r+0x308>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f862 	bl	80005f8 <__aeabi_dmul>
 8009534:	a380      	add	r3, pc, #512	; (adr r3, 8009738 <_dtoa_r+0x310>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 fea7 	bl	800028c <__adddf3>
 800953e:	4606      	mov	r6, r0
 8009540:	4628      	mov	r0, r5
 8009542:	460f      	mov	r7, r1
 8009544:	f7f6 ffee 	bl	8000524 <__aeabi_i2d>
 8009548:	a37d      	add	r3, pc, #500	; (adr r3, 8009740 <_dtoa_r+0x318>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f6 fe97 	bl	800028c <__adddf3>
 800955e:	4606      	mov	r6, r0
 8009560:	460f      	mov	r7, r1
 8009562:	f7f7 faf9 	bl	8000b58 <__aeabi_d2iz>
 8009566:	2200      	movs	r2, #0
 8009568:	4682      	mov	sl, r0
 800956a:	2300      	movs	r3, #0
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fab4 	bl	8000adc <__aeabi_dcmplt>
 8009574:	b148      	cbz	r0, 800958a <_dtoa_r+0x162>
 8009576:	4650      	mov	r0, sl
 8009578:	f7f6 ffd4 	bl	8000524 <__aeabi_i2d>
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	f7f7 faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009584:	b908      	cbnz	r0, 800958a <_dtoa_r+0x162>
 8009586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800958a:	f1ba 0f16 	cmp.w	sl, #22
 800958e:	d859      	bhi.n	8009644 <_dtoa_r+0x21c>
 8009590:	4970      	ldr	r1, [pc, #448]	; (8009754 <_dtoa_r+0x32c>)
 8009592:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800959a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959e:	f7f7 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d050      	beq.n	8009648 <_dtoa_r+0x220>
 80095a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095aa:	2300      	movs	r3, #0
 80095ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095b0:	1b5d      	subs	r5, r3, r5
 80095b2:	f1b5 0801 	subs.w	r8, r5, #1
 80095b6:	bf49      	itett	mi
 80095b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80095bc:	2300      	movpl	r3, #0
 80095be:	9305      	strmi	r3, [sp, #20]
 80095c0:	f04f 0800 	movmi.w	r8, #0
 80095c4:	bf58      	it	pl
 80095c6:	9305      	strpl	r3, [sp, #20]
 80095c8:	f1ba 0f00 	cmp.w	sl, #0
 80095cc:	db3e      	blt.n	800964c <_dtoa_r+0x224>
 80095ce:	2300      	movs	r3, #0
 80095d0:	44d0      	add	r8, sl
 80095d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	2b09      	cmp	r3, #9
 80095dc:	f200 8090 	bhi.w	8009700 <_dtoa_r+0x2d8>
 80095e0:	2b05      	cmp	r3, #5
 80095e2:	bfc4      	itt	gt
 80095e4:	3b04      	subgt	r3, #4
 80095e6:	9306      	strgt	r3, [sp, #24]
 80095e8:	9b06      	ldr	r3, [sp, #24]
 80095ea:	f1a3 0302 	sub.w	r3, r3, #2
 80095ee:	bfcc      	ite	gt
 80095f0:	2500      	movgt	r5, #0
 80095f2:	2501      	movle	r5, #1
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	f200 808f 	bhi.w	8009718 <_dtoa_r+0x2f0>
 80095fa:	e8df f003 	tbb	[pc, r3]
 80095fe:	7f7d      	.short	0x7f7d
 8009600:	7131      	.short	0x7131
 8009602:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009606:	441d      	add	r5, r3
 8009608:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800960c:	2820      	cmp	r0, #32
 800960e:	dd13      	ble.n	8009638 <_dtoa_r+0x210>
 8009610:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	fa08 f800 	lsl.w	r8, r8, r0
 800961a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800961e:	fa23 f000 	lsr.w	r0, r3, r0
 8009622:	ea48 0000 	orr.w	r0, r8, r0
 8009626:	f7f6 ff6d 	bl	8000504 <__aeabi_ui2d>
 800962a:	2301      	movs	r3, #1
 800962c:	4682      	mov	sl, r0
 800962e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009632:	3d01      	subs	r5, #1
 8009634:	9313      	str	r3, [sp, #76]	; 0x4c
 8009636:	e772      	b.n	800951e <_dtoa_r+0xf6>
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	f1c0 0020 	rsb	r0, r0, #32
 800963e:	fa03 f000 	lsl.w	r0, r3, r0
 8009642:	e7f0      	b.n	8009626 <_dtoa_r+0x1fe>
 8009644:	2301      	movs	r3, #1
 8009646:	e7b1      	b.n	80095ac <_dtoa_r+0x184>
 8009648:	900f      	str	r0, [sp, #60]	; 0x3c
 800964a:	e7b0      	b.n	80095ae <_dtoa_r+0x186>
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	eba3 030a 	sub.w	r3, r3, sl
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	f1ca 0300 	rsb	r3, sl, #0
 8009658:	9307      	str	r3, [sp, #28]
 800965a:	2300      	movs	r3, #0
 800965c:	930e      	str	r3, [sp, #56]	; 0x38
 800965e:	e7bb      	b.n	80095d8 <_dtoa_r+0x1b0>
 8009660:	2301      	movs	r3, #1
 8009662:	930a      	str	r3, [sp, #40]	; 0x28
 8009664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd59      	ble.n	800971e <_dtoa_r+0x2f6>
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	4699      	mov	r9, r3
 800966e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009670:	2200      	movs	r2, #0
 8009672:	6072      	str	r2, [r6, #4]
 8009674:	2204      	movs	r2, #4
 8009676:	f102 0014 	add.w	r0, r2, #20
 800967a:	4298      	cmp	r0, r3
 800967c:	6871      	ldr	r1, [r6, #4]
 800967e:	d953      	bls.n	8009728 <_dtoa_r+0x300>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fe88 	bl	800a396 <_Balloc>
 8009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009688:	6030      	str	r0, [r6, #0]
 800968a:	f1b9 0f0e 	cmp.w	r9, #14
 800968e:	f8d3 b000 	ldr.w	fp, [r3]
 8009692:	f200 80e6 	bhi.w	8009862 <_dtoa_r+0x43a>
 8009696:	2d00      	cmp	r5, #0
 8009698:	f000 80e3 	beq.w	8009862 <_dtoa_r+0x43a>
 800969c:	ed9d 7b00 	vldr	d7, [sp]
 80096a0:	f1ba 0f00 	cmp.w	sl, #0
 80096a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80096a8:	dd74      	ble.n	8009794 <_dtoa_r+0x36c>
 80096aa:	4a2a      	ldr	r2, [pc, #168]	; (8009754 <_dtoa_r+0x32c>)
 80096ac:	f00a 030f 	and.w	r3, sl, #15
 80096b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096b4:	ed93 7b00 	vldr	d7, [r3]
 80096b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80096bc:	06f0      	lsls	r0, r6, #27
 80096be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80096c2:	d565      	bpl.n	8009790 <_dtoa_r+0x368>
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <_dtoa_r+0x330>)
 80096c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096ce:	f7f7 f8bd 	bl	800084c <__aeabi_ddiv>
 80096d2:	e9cd 0100 	strd	r0, r1, [sp]
 80096d6:	f006 060f 	and.w	r6, r6, #15
 80096da:	2503      	movs	r5, #3
 80096dc:	4f1e      	ldr	r7, [pc, #120]	; (8009758 <_dtoa_r+0x330>)
 80096de:	e04c      	b.n	800977a <_dtoa_r+0x352>
 80096e0:	2301      	movs	r3, #1
 80096e2:	930a      	str	r3, [sp, #40]	; 0x28
 80096e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e6:	4453      	add	r3, sl
 80096e8:	f103 0901 	add.w	r9, r3, #1
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	464b      	mov	r3, r9
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	bfb8      	it	lt
 80096f4:	2301      	movlt	r3, #1
 80096f6:	e7ba      	b.n	800966e <_dtoa_r+0x246>
 80096f8:	2300      	movs	r3, #0
 80096fa:	e7b2      	b.n	8009662 <_dtoa_r+0x23a>
 80096fc:	2300      	movs	r3, #0
 80096fe:	e7f0      	b.n	80096e2 <_dtoa_r+0x2ba>
 8009700:	2501      	movs	r5, #1
 8009702:	2300      	movs	r3, #0
 8009704:	9306      	str	r3, [sp, #24]
 8009706:	950a      	str	r5, [sp, #40]	; 0x28
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	4699      	mov	r9, r3
 8009710:	2200      	movs	r2, #0
 8009712:	2312      	movs	r3, #18
 8009714:	920b      	str	r2, [sp, #44]	; 0x2c
 8009716:	e7aa      	b.n	800966e <_dtoa_r+0x246>
 8009718:	2301      	movs	r3, #1
 800971a:	930a      	str	r3, [sp, #40]	; 0x28
 800971c:	e7f4      	b.n	8009708 <_dtoa_r+0x2e0>
 800971e:	2301      	movs	r3, #1
 8009720:	9302      	str	r3, [sp, #8]
 8009722:	4699      	mov	r9, r3
 8009724:	461a      	mov	r2, r3
 8009726:	e7f5      	b.n	8009714 <_dtoa_r+0x2ec>
 8009728:	3101      	adds	r1, #1
 800972a:	6071      	str	r1, [r6, #4]
 800972c:	0052      	lsls	r2, r2, #1
 800972e:	e7a2      	b.n	8009676 <_dtoa_r+0x24e>
 8009730:	636f4361 	.word	0x636f4361
 8009734:	3fd287a7 	.word	0x3fd287a7
 8009738:	8b60c8b3 	.word	0x8b60c8b3
 800973c:	3fc68a28 	.word	0x3fc68a28
 8009740:	509f79fb 	.word	0x509f79fb
 8009744:	3fd34413 	.word	0x3fd34413
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	0800b879 	.word	0x0800b879
 8009750:	3ff80000 	.word	0x3ff80000
 8009754:	0800b938 	.word	0x0800b938
 8009758:	0800b910 	.word	0x0800b910
 800975c:	0800b8a5 	.word	0x0800b8a5
 8009760:	07f1      	lsls	r1, r6, #31
 8009762:	d508      	bpl.n	8009776 <_dtoa_r+0x34e>
 8009764:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976c:	f7f6 ff44 	bl	80005f8 <__aeabi_dmul>
 8009770:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009774:	3501      	adds	r5, #1
 8009776:	1076      	asrs	r6, r6, #1
 8009778:	3708      	adds	r7, #8
 800977a:	2e00      	cmp	r6, #0
 800977c:	d1f0      	bne.n	8009760 <_dtoa_r+0x338>
 800977e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009786:	f7f7 f861 	bl	800084c <__aeabi_ddiv>
 800978a:	e9cd 0100 	strd	r0, r1, [sp]
 800978e:	e01a      	b.n	80097c6 <_dtoa_r+0x39e>
 8009790:	2502      	movs	r5, #2
 8009792:	e7a3      	b.n	80096dc <_dtoa_r+0x2b4>
 8009794:	f000 80a0 	beq.w	80098d8 <_dtoa_r+0x4b0>
 8009798:	f1ca 0600 	rsb	r6, sl, #0
 800979c:	4b9f      	ldr	r3, [pc, #636]	; (8009a1c <_dtoa_r+0x5f4>)
 800979e:	4fa0      	ldr	r7, [pc, #640]	; (8009a20 <_dtoa_r+0x5f8>)
 80097a0:	f006 020f 	and.w	r2, r6, #15
 80097a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097b0:	f7f6 ff22 	bl	80005f8 <__aeabi_dmul>
 80097b4:	e9cd 0100 	strd	r0, r1, [sp]
 80097b8:	1136      	asrs	r6, r6, #4
 80097ba:	2300      	movs	r3, #0
 80097bc:	2502      	movs	r5, #2
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d17f      	bne.n	80098c2 <_dtoa_r+0x49a>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e1      	bne.n	800978a <_dtoa_r+0x362>
 80097c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8087 	beq.w	80098dc <_dtoa_r+0x4b4>
 80097ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097d2:	2200      	movs	r2, #0
 80097d4:	4b93      	ldr	r3, [pc, #588]	; (8009a24 <_dtoa_r+0x5fc>)
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f97f 	bl	8000adc <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d07c      	beq.n	80098dc <_dtoa_r+0x4b4>
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	d079      	beq.n	80098dc <_dtoa_r+0x4b4>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd35      	ble.n	800985a <_dtoa_r+0x432>
 80097ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	4639      	mov	r1, r7
 80097f6:	2200      	movs	r2, #0
 80097f8:	4b8b      	ldr	r3, [pc, #556]	; (8009a28 <_dtoa_r+0x600>)
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 fefc 	bl	80005f8 <__aeabi_dmul>
 8009800:	e9cd 0100 	strd	r0, r1, [sp]
 8009804:	9f02      	ldr	r7, [sp, #8]
 8009806:	3501      	adds	r5, #1
 8009808:	4628      	mov	r0, r5
 800980a:	f7f6 fe8b 	bl	8000524 <__aeabi_i2d>
 800980e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009812:	f7f6 fef1 	bl	80005f8 <__aeabi_dmul>
 8009816:	2200      	movs	r2, #0
 8009818:	4b84      	ldr	r3, [pc, #528]	; (8009a2c <_dtoa_r+0x604>)
 800981a:	f7f6 fd37 	bl	800028c <__adddf3>
 800981e:	4605      	mov	r5, r0
 8009820:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009824:	2f00      	cmp	r7, #0
 8009826:	d15d      	bne.n	80098e4 <_dtoa_r+0x4bc>
 8009828:	2200      	movs	r2, #0
 800982a:	4b81      	ldr	r3, [pc, #516]	; (8009a30 <_dtoa_r+0x608>)
 800982c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009830:	f7f6 fd2a 	bl	8000288 <__aeabi_dsub>
 8009834:	462a      	mov	r2, r5
 8009836:	4633      	mov	r3, r6
 8009838:	e9cd 0100 	strd	r0, r1, [sp]
 800983c:	f7f7 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 8288 	bne.w	8009d56 <_dtoa_r+0x92e>
 8009846:	462a      	mov	r2, r5
 8009848:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800984c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009850:	f7f7 f944 	bl	8000adc <__aeabi_dcmplt>
 8009854:	2800      	cmp	r0, #0
 8009856:	f040 827c 	bne.w	8009d52 <_dtoa_r+0x92a>
 800985a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800985e:	e9cd 2300 	strd	r2, r3, [sp]
 8009862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009864:	2b00      	cmp	r3, #0
 8009866:	f2c0 8150 	blt.w	8009b0a <_dtoa_r+0x6e2>
 800986a:	f1ba 0f0e 	cmp.w	sl, #14
 800986e:	f300 814c 	bgt.w	8009b0a <_dtoa_r+0x6e2>
 8009872:	4b6a      	ldr	r3, [pc, #424]	; (8009a1c <_dtoa_r+0x5f4>)
 8009874:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009878:	ed93 7b00 	vldr	d7, [r3]
 800987c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800987e:	2b00      	cmp	r3, #0
 8009880:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009884:	f280 80d8 	bge.w	8009a38 <_dtoa_r+0x610>
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	f300 80d4 	bgt.w	8009a38 <_dtoa_r+0x610>
 8009890:	f040 825e 	bne.w	8009d50 <_dtoa_r+0x928>
 8009894:	2200      	movs	r2, #0
 8009896:	4b66      	ldr	r3, [pc, #408]	; (8009a30 <_dtoa_r+0x608>)
 8009898:	ec51 0b17 	vmov	r0, r1, d7
 800989c:	f7f6 feac 	bl	80005f8 <__aeabi_dmul>
 80098a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098a4:	f7f7 f92e 	bl	8000b04 <__aeabi_dcmpge>
 80098a8:	464f      	mov	r7, r9
 80098aa:	464e      	mov	r6, r9
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f040 8234 	bne.w	8009d1a <_dtoa_r+0x8f2>
 80098b2:	2331      	movs	r3, #49	; 0x31
 80098b4:	f10b 0501 	add.w	r5, fp, #1
 80098b8:	f88b 3000 	strb.w	r3, [fp]
 80098bc:	f10a 0a01 	add.w	sl, sl, #1
 80098c0:	e22f      	b.n	8009d22 <_dtoa_r+0x8fa>
 80098c2:	07f2      	lsls	r2, r6, #31
 80098c4:	d505      	bpl.n	80098d2 <_dtoa_r+0x4aa>
 80098c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	3501      	adds	r5, #1
 80098d0:	2301      	movs	r3, #1
 80098d2:	1076      	asrs	r6, r6, #1
 80098d4:	3708      	adds	r7, #8
 80098d6:	e772      	b.n	80097be <_dtoa_r+0x396>
 80098d8:	2502      	movs	r5, #2
 80098da:	e774      	b.n	80097c6 <_dtoa_r+0x39e>
 80098dc:	f8cd a020 	str.w	sl, [sp, #32]
 80098e0:	464f      	mov	r7, r9
 80098e2:	e791      	b.n	8009808 <_dtoa_r+0x3e0>
 80098e4:	4b4d      	ldr	r3, [pc, #308]	; (8009a1c <_dtoa_r+0x5f4>)
 80098e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80098ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d047      	beq.n	8009984 <_dtoa_r+0x55c>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	2000      	movs	r0, #0
 80098fa:	494e      	ldr	r1, [pc, #312]	; (8009a34 <_dtoa_r+0x60c>)
 80098fc:	f7f6 ffa6 	bl	800084c <__aeabi_ddiv>
 8009900:	462a      	mov	r2, r5
 8009902:	4633      	mov	r3, r6
 8009904:	f7f6 fcc0 	bl	8000288 <__aeabi_dsub>
 8009908:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800990c:	465d      	mov	r5, fp
 800990e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009912:	f7f7 f921 	bl	8000b58 <__aeabi_d2iz>
 8009916:	4606      	mov	r6, r0
 8009918:	f7f6 fe04 	bl	8000524 <__aeabi_i2d>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009924:	f7f6 fcb0 	bl	8000288 <__aeabi_dsub>
 8009928:	3630      	adds	r6, #48	; 0x30
 800992a:	f805 6b01 	strb.w	r6, [r5], #1
 800992e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009932:	e9cd 0100 	strd	r0, r1, [sp]
 8009936:	f7f7 f8d1 	bl	8000adc <__aeabi_dcmplt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d163      	bne.n	8009a06 <_dtoa_r+0x5de>
 800993e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009942:	2000      	movs	r0, #0
 8009944:	4937      	ldr	r1, [pc, #220]	; (8009a24 <_dtoa_r+0x5fc>)
 8009946:	f7f6 fc9f 	bl	8000288 <__aeabi_dsub>
 800994a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800994e:	f7f7 f8c5 	bl	8000adc <__aeabi_dcmplt>
 8009952:	2800      	cmp	r0, #0
 8009954:	f040 80b7 	bne.w	8009ac6 <_dtoa_r+0x69e>
 8009958:	eba5 030b 	sub.w	r3, r5, fp
 800995c:	429f      	cmp	r7, r3
 800995e:	f77f af7c 	ble.w	800985a <_dtoa_r+0x432>
 8009962:	2200      	movs	r2, #0
 8009964:	4b30      	ldr	r3, [pc, #192]	; (8009a28 <_dtoa_r+0x600>)
 8009966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996a:	f7f6 fe45 	bl	80005f8 <__aeabi_dmul>
 800996e:	2200      	movs	r2, #0
 8009970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009974:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <_dtoa_r+0x600>)
 8009976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800997a:	f7f6 fe3d 	bl	80005f8 <__aeabi_dmul>
 800997e:	e9cd 0100 	strd	r0, r1, [sp]
 8009982:	e7c4      	b.n	800990e <_dtoa_r+0x4e6>
 8009984:	462a      	mov	r2, r5
 8009986:	4633      	mov	r3, r6
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009990:	eb0b 0507 	add.w	r5, fp, r7
 8009994:	465e      	mov	r6, fp
 8009996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800999a:	f7f7 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800999e:	4607      	mov	r7, r0
 80099a0:	f7f6 fdc0 	bl	8000524 <__aeabi_i2d>
 80099a4:	3730      	adds	r7, #48	; 0x30
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ae:	f7f6 fc6b 	bl	8000288 <__aeabi_dsub>
 80099b2:	f806 7b01 	strb.w	r7, [r6], #1
 80099b6:	42ae      	cmp	r6, r5
 80099b8:	e9cd 0100 	strd	r0, r1, [sp]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	d126      	bne.n	8009a10 <_dtoa_r+0x5e8>
 80099c2:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <_dtoa_r+0x60c>)
 80099c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099c8:	f7f6 fc60 	bl	800028c <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099d4:	f7f7 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d174      	bne.n	8009ac6 <_dtoa_r+0x69e>
 80099dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099e0:	2000      	movs	r0, #0
 80099e2:	4914      	ldr	r1, [pc, #80]	; (8009a34 <_dtoa_r+0x60c>)
 80099e4:	f7f6 fc50 	bl	8000288 <__aeabi_dsub>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099f0:	f7f7 f874 	bl	8000adc <__aeabi_dcmplt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f43f af30 	beq.w	800985a <_dtoa_r+0x432>
 80099fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099fe:	2b30      	cmp	r3, #48	; 0x30
 8009a00:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a04:	d002      	beq.n	8009a0c <_dtoa_r+0x5e4>
 8009a06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a0a:	e04a      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	e7f4      	b.n	80099fa <_dtoa_r+0x5d2>
 8009a10:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <_dtoa_r+0x600>)
 8009a12:	f7f6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8009a16:	e9cd 0100 	strd	r0, r1, [sp]
 8009a1a:	e7bc      	b.n	8009996 <_dtoa_r+0x56e>
 8009a1c:	0800b938 	.word	0x0800b938
 8009a20:	0800b910 	.word	0x0800b910
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	40240000 	.word	0x40240000
 8009a2c:	401c0000 	.word	0x401c0000
 8009a30:	40140000 	.word	0x40140000
 8009a34:	3fe00000 	.word	0x3fe00000
 8009a38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a3c:	465d      	mov	r5, fp
 8009a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a42:	4630      	mov	r0, r6
 8009a44:	4639      	mov	r1, r7
 8009a46:	f7f6 ff01 	bl	800084c <__aeabi_ddiv>
 8009a4a:	f7f7 f885 	bl	8000b58 <__aeabi_d2iz>
 8009a4e:	4680      	mov	r8, r0
 8009a50:	f7f6 fd68 	bl	8000524 <__aeabi_i2d>
 8009a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a58:	f7f6 fdce 	bl	80005f8 <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009a68:	f7f6 fc0e 	bl	8000288 <__aeabi_dsub>
 8009a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a70:	eba5 060b 	sub.w	r6, r5, fp
 8009a74:	45b1      	cmp	r9, r6
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	d139      	bne.n	8009af0 <_dtoa_r+0x6c8>
 8009a7c:	f7f6 fc06 	bl	800028c <__adddf3>
 8009a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	f7f7 f846 	bl	8000b18 <__aeabi_dcmpgt>
 8009a8c:	b9c8      	cbnz	r0, 8009ac2 <_dtoa_r+0x69a>
 8009a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f7 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a9a:	b110      	cbz	r0, 8009aa2 <_dtoa_r+0x67a>
 8009a9c:	f018 0f01 	tst.w	r8, #1
 8009aa0:	d10f      	bne.n	8009ac2 <_dtoa_r+0x69a>
 8009aa2:	9904      	ldr	r1, [sp, #16]
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fcaa 	bl	800a3fe <_Bfree>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aae:	702b      	strb	r3, [r5, #0]
 8009ab0:	f10a 0301 	add.w	r3, sl, #1
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8241 	beq.w	8009f40 <_dtoa_r+0xb18>
 8009abe:	601d      	str	r5, [r3, #0]
 8009ac0:	e23e      	b.n	8009f40 <_dtoa_r+0xb18>
 8009ac2:	f8cd a020 	str.w	sl, [sp, #32]
 8009ac6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009aca:	2a39      	cmp	r2, #57	; 0x39
 8009acc:	f105 33ff 	add.w	r3, r5, #4294967295
 8009ad0:	d108      	bne.n	8009ae4 <_dtoa_r+0x6bc>
 8009ad2:	459b      	cmp	fp, r3
 8009ad4:	d10a      	bne.n	8009aec <_dtoa_r+0x6c4>
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	2330      	movs	r3, #48	; 0x30
 8009ade:	f88b 3000 	strb.w	r3, [fp]
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	e78c      	b.n	8009a06 <_dtoa_r+0x5de>
 8009aec:	461d      	mov	r5, r3
 8009aee:	e7ea      	b.n	8009ac6 <_dtoa_r+0x69e>
 8009af0:	2200      	movs	r2, #0
 8009af2:	4b9b      	ldr	r3, [pc, #620]	; (8009d60 <_dtoa_r+0x938>)
 8009af4:	f7f6 fd80 	bl	80005f8 <__aeabi_dmul>
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	f7f6 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d09a      	beq.n	8009a3e <_dtoa_r+0x616>
 8009b08:	e7cb      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	f000 808b 	beq.w	8009c28 <_dtoa_r+0x800>
 8009b12:	9a06      	ldr	r2, [sp, #24]
 8009b14:	2a01      	cmp	r2, #1
 8009b16:	dc6e      	bgt.n	8009bf6 <_dtoa_r+0x7ce>
 8009b18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d067      	beq.n	8009bee <_dtoa_r+0x7c6>
 8009b1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b22:	9f07      	ldr	r7, [sp, #28]
 8009b24:	9d05      	ldr	r5, [sp, #20]
 8009b26:	9a05      	ldr	r2, [sp, #20]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	441a      	add	r2, r3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	9205      	str	r2, [sp, #20]
 8009b30:	4498      	add	r8, r3
 8009b32:	f000 fd04 	bl	800a53e <__i2b>
 8009b36:	4606      	mov	r6, r0
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	dd0c      	ble.n	8009b56 <_dtoa_r+0x72e>
 8009b3c:	f1b8 0f00 	cmp.w	r8, #0
 8009b40:	dd09      	ble.n	8009b56 <_dtoa_r+0x72e>
 8009b42:	4545      	cmp	r5, r8
 8009b44:	9a05      	ldr	r2, [sp, #20]
 8009b46:	462b      	mov	r3, r5
 8009b48:	bfa8      	it	ge
 8009b4a:	4643      	movge	r3, r8
 8009b4c:	1ad2      	subs	r2, r2, r3
 8009b4e:	9205      	str	r2, [sp, #20]
 8009b50:	1aed      	subs	r5, r5, r3
 8009b52:	eba8 0803 	sub.w	r8, r8, r3
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	b1eb      	cbz	r3, 8009b96 <_dtoa_r+0x76e>
 8009b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d067      	beq.n	8009c30 <_dtoa_r+0x808>
 8009b60:	b18f      	cbz	r7, 8009b86 <_dtoa_r+0x75e>
 8009b62:	4631      	mov	r1, r6
 8009b64:	463a      	mov	r2, r7
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 fd88 	bl	800a67c <__pow5mult>
 8009b6c:	9a04      	ldr	r2, [sp, #16]
 8009b6e:	4601      	mov	r1, r0
 8009b70:	4606      	mov	r6, r0
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fcec 	bl	800a550 <__multiply>
 8009b78:	9904      	ldr	r1, [sp, #16]
 8009b7a:	9008      	str	r0, [sp, #32]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fc3e 	bl	800a3fe <_Bfree>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	1bda      	subs	r2, r3, r7
 8009b8a:	d004      	beq.n	8009b96 <_dtoa_r+0x76e>
 8009b8c:	9904      	ldr	r1, [sp, #16]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fd74 	bl	800a67c <__pow5mult>
 8009b94:	9004      	str	r0, [sp, #16]
 8009b96:	2101      	movs	r1, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fcd0 	bl	800a53e <__i2b>
 8009b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 81d0 	beq.w	8009f48 <_dtoa_r+0xb20>
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4601      	mov	r1, r0
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fd65 	bl	800a67c <__pow5mult>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	dc40      	bgt.n	8009c3c <_dtoa_r+0x814>
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d139      	bne.n	8009c34 <_dtoa_r+0x80c>
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d136      	bne.n	8009c38 <_dtoa_r+0x810>
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	0d1b      	lsrs	r3, r3, #20
 8009bd2:	051b      	lsls	r3, r3, #20
 8009bd4:	b12b      	cbz	r3, 8009be2 <_dtoa_r+0x7ba>
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	f108 0801 	add.w	r8, r8, #1
 8009be0:	2301      	movs	r3, #1
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d12a      	bne.n	8009c40 <_dtoa_r+0x818>
 8009bea:	2001      	movs	r0, #1
 8009bec:	e030      	b.n	8009c50 <_dtoa_r+0x828>
 8009bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bf4:	e795      	b.n	8009b22 <_dtoa_r+0x6fa>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	f109 37ff 	add.w	r7, r9, #4294967295
 8009bfc:	42bb      	cmp	r3, r7
 8009bfe:	bfbf      	itttt	lt
 8009c00:	9b07      	ldrlt	r3, [sp, #28]
 8009c02:	9707      	strlt	r7, [sp, #28]
 8009c04:	1afa      	sublt	r2, r7, r3
 8009c06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c08:	bfbb      	ittet	lt
 8009c0a:	189b      	addlt	r3, r3, r2
 8009c0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c0e:	1bdf      	subge	r7, r3, r7
 8009c10:	2700      	movlt	r7, #0
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
 8009c16:	bfb5      	itete	lt
 8009c18:	9b05      	ldrlt	r3, [sp, #20]
 8009c1a:	9d05      	ldrge	r5, [sp, #20]
 8009c1c:	eba3 0509 	sublt.w	r5, r3, r9
 8009c20:	464b      	movge	r3, r9
 8009c22:	bfb8      	it	lt
 8009c24:	2300      	movlt	r3, #0
 8009c26:	e77e      	b.n	8009b26 <_dtoa_r+0x6fe>
 8009c28:	9f07      	ldr	r7, [sp, #28]
 8009c2a:	9d05      	ldr	r5, [sp, #20]
 8009c2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c2e:	e783      	b.n	8009b38 <_dtoa_r+0x710>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	e7ab      	b.n	8009b8c <_dtoa_r+0x764>
 8009c34:	2300      	movs	r3, #0
 8009c36:	e7d4      	b.n	8009be2 <_dtoa_r+0x7ba>
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	e7d2      	b.n	8009be2 <_dtoa_r+0x7ba>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009c46:	6918      	ldr	r0, [r3, #16]
 8009c48:	f000 fc2b 	bl	800a4a2 <__hi0bits>
 8009c4c:	f1c0 0020 	rsb	r0, r0, #32
 8009c50:	4440      	add	r0, r8
 8009c52:	f010 001f 	ands.w	r0, r0, #31
 8009c56:	d047      	beq.n	8009ce8 <_dtoa_r+0x8c0>
 8009c58:	f1c0 0320 	rsb	r3, r0, #32
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	dd3b      	ble.n	8009cd8 <_dtoa_r+0x8b0>
 8009c60:	9b05      	ldr	r3, [sp, #20]
 8009c62:	f1c0 001c 	rsb	r0, r0, #28
 8009c66:	4403      	add	r3, r0
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	4405      	add	r5, r0
 8009c6c:	4480      	add	r8, r0
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dd05      	ble.n	8009c80 <_dtoa_r+0x858>
 8009c74:	461a      	mov	r2, r3
 8009c76:	9904      	ldr	r1, [sp, #16]
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 fd4d 	bl	800a718 <__lshift>
 8009c7e:	9004      	str	r0, [sp, #16]
 8009c80:	f1b8 0f00 	cmp.w	r8, #0
 8009c84:	dd05      	ble.n	8009c92 <_dtoa_r+0x86a>
 8009c86:	4639      	mov	r1, r7
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fd44 	bl	800a718 <__lshift>
 8009c90:	4607      	mov	r7, r0
 8009c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c94:	b353      	cbz	r3, 8009cec <_dtoa_r+0x8c4>
 8009c96:	4639      	mov	r1, r7
 8009c98:	9804      	ldr	r0, [sp, #16]
 8009c9a:	f000 fd91 	bl	800a7c0 <__mcmp>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	da24      	bge.n	8009cec <_dtoa_r+0x8c4>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	220a      	movs	r2, #10
 8009ca6:	9904      	ldr	r1, [sp, #16]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fbbf 	bl	800a42c <__multadd>
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	9004      	str	r0, [sp, #16]
 8009cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 814d 	beq.w	8009f56 <_dtoa_r+0xb2e>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fbb2 	bl	800a42c <__multadd>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	4606      	mov	r6, r0
 8009cce:	dc4f      	bgt.n	8009d70 <_dtoa_r+0x948>
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	dd4c      	ble.n	8009d70 <_dtoa_r+0x948>
 8009cd6:	e011      	b.n	8009cfc <_dtoa_r+0x8d4>
 8009cd8:	d0c9      	beq.n	8009c6e <_dtoa_r+0x846>
 8009cda:	9a05      	ldr	r2, [sp, #20]
 8009cdc:	331c      	adds	r3, #28
 8009cde:	441a      	add	r2, r3
 8009ce0:	9205      	str	r2, [sp, #20]
 8009ce2:	441d      	add	r5, r3
 8009ce4:	4498      	add	r8, r3
 8009ce6:	e7c2      	b.n	8009c6e <_dtoa_r+0x846>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	e7f6      	b.n	8009cda <_dtoa_r+0x8b2>
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	dc38      	bgt.n	8009d64 <_dtoa_r+0x93c>
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	dd35      	ble.n	8009d64 <_dtoa_r+0x93c>
 8009cf8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cfc:	9b02      	ldr	r3, [sp, #8]
 8009cfe:	b963      	cbnz	r3, 8009d1a <_dtoa_r+0x8f2>
 8009d00:	4639      	mov	r1, r7
 8009d02:	2205      	movs	r2, #5
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fb91 	bl	800a42c <__multadd>
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	9804      	ldr	r0, [sp, #16]
 8009d10:	f000 fd56 	bl	800a7c0 <__mcmp>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f73f adcc 	bgt.w	80098b2 <_dtoa_r+0x48a>
 8009d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1c:	465d      	mov	r5, fp
 8009d1e:	ea6f 0a03 	mvn.w	sl, r3
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	4639      	mov	r1, r7
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fb68 	bl	800a3fe <_Bfree>
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	f43f aeb7 	beq.w	8009aa2 <_dtoa_r+0x67a>
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	d005      	beq.n	8009d46 <_dtoa_r+0x91e>
 8009d3a:	45b1      	cmp	r9, r6
 8009d3c:	d003      	beq.n	8009d46 <_dtoa_r+0x91e>
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fb5c 	bl	800a3fe <_Bfree>
 8009d46:	4631      	mov	r1, r6
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fb58 	bl	800a3fe <_Bfree>
 8009d4e:	e6a8      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009d50:	2700      	movs	r7, #0
 8009d52:	463e      	mov	r6, r7
 8009d54:	e7e1      	b.n	8009d1a <_dtoa_r+0x8f2>
 8009d56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d5a:	463e      	mov	r6, r7
 8009d5c:	e5a9      	b.n	80098b2 <_dtoa_r+0x48a>
 8009d5e:	bf00      	nop
 8009d60:	40240000 	.word	0x40240000
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80fa 	beq.w	8009f64 <_dtoa_r+0xb3c>
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x958>
 8009d74:	4631      	mov	r1, r6
 8009d76:	462a      	mov	r2, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fccd 	bl	800a718 <__lshift>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d04c      	beq.n	8009e20 <_dtoa_r+0x9f8>
 8009d86:	6871      	ldr	r1, [r6, #4]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fb04 	bl	800a396 <_Balloc>
 8009d8e:	6932      	ldr	r2, [r6, #16]
 8009d90:	3202      	adds	r2, #2
 8009d92:	4605      	mov	r5, r0
 8009d94:	0092      	lsls	r2, r2, #2
 8009d96:	f106 010c 	add.w	r1, r6, #12
 8009d9a:	300c      	adds	r0, #12
 8009d9c:	f000 faf0 	bl	800a380 <memcpy>
 8009da0:	2201      	movs	r2, #1
 8009da2:	4629      	mov	r1, r5
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 fcb7 	bl	800a718 <__lshift>
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	f8cd b014 	str.w	fp, [sp, #20]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	46b1      	mov	r9, r6
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	4606      	mov	r6, r0
 8009dba:	4639      	mov	r1, r7
 8009dbc:	9804      	ldr	r0, [sp, #16]
 8009dbe:	f7ff faa5 	bl	800930c <quorem>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dca:	9804      	ldr	r0, [sp, #16]
 8009dcc:	f000 fcf8 	bl	800a7c0 <__mcmp>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	9000      	str	r0, [sp, #0]
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fd0c 	bl	800a7f4 <__mdiff>
 8009ddc:	68c3      	ldr	r3, [r0, #12]
 8009dde:	4602      	mov	r2, r0
 8009de0:	bb03      	cbnz	r3, 8009e24 <_dtoa_r+0x9fc>
 8009de2:	4601      	mov	r1, r0
 8009de4:	9008      	str	r0, [sp, #32]
 8009de6:	9804      	ldr	r0, [sp, #16]
 8009de8:	f000 fcea 	bl	800a7c0 <__mcmp>
 8009dec:	9a08      	ldr	r2, [sp, #32]
 8009dee:	4603      	mov	r3, r0
 8009df0:	4611      	mov	r1, r2
 8009df2:	4620      	mov	r0, r4
 8009df4:	9308      	str	r3, [sp, #32]
 8009df6:	f000 fb02 	bl	800a3fe <_Bfree>
 8009dfa:	9b08      	ldr	r3, [sp, #32]
 8009dfc:	b9a3      	cbnz	r3, 8009e28 <_dtoa_r+0xa00>
 8009dfe:	9a06      	ldr	r2, [sp, #24]
 8009e00:	b992      	cbnz	r2, 8009e28 <_dtoa_r+0xa00>
 8009e02:	9a07      	ldr	r2, [sp, #28]
 8009e04:	b982      	cbnz	r2, 8009e28 <_dtoa_r+0xa00>
 8009e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e0a:	d029      	beq.n	8009e60 <_dtoa_r+0xa38>
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dd01      	ble.n	8009e16 <_dtoa_r+0x9ee>
 8009e12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	1c5d      	adds	r5, r3, #1
 8009e1a:	f883 8000 	strb.w	r8, [r3]
 8009e1e:	e782      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009e20:	4630      	mov	r0, r6
 8009e22:	e7c2      	b.n	8009daa <_dtoa_r+0x982>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e7e3      	b.n	8009df0 <_dtoa_r+0x9c8>
 8009e28:	9a00      	ldr	r2, [sp, #0]
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	db04      	blt.n	8009e38 <_dtoa_r+0xa10>
 8009e2e:	d125      	bne.n	8009e7c <_dtoa_r+0xa54>
 8009e30:	9a06      	ldr	r2, [sp, #24]
 8009e32:	bb1a      	cbnz	r2, 8009e7c <_dtoa_r+0xa54>
 8009e34:	9a07      	ldr	r2, [sp, #28]
 8009e36:	bb0a      	cbnz	r2, 8009e7c <_dtoa_r+0xa54>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	ddec      	ble.n	8009e16 <_dtoa_r+0x9ee>
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	9904      	ldr	r1, [sp, #16]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fc69 	bl	800a718 <__lshift>
 8009e46:	4639      	mov	r1, r7
 8009e48:	9004      	str	r0, [sp, #16]
 8009e4a:	f000 fcb9 	bl	800a7c0 <__mcmp>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	dc03      	bgt.n	8009e5a <_dtoa_r+0xa32>
 8009e52:	d1e0      	bne.n	8009e16 <_dtoa_r+0x9ee>
 8009e54:	f018 0f01 	tst.w	r8, #1
 8009e58:	d0dd      	beq.n	8009e16 <_dtoa_r+0x9ee>
 8009e5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e5e:	d1d8      	bne.n	8009e12 <_dtoa_r+0x9ea>
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	9a05      	ldr	r2, [sp, #20]
 8009e64:	1c5d      	adds	r5, r3, #1
 8009e66:	2339      	movs	r3, #57	; 0x39
 8009e68:	7013      	strb	r3, [r2, #0]
 8009e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e6e:	2b39      	cmp	r3, #57	; 0x39
 8009e70:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e74:	d04f      	beq.n	8009f16 <_dtoa_r+0xaee>
 8009e76:	3301      	adds	r3, #1
 8009e78:	7013      	strb	r3, [r2, #0]
 8009e7a:	e754      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009e7c:	9a05      	ldr	r2, [sp, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f102 0501 	add.w	r5, r2, #1
 8009e84:	dd06      	ble.n	8009e94 <_dtoa_r+0xa6c>
 8009e86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e8a:	d0e9      	beq.n	8009e60 <_dtoa_r+0xa38>
 8009e8c:	f108 0801 	add.w	r8, r8, #1
 8009e90:	9b05      	ldr	r3, [sp, #20]
 8009e92:	e7c2      	b.n	8009e1a <_dtoa_r+0x9f2>
 8009e94:	9a02      	ldr	r2, [sp, #8]
 8009e96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009e9a:	eba5 030b 	sub.w	r3, r5, fp
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d021      	beq.n	8009ee6 <_dtoa_r+0xabe>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	220a      	movs	r2, #10
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fabf 	bl	800a42c <__multadd>
 8009eae:	45b1      	cmp	r9, r6
 8009eb0:	9004      	str	r0, [sp, #16]
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	f04f 020a 	mov.w	r2, #10
 8009eba:	4649      	mov	r1, r9
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	d105      	bne.n	8009ecc <_dtoa_r+0xaa4>
 8009ec0:	f000 fab4 	bl	800a42c <__multadd>
 8009ec4:	4681      	mov	r9, r0
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	9505      	str	r5, [sp, #20]
 8009eca:	e776      	b.n	8009dba <_dtoa_r+0x992>
 8009ecc:	f000 faae 	bl	800a42c <__multadd>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4681      	mov	r9, r0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 faa7 	bl	800a42c <__multadd>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	e7f2      	b.n	8009ec8 <_dtoa_r+0xaa0>
 8009ee2:	f04f 0900 	mov.w	r9, #0
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	9904      	ldr	r1, [sp, #16]
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fc14 	bl	800a718 <__lshift>
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	9004      	str	r0, [sp, #16]
 8009ef4:	f000 fc64 	bl	800a7c0 <__mcmp>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	dcb6      	bgt.n	8009e6a <_dtoa_r+0xa42>
 8009efc:	d102      	bne.n	8009f04 <_dtoa_r+0xadc>
 8009efe:	f018 0f01 	tst.w	r8, #1
 8009f02:	d1b2      	bne.n	8009e6a <_dtoa_r+0xa42>
 8009f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f08:	2b30      	cmp	r3, #48	; 0x30
 8009f0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f0e:	f47f af0a 	bne.w	8009d26 <_dtoa_r+0x8fe>
 8009f12:	4615      	mov	r5, r2
 8009f14:	e7f6      	b.n	8009f04 <_dtoa_r+0xadc>
 8009f16:	4593      	cmp	fp, r2
 8009f18:	d105      	bne.n	8009f26 <_dtoa_r+0xafe>
 8009f1a:	2331      	movs	r3, #49	; 0x31
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	f88b 3000 	strb.w	r3, [fp]
 8009f24:	e6ff      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009f26:	4615      	mov	r5, r2
 8009f28:	e79f      	b.n	8009e6a <_dtoa_r+0xa42>
 8009f2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009f90 <_dtoa_r+0xb68>
 8009f2e:	e007      	b.n	8009f40 <_dtoa_r+0xb18>
 8009f30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009f94 <_dtoa_r+0xb6c>
 8009f36:	b11b      	cbz	r3, 8009f40 <_dtoa_r+0xb18>
 8009f38:	f10b 0308 	add.w	r3, fp, #8
 8009f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	4658      	mov	r0, fp
 8009f42:	b017      	add	sp, #92	; 0x5c
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	9b06      	ldr	r3, [sp, #24]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	f77f ae35 	ble.w	8009bba <_dtoa_r+0x792>
 8009f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	e649      	b.n	8009bea <_dtoa_r+0x7c2>
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dc03      	bgt.n	8009f64 <_dtoa_r+0xb3c>
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	f73f aecc 	bgt.w	8009cfc <_dtoa_r+0x8d4>
 8009f64:	465d      	mov	r5, fp
 8009f66:	4639      	mov	r1, r7
 8009f68:	9804      	ldr	r0, [sp, #16]
 8009f6a:	f7ff f9cf 	bl	800930c <quorem>
 8009f6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f72:	f805 8b01 	strb.w	r8, [r5], #1
 8009f76:	9a02      	ldr	r2, [sp, #8]
 8009f78:	eba5 030b 	sub.w	r3, r5, fp
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	ddb0      	ble.n	8009ee2 <_dtoa_r+0xaba>
 8009f80:	2300      	movs	r3, #0
 8009f82:	220a      	movs	r2, #10
 8009f84:	9904      	ldr	r1, [sp, #16]
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fa50 	bl	800a42c <__multadd>
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	e7ea      	b.n	8009f66 <_dtoa_r+0xb3e>
 8009f90:	0800b878 	.word	0x0800b878
 8009f94:	0800b89c 	.word	0x0800b89c

08009f98 <__sflush_r>:
 8009f98:	898a      	ldrh	r2, [r1, #12]
 8009f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	0710      	lsls	r0, r2, #28
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	d458      	bmi.n	800a058 <__sflush_r+0xc0>
 8009fa6:	684b      	ldr	r3, [r1, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dc05      	bgt.n	8009fb8 <__sflush_r+0x20>
 8009fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dc02      	bgt.n	8009fb8 <__sflush_r+0x20>
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d0f9      	beq.n	8009fb2 <__sflush_r+0x1a>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fc4:	682f      	ldr	r7, [r5, #0]
 8009fc6:	6a21      	ldr	r1, [r4, #32]
 8009fc8:	602b      	str	r3, [r5, #0]
 8009fca:	d032      	beq.n	800a032 <__sflush_r+0x9a>
 8009fcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	075a      	lsls	r2, r3, #29
 8009fd2:	d505      	bpl.n	8009fe0 <__sflush_r+0x48>
 8009fd4:	6863      	ldr	r3, [r4, #4]
 8009fd6:	1ac0      	subs	r0, r0, r3
 8009fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fda:	b10b      	cbz	r3, 8009fe0 <__sflush_r+0x48>
 8009fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fde:	1ac0      	subs	r0, r0, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe6:	6a21      	ldr	r1, [r4, #32]
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b0      	blx	r6
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	d106      	bne.n	800a000 <__sflush_r+0x68>
 8009ff2:	6829      	ldr	r1, [r5, #0]
 8009ff4:	291d      	cmp	r1, #29
 8009ff6:	d848      	bhi.n	800a08a <__sflush_r+0xf2>
 8009ff8:	4a29      	ldr	r2, [pc, #164]	; (800a0a0 <__sflush_r+0x108>)
 8009ffa:	40ca      	lsrs	r2, r1
 8009ffc:	07d6      	lsls	r6, r2, #31
 8009ffe:	d544      	bpl.n	800a08a <__sflush_r+0xf2>
 800a000:	2200      	movs	r2, #0
 800a002:	6062      	str	r2, [r4, #4]
 800a004:	04d9      	lsls	r1, r3, #19
 800a006:	6922      	ldr	r2, [r4, #16]
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	d504      	bpl.n	800a016 <__sflush_r+0x7e>
 800a00c:	1c42      	adds	r2, r0, #1
 800a00e:	d101      	bne.n	800a014 <__sflush_r+0x7c>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b903      	cbnz	r3, 800a016 <__sflush_r+0x7e>
 800a014:	6560      	str	r0, [r4, #84]	; 0x54
 800a016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a018:	602f      	str	r7, [r5, #0]
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d0c9      	beq.n	8009fb2 <__sflush_r+0x1a>
 800a01e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a022:	4299      	cmp	r1, r3
 800a024:	d002      	beq.n	800a02c <__sflush_r+0x94>
 800a026:	4628      	mov	r0, r5
 800a028:	f000 fc9e 	bl	800a968 <_free_r>
 800a02c:	2000      	movs	r0, #0
 800a02e:	6360      	str	r0, [r4, #52]	; 0x34
 800a030:	e7c0      	b.n	8009fb4 <__sflush_r+0x1c>
 800a032:	2301      	movs	r3, #1
 800a034:	4628      	mov	r0, r5
 800a036:	47b0      	blx	r6
 800a038:	1c41      	adds	r1, r0, #1
 800a03a:	d1c8      	bne.n	8009fce <__sflush_r+0x36>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0c5      	beq.n	8009fce <__sflush_r+0x36>
 800a042:	2b1d      	cmp	r3, #29
 800a044:	d001      	beq.n	800a04a <__sflush_r+0xb2>
 800a046:	2b16      	cmp	r3, #22
 800a048:	d101      	bne.n	800a04e <__sflush_r+0xb6>
 800a04a:	602f      	str	r7, [r5, #0]
 800a04c:	e7b1      	b.n	8009fb2 <__sflush_r+0x1a>
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	e7ad      	b.n	8009fb4 <__sflush_r+0x1c>
 800a058:	690f      	ldr	r7, [r1, #16]
 800a05a:	2f00      	cmp	r7, #0
 800a05c:	d0a9      	beq.n	8009fb2 <__sflush_r+0x1a>
 800a05e:	0793      	lsls	r3, r2, #30
 800a060:	680e      	ldr	r6, [r1, #0]
 800a062:	bf08      	it	eq
 800a064:	694b      	ldreq	r3, [r1, #20]
 800a066:	600f      	str	r7, [r1, #0]
 800a068:	bf18      	it	ne
 800a06a:	2300      	movne	r3, #0
 800a06c:	eba6 0807 	sub.w	r8, r6, r7
 800a070:	608b      	str	r3, [r1, #8]
 800a072:	f1b8 0f00 	cmp.w	r8, #0
 800a076:	dd9c      	ble.n	8009fb2 <__sflush_r+0x1a>
 800a078:	4643      	mov	r3, r8
 800a07a:	463a      	mov	r2, r7
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a080:	4628      	mov	r0, r5
 800a082:	47b0      	blx	r6
 800a084:	2800      	cmp	r0, #0
 800a086:	dc06      	bgt.n	800a096 <__sflush_r+0xfe>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a08e:	81a3      	strh	r3, [r4, #12]
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	e78e      	b.n	8009fb4 <__sflush_r+0x1c>
 800a096:	4407      	add	r7, r0
 800a098:	eba8 0800 	sub.w	r8, r8, r0
 800a09c:	e7e9      	b.n	800a072 <__sflush_r+0xda>
 800a09e:	bf00      	nop
 800a0a0:	20400001 	.word	0x20400001

0800a0a4 <_fflush_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	690b      	ldr	r3, [r1, #16]
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	b1db      	cbz	r3, 800a0e6 <_fflush_r+0x42>
 800a0ae:	b118      	cbz	r0, 800a0b8 <_fflush_r+0x14>
 800a0b0:	6983      	ldr	r3, [r0, #24]
 800a0b2:	b90b      	cbnz	r3, 800a0b8 <_fflush_r+0x14>
 800a0b4:	f000 f860 	bl	800a178 <__sinit>
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <_fflush_r+0x48>)
 800a0ba:	429c      	cmp	r4, r3
 800a0bc:	d109      	bne.n	800a0d2 <_fflush_r+0x2e>
 800a0be:	686c      	ldr	r4, [r5, #4]
 800a0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c4:	b17b      	cbz	r3, 800a0e6 <_fflush_r+0x42>
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ce:	f7ff bf63 	b.w	8009f98 <__sflush_r>
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <_fflush_r+0x4c>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	d101      	bne.n	800a0dc <_fflush_r+0x38>
 800a0d8:	68ac      	ldr	r4, [r5, #8]
 800a0da:	e7f1      	b.n	800a0c0 <_fflush_r+0x1c>
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <_fflush_r+0x50>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	bf08      	it	eq
 800a0e2:	68ec      	ldreq	r4, [r5, #12]
 800a0e4:	e7ec      	b.n	800a0c0 <_fflush_r+0x1c>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	0800b8cc 	.word	0x0800b8cc
 800a0f0:	0800b8ec 	.word	0x0800b8ec
 800a0f4:	0800b8ac 	.word	0x0800b8ac

0800a0f8 <std>:
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a102:	6083      	str	r3, [r0, #8]
 800a104:	8181      	strh	r1, [r0, #12]
 800a106:	6643      	str	r3, [r0, #100]	; 0x64
 800a108:	81c2      	strh	r2, [r0, #14]
 800a10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a10e:	6183      	str	r3, [r0, #24]
 800a110:	4619      	mov	r1, r3
 800a112:	2208      	movs	r2, #8
 800a114:	305c      	adds	r0, #92	; 0x5c
 800a116:	f7fe fb59 	bl	80087cc <memset>
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <std+0x38>)
 800a11c:	6263      	str	r3, [r4, #36]	; 0x24
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <std+0x3c>)
 800a120:	62a3      	str	r3, [r4, #40]	; 0x28
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <std+0x40>)
 800a124:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <std+0x44>)
 800a128:	6224      	str	r4, [r4, #32]
 800a12a:	6323      	str	r3, [r4, #48]	; 0x30
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	bf00      	nop
 800a130:	0800ad59 	.word	0x0800ad59
 800a134:	0800ad7b 	.word	0x0800ad7b
 800a138:	0800adb3 	.word	0x0800adb3
 800a13c:	0800add7 	.word	0x0800add7

0800a140 <_cleanup_r>:
 800a140:	4901      	ldr	r1, [pc, #4]	; (800a148 <_cleanup_r+0x8>)
 800a142:	f000 b885 	b.w	800a250 <_fwalk_reent>
 800a146:	bf00      	nop
 800a148:	0800a0a5 	.word	0x0800a0a5

0800a14c <__sfmoreglue>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	1e4a      	subs	r2, r1, #1
 800a150:	2568      	movs	r5, #104	; 0x68
 800a152:	4355      	muls	r5, r2
 800a154:	460e      	mov	r6, r1
 800a156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a15a:	f000 fc53 	bl	800aa04 <_malloc_r>
 800a15e:	4604      	mov	r4, r0
 800a160:	b140      	cbz	r0, 800a174 <__sfmoreglue+0x28>
 800a162:	2100      	movs	r1, #0
 800a164:	e9c0 1600 	strd	r1, r6, [r0]
 800a168:	300c      	adds	r0, #12
 800a16a:	60a0      	str	r0, [r4, #8]
 800a16c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a170:	f7fe fb2c 	bl	80087cc <memset>
 800a174:	4620      	mov	r0, r4
 800a176:	bd70      	pop	{r4, r5, r6, pc}

0800a178 <__sinit>:
 800a178:	6983      	ldr	r3, [r0, #24]
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	bb33      	cbnz	r3, 800a1ce <__sinit+0x56>
 800a180:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a184:	6503      	str	r3, [r0, #80]	; 0x50
 800a186:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <__sinit+0x58>)
 800a188:	4a12      	ldr	r2, [pc, #72]	; (800a1d4 <__sinit+0x5c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6282      	str	r2, [r0, #40]	; 0x28
 800a18e:	4298      	cmp	r0, r3
 800a190:	bf04      	itt	eq
 800a192:	2301      	moveq	r3, #1
 800a194:	6183      	streq	r3, [r0, #24]
 800a196:	f000 f81f 	bl	800a1d8 <__sfp>
 800a19a:	6060      	str	r0, [r4, #4]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 f81b 	bl	800a1d8 <__sfp>
 800a1a2:	60a0      	str	r0, [r4, #8]
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 f817 	bl	800a1d8 <__sfp>
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	60e0      	str	r0, [r4, #12]
 800a1ae:	2104      	movs	r1, #4
 800a1b0:	6860      	ldr	r0, [r4, #4]
 800a1b2:	f7ff ffa1 	bl	800a0f8 <std>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	2109      	movs	r1, #9
 800a1ba:	68a0      	ldr	r0, [r4, #8]
 800a1bc:	f7ff ff9c 	bl	800a0f8 <std>
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	2112      	movs	r1, #18
 800a1c4:	68e0      	ldr	r0, [r4, #12]
 800a1c6:	f7ff ff97 	bl	800a0f8 <std>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	61a3      	str	r3, [r4, #24]
 800a1ce:	bd10      	pop	{r4, pc}
 800a1d0:	0800b864 	.word	0x0800b864
 800a1d4:	0800a141 	.word	0x0800a141

0800a1d8 <__sfp>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <__sfp+0x70>)
 800a1dc:	681e      	ldr	r6, [r3, #0]
 800a1de:	69b3      	ldr	r3, [r6, #24]
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	b913      	cbnz	r3, 800a1ea <__sfp+0x12>
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff ffc7 	bl	800a178 <__sinit>
 800a1ea:	3648      	adds	r6, #72	; 0x48
 800a1ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	d503      	bpl.n	800a1fc <__sfp+0x24>
 800a1f4:	6833      	ldr	r3, [r6, #0]
 800a1f6:	b133      	cbz	r3, 800a206 <__sfp+0x2e>
 800a1f8:	6836      	ldr	r6, [r6, #0]
 800a1fa:	e7f7      	b.n	800a1ec <__sfp+0x14>
 800a1fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a200:	b16d      	cbz	r5, 800a21e <__sfp+0x46>
 800a202:	3468      	adds	r4, #104	; 0x68
 800a204:	e7f4      	b.n	800a1f0 <__sfp+0x18>
 800a206:	2104      	movs	r1, #4
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff ff9f 	bl	800a14c <__sfmoreglue>
 800a20e:	6030      	str	r0, [r6, #0]
 800a210:	2800      	cmp	r0, #0
 800a212:	d1f1      	bne.n	800a1f8 <__sfp+0x20>
 800a214:	230c      	movs	r3, #12
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	4604      	mov	r4, r0
 800a21a:	4620      	mov	r0, r4
 800a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21e:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <__sfp+0x74>)
 800a220:	6665      	str	r5, [r4, #100]	; 0x64
 800a222:	e9c4 5500 	strd	r5, r5, [r4]
 800a226:	60a5      	str	r5, [r4, #8]
 800a228:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a22c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a230:	2208      	movs	r2, #8
 800a232:	4629      	mov	r1, r5
 800a234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a238:	f7fe fac8 	bl	80087cc <memset>
 800a23c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a244:	e7e9      	b.n	800a21a <__sfp+0x42>
 800a246:	bf00      	nop
 800a248:	0800b864 	.word	0x0800b864
 800a24c:	ffff0001 	.word	0xffff0001

0800a250 <_fwalk_reent>:
 800a250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a254:	4680      	mov	r8, r0
 800a256:	4689      	mov	r9, r1
 800a258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a25c:	2600      	movs	r6, #0
 800a25e:	b914      	cbnz	r4, 800a266 <_fwalk_reent+0x16>
 800a260:	4630      	mov	r0, r6
 800a262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a266:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a26a:	3f01      	subs	r7, #1
 800a26c:	d501      	bpl.n	800a272 <_fwalk_reent+0x22>
 800a26e:	6824      	ldr	r4, [r4, #0]
 800a270:	e7f5      	b.n	800a25e <_fwalk_reent+0xe>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d907      	bls.n	800a288 <_fwalk_reent+0x38>
 800a278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a27c:	3301      	adds	r3, #1
 800a27e:	d003      	beq.n	800a288 <_fwalk_reent+0x38>
 800a280:	4629      	mov	r1, r5
 800a282:	4640      	mov	r0, r8
 800a284:	47c8      	blx	r9
 800a286:	4306      	orrs	r6, r0
 800a288:	3568      	adds	r5, #104	; 0x68
 800a28a:	e7ee      	b.n	800a26a <_fwalk_reent+0x1a>

0800a28c <_localeconv_r>:
 800a28c:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <_localeconv_r+0x14>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6a18      	ldr	r0, [r3, #32]
 800a292:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <_localeconv_r+0x18>)
 800a294:	2800      	cmp	r0, #0
 800a296:	bf08      	it	eq
 800a298:	4618      	moveq	r0, r3
 800a29a:	30f0      	adds	r0, #240	; 0xf0
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000010 	.word	0x20000010
 800a2a4:	20000074 	.word	0x20000074

0800a2a8 <__swhatbuf_r>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	b096      	sub	sp, #88	; 0x58
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	461d      	mov	r5, r3
 800a2b8:	da07      	bge.n	800a2ca <__swhatbuf_r+0x22>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	89b3      	ldrh	r3, [r6, #12]
 800a2c0:	061a      	lsls	r2, r3, #24
 800a2c2:	d410      	bmi.n	800a2e6 <__swhatbuf_r+0x3e>
 800a2c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2c8:	e00e      	b.n	800a2e8 <__swhatbuf_r+0x40>
 800a2ca:	466a      	mov	r2, sp
 800a2cc:	f000 fdaa 	bl	800ae24 <_fstat_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	dbf2      	blt.n	800a2ba <__swhatbuf_r+0x12>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2de:	425a      	negs	r2, r3
 800a2e0:	415a      	adcs	r2, r3
 800a2e2:	602a      	str	r2, [r5, #0]
 800a2e4:	e7ee      	b.n	800a2c4 <__swhatbuf_r+0x1c>
 800a2e6:	2340      	movs	r3, #64	; 0x40
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	b016      	add	sp, #88	; 0x58
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}

0800a2f0 <__smakebuf_r>:
 800a2f0:	898b      	ldrh	r3, [r1, #12]
 800a2f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f4:	079d      	lsls	r5, r3, #30
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	d507      	bpl.n	800a30c <__smakebuf_r+0x1c>
 800a2fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	2301      	movs	r3, #1
 800a306:	6163      	str	r3, [r4, #20]
 800a308:	b002      	add	sp, #8
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	ab01      	add	r3, sp, #4
 800a30e:	466a      	mov	r2, sp
 800a310:	f7ff ffca 	bl	800a2a8 <__swhatbuf_r>
 800a314:	9900      	ldr	r1, [sp, #0]
 800a316:	4605      	mov	r5, r0
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 fb73 	bl	800aa04 <_malloc_r>
 800a31e:	b948      	cbnz	r0, 800a334 <__smakebuf_r+0x44>
 800a320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a324:	059a      	lsls	r2, r3, #22
 800a326:	d4ef      	bmi.n	800a308 <__smakebuf_r+0x18>
 800a328:	f023 0303 	bic.w	r3, r3, #3
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7e3      	b.n	800a2fc <__smakebuf_r+0xc>
 800a334:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <__smakebuf_r+0x7c>)
 800a336:	62b3      	str	r3, [r6, #40]	; 0x28
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	6020      	str	r0, [r4, #0]
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	9b00      	ldr	r3, [sp, #0]
 800a344:	6163      	str	r3, [r4, #20]
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	6120      	str	r0, [r4, #16]
 800a34a:	b15b      	cbz	r3, 800a364 <__smakebuf_r+0x74>
 800a34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a350:	4630      	mov	r0, r6
 800a352:	f000 fd79 	bl	800ae48 <_isatty_r>
 800a356:	b128      	cbz	r0, 800a364 <__smakebuf_r+0x74>
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	f023 0303 	bic.w	r3, r3, #3
 800a35e:	f043 0301 	orr.w	r3, r3, #1
 800a362:	81a3      	strh	r3, [r4, #12]
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	431d      	orrs	r5, r3
 800a368:	81a5      	strh	r5, [r4, #12]
 800a36a:	e7cd      	b.n	800a308 <__smakebuf_r+0x18>
 800a36c:	0800a141 	.word	0x0800a141

0800a370 <malloc>:
 800a370:	4b02      	ldr	r3, [pc, #8]	; (800a37c <malloc+0xc>)
 800a372:	4601      	mov	r1, r0
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	f000 bb45 	b.w	800aa04 <_malloc_r>
 800a37a:	bf00      	nop
 800a37c:	20000010 	.word	0x20000010

0800a380 <memcpy>:
 800a380:	b510      	push	{r4, lr}
 800a382:	1e43      	subs	r3, r0, #1
 800a384:	440a      	add	r2, r1
 800a386:	4291      	cmp	r1, r2
 800a388:	d100      	bne.n	800a38c <memcpy+0xc>
 800a38a:	bd10      	pop	{r4, pc}
 800a38c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a390:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a394:	e7f7      	b.n	800a386 <memcpy+0x6>

0800a396 <_Balloc>:
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a39a:	4604      	mov	r4, r0
 800a39c:	460e      	mov	r6, r1
 800a39e:	b93d      	cbnz	r5, 800a3b0 <_Balloc+0x1a>
 800a3a0:	2010      	movs	r0, #16
 800a3a2:	f7ff ffe5 	bl	800a370 <malloc>
 800a3a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a3a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3ac:	6005      	str	r5, [r0, #0]
 800a3ae:	60c5      	str	r5, [r0, #12]
 800a3b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a3b2:	68eb      	ldr	r3, [r5, #12]
 800a3b4:	b183      	cbz	r3, 800a3d8 <_Balloc+0x42>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3be:	b9b8      	cbnz	r0, 800a3f0 <_Balloc+0x5a>
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	fa01 f506 	lsl.w	r5, r1, r6
 800a3c6:	1d6a      	adds	r2, r5, #5
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fabe 	bl	800a94c <_calloc_r>
 800a3d0:	b160      	cbz	r0, 800a3ec <_Balloc+0x56>
 800a3d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a3d6:	e00e      	b.n	800a3f6 <_Balloc+0x60>
 800a3d8:	2221      	movs	r2, #33	; 0x21
 800a3da:	2104      	movs	r1, #4
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fab5 	bl	800a94c <_calloc_r>
 800a3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e4:	60e8      	str	r0, [r5, #12]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e4      	bne.n	800a3b6 <_Balloc+0x20>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	6802      	ldr	r2, [r0, #0]
 800a3f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3fc:	e7f7      	b.n	800a3ee <_Balloc+0x58>

0800a3fe <_Bfree>:
 800a3fe:	b570      	push	{r4, r5, r6, lr}
 800a400:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a402:	4606      	mov	r6, r0
 800a404:	460d      	mov	r5, r1
 800a406:	b93c      	cbnz	r4, 800a418 <_Bfree+0x1a>
 800a408:	2010      	movs	r0, #16
 800a40a:	f7ff ffb1 	bl	800a370 <malloc>
 800a40e:	6270      	str	r0, [r6, #36]	; 0x24
 800a410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a414:	6004      	str	r4, [r0, #0]
 800a416:	60c4      	str	r4, [r0, #12]
 800a418:	b13d      	cbz	r5, 800a42a <_Bfree+0x2c>
 800a41a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a41c:	686a      	ldr	r2, [r5, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a424:	6029      	str	r1, [r5, #0]
 800a426:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a42a:	bd70      	pop	{r4, r5, r6, pc}

0800a42c <__multadd>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	690d      	ldr	r5, [r1, #16]
 800a432:	461f      	mov	r7, r3
 800a434:	4606      	mov	r6, r0
 800a436:	460c      	mov	r4, r1
 800a438:	f101 0c14 	add.w	ip, r1, #20
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8dc 0000 	ldr.w	r0, [ip]
 800a442:	b281      	uxth	r1, r0
 800a444:	fb02 7101 	mla	r1, r2, r1, r7
 800a448:	0c0f      	lsrs	r7, r1, #16
 800a44a:	0c00      	lsrs	r0, r0, #16
 800a44c:	fb02 7000 	mla	r0, r2, r0, r7
 800a450:	b289      	uxth	r1, r1
 800a452:	3301      	adds	r3, #1
 800a454:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a458:	429d      	cmp	r5, r3
 800a45a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a45e:	f84c 1b04 	str.w	r1, [ip], #4
 800a462:	dcec      	bgt.n	800a43e <__multadd+0x12>
 800a464:	b1d7      	cbz	r7, 800a49c <__multadd+0x70>
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dc12      	bgt.n	800a492 <__multadd+0x66>
 800a46c:	6861      	ldr	r1, [r4, #4]
 800a46e:	4630      	mov	r0, r6
 800a470:	3101      	adds	r1, #1
 800a472:	f7ff ff90 	bl	800a396 <_Balloc>
 800a476:	6922      	ldr	r2, [r4, #16]
 800a478:	3202      	adds	r2, #2
 800a47a:	f104 010c 	add.w	r1, r4, #12
 800a47e:	4680      	mov	r8, r0
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	300c      	adds	r0, #12
 800a484:	f7ff ff7c 	bl	800a380 <memcpy>
 800a488:	4621      	mov	r1, r4
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ffb7 	bl	800a3fe <_Bfree>
 800a490:	4644      	mov	r4, r8
 800a492:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a496:	3501      	adds	r5, #1
 800a498:	615f      	str	r7, [r3, #20]
 800a49a:	6125      	str	r5, [r4, #16]
 800a49c:	4620      	mov	r0, r4
 800a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4a2 <__hi0bits>:
 800a4a2:	0c02      	lsrs	r2, r0, #16
 800a4a4:	0412      	lsls	r2, r2, #16
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	b9b2      	cbnz	r2, 800a4d8 <__hi0bits+0x36>
 800a4aa:	0403      	lsls	r3, r0, #16
 800a4ac:	2010      	movs	r0, #16
 800a4ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4b2:	bf04      	itt	eq
 800a4b4:	021b      	lsleq	r3, r3, #8
 800a4b6:	3008      	addeq	r0, #8
 800a4b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4bc:	bf04      	itt	eq
 800a4be:	011b      	lsleq	r3, r3, #4
 800a4c0:	3004      	addeq	r0, #4
 800a4c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4c6:	bf04      	itt	eq
 800a4c8:	009b      	lsleq	r3, r3, #2
 800a4ca:	3002      	addeq	r0, #2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	db06      	blt.n	800a4de <__hi0bits+0x3c>
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	d503      	bpl.n	800a4dc <__hi0bits+0x3a>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	4770      	bx	lr
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e7e8      	b.n	800a4ae <__hi0bits+0xc>
 800a4dc:	2020      	movs	r0, #32
 800a4de:	4770      	bx	lr

0800a4e0 <__lo0bits>:
 800a4e0:	6803      	ldr	r3, [r0, #0]
 800a4e2:	f013 0207 	ands.w	r2, r3, #7
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	d00b      	beq.n	800a502 <__lo0bits+0x22>
 800a4ea:	07da      	lsls	r2, r3, #31
 800a4ec:	d423      	bmi.n	800a536 <__lo0bits+0x56>
 800a4ee:	0798      	lsls	r0, r3, #30
 800a4f0:	bf49      	itett	mi
 800a4f2:	085b      	lsrmi	r3, r3, #1
 800a4f4:	089b      	lsrpl	r3, r3, #2
 800a4f6:	2001      	movmi	r0, #1
 800a4f8:	600b      	strmi	r3, [r1, #0]
 800a4fa:	bf5c      	itt	pl
 800a4fc:	600b      	strpl	r3, [r1, #0]
 800a4fe:	2002      	movpl	r0, #2
 800a500:	4770      	bx	lr
 800a502:	b298      	uxth	r0, r3
 800a504:	b9a8      	cbnz	r0, 800a532 <__lo0bits+0x52>
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	2010      	movs	r0, #16
 800a50a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a50e:	bf04      	itt	eq
 800a510:	0a1b      	lsreq	r3, r3, #8
 800a512:	3008      	addeq	r0, #8
 800a514:	071a      	lsls	r2, r3, #28
 800a516:	bf04      	itt	eq
 800a518:	091b      	lsreq	r3, r3, #4
 800a51a:	3004      	addeq	r0, #4
 800a51c:	079a      	lsls	r2, r3, #30
 800a51e:	bf04      	itt	eq
 800a520:	089b      	lsreq	r3, r3, #2
 800a522:	3002      	addeq	r0, #2
 800a524:	07da      	lsls	r2, r3, #31
 800a526:	d402      	bmi.n	800a52e <__lo0bits+0x4e>
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	d006      	beq.n	800a53a <__lo0bits+0x5a>
 800a52c:	3001      	adds	r0, #1
 800a52e:	600b      	str	r3, [r1, #0]
 800a530:	4770      	bx	lr
 800a532:	4610      	mov	r0, r2
 800a534:	e7e9      	b.n	800a50a <__lo0bits+0x2a>
 800a536:	2000      	movs	r0, #0
 800a538:	4770      	bx	lr
 800a53a:	2020      	movs	r0, #32
 800a53c:	4770      	bx	lr

0800a53e <__i2b>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	2101      	movs	r1, #1
 800a544:	f7ff ff27 	bl	800a396 <_Balloc>
 800a548:	2201      	movs	r2, #1
 800a54a:	6144      	str	r4, [r0, #20]
 800a54c:	6102      	str	r2, [r0, #16]
 800a54e:	bd10      	pop	{r4, pc}

0800a550 <__multiply>:
 800a550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4614      	mov	r4, r2
 800a556:	690a      	ldr	r2, [r1, #16]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bfb8      	it	lt
 800a55e:	460b      	movlt	r3, r1
 800a560:	4688      	mov	r8, r1
 800a562:	bfbc      	itt	lt
 800a564:	46a0      	movlt	r8, r4
 800a566:	461c      	movlt	r4, r3
 800a568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a56c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a570:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a574:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a578:	eb07 0609 	add.w	r6, r7, r9
 800a57c:	42b3      	cmp	r3, r6
 800a57e:	bfb8      	it	lt
 800a580:	3101      	addlt	r1, #1
 800a582:	f7ff ff08 	bl	800a396 <_Balloc>
 800a586:	f100 0514 	add.w	r5, r0, #20
 800a58a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a58e:	462b      	mov	r3, r5
 800a590:	2200      	movs	r2, #0
 800a592:	4573      	cmp	r3, lr
 800a594:	d316      	bcc.n	800a5c4 <__multiply+0x74>
 800a596:	f104 0214 	add.w	r2, r4, #20
 800a59a:	f108 0114 	add.w	r1, r8, #20
 800a59e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a5a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	9201      	str	r2, [sp, #4]
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d80c      	bhi.n	800a5ca <__multiply+0x7a>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	dd03      	ble.n	800a5bc <__multiply+0x6c>
 800a5b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d05d      	beq.n	800a678 <__multiply+0x128>
 800a5bc:	6106      	str	r6, [r0, #16]
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c4:	f843 2b04 	str.w	r2, [r3], #4
 800a5c8:	e7e3      	b.n	800a592 <__multiply+0x42>
 800a5ca:	f8b2 b000 	ldrh.w	fp, [r2]
 800a5ce:	f1bb 0f00 	cmp.w	fp, #0
 800a5d2:	d023      	beq.n	800a61c <__multiply+0xcc>
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	46ac      	mov	ip, r5
 800a5d8:	f04f 0800 	mov.w	r8, #0
 800a5dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5e0:	f8dc a000 	ldr.w	sl, [ip]
 800a5e4:	b2a3      	uxth	r3, r4
 800a5e6:	fa1f fa8a 	uxth.w	sl, sl
 800a5ea:	fb0b a303 	mla	r3, fp, r3, sl
 800a5ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5f2:	f8dc 4000 	ldr.w	r4, [ip]
 800a5f6:	4443      	add	r3, r8
 800a5f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5fc:	fb0b 840a 	mla	r4, fp, sl, r8
 800a600:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a604:	46e2      	mov	sl, ip
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a60c:	454f      	cmp	r7, r9
 800a60e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a612:	f84a 3b04 	str.w	r3, [sl], #4
 800a616:	d82b      	bhi.n	800a670 <__multiply+0x120>
 800a618:	f8cc 8004 	str.w	r8, [ip, #4]
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a622:	3204      	adds	r2, #4
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d020      	beq.n	800a66c <__multiply+0x11c>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	4689      	mov	r9, r1
 800a62e:	46a8      	mov	r8, r5
 800a630:	f04f 0b00 	mov.w	fp, #0
 800a634:	f8b9 c000 	ldrh.w	ip, [r9]
 800a638:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a63c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a640:	445c      	add	r4, fp
 800a642:	46c4      	mov	ip, r8
 800a644:	b29b      	uxth	r3, r3
 800a646:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a64a:	f84c 3b04 	str.w	r3, [ip], #4
 800a64e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a652:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a656:	0c1b      	lsrs	r3, r3, #16
 800a658:	fb0a b303 	mla	r3, sl, r3, fp
 800a65c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a660:	454f      	cmp	r7, r9
 800a662:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a666:	d805      	bhi.n	800a674 <__multiply+0x124>
 800a668:	f8c8 3004 	str.w	r3, [r8, #4]
 800a66c:	3504      	adds	r5, #4
 800a66e:	e79b      	b.n	800a5a8 <__multiply+0x58>
 800a670:	46d4      	mov	ip, sl
 800a672:	e7b3      	b.n	800a5dc <__multiply+0x8c>
 800a674:	46e0      	mov	r8, ip
 800a676:	e7dd      	b.n	800a634 <__multiply+0xe4>
 800a678:	3e01      	subs	r6, #1
 800a67a:	e799      	b.n	800a5b0 <__multiply+0x60>

0800a67c <__pow5mult>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4615      	mov	r5, r2
 800a682:	f012 0203 	ands.w	r2, r2, #3
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	d007      	beq.n	800a69c <__pow5mult+0x20>
 800a68c:	3a01      	subs	r2, #1
 800a68e:	4c21      	ldr	r4, [pc, #132]	; (800a714 <__pow5mult+0x98>)
 800a690:	2300      	movs	r3, #0
 800a692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a696:	f7ff fec9 	bl	800a42c <__multadd>
 800a69a:	4607      	mov	r7, r0
 800a69c:	10ad      	asrs	r5, r5, #2
 800a69e:	d035      	beq.n	800a70c <__pow5mult+0x90>
 800a6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6a2:	b93c      	cbnz	r4, 800a6b4 <__pow5mult+0x38>
 800a6a4:	2010      	movs	r0, #16
 800a6a6:	f7ff fe63 	bl	800a370 <malloc>
 800a6aa:	6270      	str	r0, [r6, #36]	; 0x24
 800a6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b0:	6004      	str	r4, [r0, #0]
 800a6b2:	60c4      	str	r4, [r0, #12]
 800a6b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6bc:	b94c      	cbnz	r4, 800a6d2 <__pow5mult+0x56>
 800a6be:	f240 2171 	movw	r1, #625	; 0x271
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ff3b 	bl	800a53e <__i2b>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	f04f 0800 	mov.w	r8, #0
 800a6d6:	07eb      	lsls	r3, r5, #31
 800a6d8:	d50a      	bpl.n	800a6f0 <__pow5mult+0x74>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff36 	bl	800a550 <__multiply>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4681      	mov	r9, r0
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff fe88 	bl	800a3fe <_Bfree>
 800a6ee:	464f      	mov	r7, r9
 800a6f0:	106d      	asrs	r5, r5, #1
 800a6f2:	d00b      	beq.n	800a70c <__pow5mult+0x90>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	b938      	cbnz	r0, 800a708 <__pow5mult+0x8c>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff ff27 	bl	800a550 <__multiply>
 800a702:	6020      	str	r0, [r4, #0]
 800a704:	f8c0 8000 	str.w	r8, [r0]
 800a708:	4604      	mov	r4, r0
 800a70a:	e7e4      	b.n	800a6d6 <__pow5mult+0x5a>
 800a70c:	4638      	mov	r0, r7
 800a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a712:	bf00      	nop
 800a714:	0800ba00 	.word	0x0800ba00

0800a718 <__lshift>:
 800a718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6849      	ldr	r1, [r1, #4]
 800a726:	eb0a 0903 	add.w	r9, sl, r3
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	4607      	mov	r7, r0
 800a72e:	4616      	mov	r6, r2
 800a730:	f109 0501 	add.w	r5, r9, #1
 800a734:	42ab      	cmp	r3, r5
 800a736:	db32      	blt.n	800a79e <__lshift+0x86>
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff fe2c 	bl	800a396 <_Balloc>
 800a73e:	2300      	movs	r3, #0
 800a740:	4680      	mov	r8, r0
 800a742:	f100 0114 	add.w	r1, r0, #20
 800a746:	461a      	mov	r2, r3
 800a748:	4553      	cmp	r3, sl
 800a74a:	db2b      	blt.n	800a7a4 <__lshift+0x8c>
 800a74c:	6920      	ldr	r0, [r4, #16]
 800a74e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a752:	f104 0314 	add.w	r3, r4, #20
 800a756:	f016 021f 	ands.w	r2, r6, #31
 800a75a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a75e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a762:	d025      	beq.n	800a7b0 <__lshift+0x98>
 800a764:	f1c2 0e20 	rsb	lr, r2, #32
 800a768:	2000      	movs	r0, #0
 800a76a:	681e      	ldr	r6, [r3, #0]
 800a76c:	468a      	mov	sl, r1
 800a76e:	4096      	lsls	r6, r2
 800a770:	4330      	orrs	r0, r6
 800a772:	f84a 0b04 	str.w	r0, [sl], #4
 800a776:	f853 0b04 	ldr.w	r0, [r3], #4
 800a77a:	459c      	cmp	ip, r3
 800a77c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a780:	d814      	bhi.n	800a7ac <__lshift+0x94>
 800a782:	6048      	str	r0, [r1, #4]
 800a784:	b108      	cbz	r0, 800a78a <__lshift+0x72>
 800a786:	f109 0502 	add.w	r5, r9, #2
 800a78a:	3d01      	subs	r5, #1
 800a78c:	4638      	mov	r0, r7
 800a78e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a792:	4621      	mov	r1, r4
 800a794:	f7ff fe33 	bl	800a3fe <_Bfree>
 800a798:	4640      	mov	r0, r8
 800a79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79e:	3101      	adds	r1, #1
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	e7c7      	b.n	800a734 <__lshift+0x1c>
 800a7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	e7cd      	b.n	800a748 <__lshift+0x30>
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	e7dc      	b.n	800a76a <__lshift+0x52>
 800a7b0:	3904      	subs	r1, #4
 800a7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7ba:	459c      	cmp	ip, r3
 800a7bc:	d8f9      	bhi.n	800a7b2 <__lshift+0x9a>
 800a7be:	e7e4      	b.n	800a78a <__lshift+0x72>

0800a7c0 <__mcmp>:
 800a7c0:	6903      	ldr	r3, [r0, #16]
 800a7c2:	690a      	ldr	r2, [r1, #16]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	b530      	push	{r4, r5, lr}
 800a7c8:	d10c      	bne.n	800a7e4 <__mcmp+0x24>
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	3014      	adds	r0, #20
 800a7ce:	3114      	adds	r1, #20
 800a7d0:	1884      	adds	r4, r0, r2
 800a7d2:	4411      	add	r1, r2
 800a7d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7dc:	4295      	cmp	r5, r2
 800a7de:	d003      	beq.n	800a7e8 <__mcmp+0x28>
 800a7e0:	d305      	bcc.n	800a7ee <__mcmp+0x2e>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd30      	pop	{r4, r5, pc}
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d3f3      	bcc.n	800a7d4 <__mcmp+0x14>
 800a7ec:	e7fa      	b.n	800a7e4 <__mcmp+0x24>
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	e7f7      	b.n	800a7e4 <__mcmp+0x24>

0800a7f4 <__mdiff>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4628      	mov	r0, r5
 800a800:	4614      	mov	r4, r2
 800a802:	f7ff ffdd 	bl	800a7c0 <__mcmp>
 800a806:	1e06      	subs	r6, r0, #0
 800a808:	d108      	bne.n	800a81c <__mdiff+0x28>
 800a80a:	4631      	mov	r1, r6
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff fdc2 	bl	800a396 <_Balloc>
 800a812:	2301      	movs	r3, #1
 800a814:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	bfa4      	itt	ge
 800a81e:	4623      	movge	r3, r4
 800a820:	462c      	movge	r4, r5
 800a822:	4638      	mov	r0, r7
 800a824:	6861      	ldr	r1, [r4, #4]
 800a826:	bfa6      	itte	ge
 800a828:	461d      	movge	r5, r3
 800a82a:	2600      	movge	r6, #0
 800a82c:	2601      	movlt	r6, #1
 800a82e:	f7ff fdb2 	bl	800a396 <_Balloc>
 800a832:	692b      	ldr	r3, [r5, #16]
 800a834:	60c6      	str	r6, [r0, #12]
 800a836:	6926      	ldr	r6, [r4, #16]
 800a838:	f105 0914 	add.w	r9, r5, #20
 800a83c:	f104 0214 	add.w	r2, r4, #20
 800a840:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a844:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a848:	f100 0514 	add.w	r5, r0, #20
 800a84c:	f04f 0e00 	mov.w	lr, #0
 800a850:	f852 ab04 	ldr.w	sl, [r2], #4
 800a854:	f859 4b04 	ldr.w	r4, [r9], #4
 800a858:	fa1e f18a 	uxtah	r1, lr, sl
 800a85c:	b2a3      	uxth	r3, r4
 800a85e:	1ac9      	subs	r1, r1, r3
 800a860:	0c23      	lsrs	r3, r4, #16
 800a862:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a866:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a86a:	b289      	uxth	r1, r1
 800a86c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a870:	45c8      	cmp	r8, r9
 800a872:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a876:	4694      	mov	ip, r2
 800a878:	f845 3b04 	str.w	r3, [r5], #4
 800a87c:	d8e8      	bhi.n	800a850 <__mdiff+0x5c>
 800a87e:	45bc      	cmp	ip, r7
 800a880:	d304      	bcc.n	800a88c <__mdiff+0x98>
 800a882:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a886:	b183      	cbz	r3, 800a8aa <__mdiff+0xb6>
 800a888:	6106      	str	r6, [r0, #16]
 800a88a:	e7c5      	b.n	800a818 <__mdiff+0x24>
 800a88c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a890:	fa1e f381 	uxtah	r3, lr, r1
 800a894:	141a      	asrs	r2, r3, #16
 800a896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a8a4:	f845 3b04 	str.w	r3, [r5], #4
 800a8a8:	e7e9      	b.n	800a87e <__mdiff+0x8a>
 800a8aa:	3e01      	subs	r6, #1
 800a8ac:	e7e9      	b.n	800a882 <__mdiff+0x8e>

0800a8ae <__d2b>:
 800a8ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8b2:	460e      	mov	r6, r1
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	ec59 8b10 	vmov	r8, r9, d0
 800a8ba:	4615      	mov	r5, r2
 800a8bc:	f7ff fd6b 	bl	800a396 <_Balloc>
 800a8c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8ca:	bb34      	cbnz	r4, 800a91a <__d2b+0x6c>
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	f1b8 0300 	subs.w	r3, r8, #0
 800a8d2:	d027      	beq.n	800a924 <__d2b+0x76>
 800a8d4:	a802      	add	r0, sp, #8
 800a8d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8da:	f7ff fe01 	bl	800a4e0 <__lo0bits>
 800a8de:	9900      	ldr	r1, [sp, #0]
 800a8e0:	b1f0      	cbz	r0, 800a920 <__d2b+0x72>
 800a8e2:	9a01      	ldr	r2, [sp, #4]
 800a8e4:	f1c0 0320 	rsb	r3, r0, #32
 800a8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	40c2      	lsrs	r2, r0
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	9b01      	ldr	r3, [sp, #4]
 800a8f6:	61bb      	str	r3, [r7, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bf14      	ite	ne
 800a8fc:	2102      	movne	r1, #2
 800a8fe:	2101      	moveq	r1, #1
 800a900:	6139      	str	r1, [r7, #16]
 800a902:	b1c4      	cbz	r4, 800a936 <__d2b+0x88>
 800a904:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a908:	4404      	add	r4, r0
 800a90a:	6034      	str	r4, [r6, #0]
 800a90c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a910:	6028      	str	r0, [r5, #0]
 800a912:	4638      	mov	r0, r7
 800a914:	b003      	add	sp, #12
 800a916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a91e:	e7d5      	b.n	800a8cc <__d2b+0x1e>
 800a920:	6179      	str	r1, [r7, #20]
 800a922:	e7e7      	b.n	800a8f4 <__d2b+0x46>
 800a924:	a801      	add	r0, sp, #4
 800a926:	f7ff fddb 	bl	800a4e0 <__lo0bits>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	2101      	movs	r1, #1
 800a930:	6139      	str	r1, [r7, #16]
 800a932:	3020      	adds	r0, #32
 800a934:	e7e5      	b.n	800a902 <__d2b+0x54>
 800a936:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a93a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a93e:	6030      	str	r0, [r6, #0]
 800a940:	6918      	ldr	r0, [r3, #16]
 800a942:	f7ff fdae 	bl	800a4a2 <__hi0bits>
 800a946:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a94a:	e7e1      	b.n	800a910 <__d2b+0x62>

0800a94c <_calloc_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	fb02 f401 	mul.w	r4, r2, r1
 800a952:	4621      	mov	r1, r4
 800a954:	f000 f856 	bl	800aa04 <_malloc_r>
 800a958:	4605      	mov	r5, r0
 800a95a:	b118      	cbz	r0, 800a964 <_calloc_r+0x18>
 800a95c:	4622      	mov	r2, r4
 800a95e:	2100      	movs	r1, #0
 800a960:	f7fd ff34 	bl	80087cc <memset>
 800a964:	4628      	mov	r0, r5
 800a966:	bd38      	pop	{r3, r4, r5, pc}

0800a968 <_free_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4605      	mov	r5, r0
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d045      	beq.n	800a9fc <_free_r+0x94>
 800a970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a974:	1f0c      	subs	r4, r1, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfb8      	it	lt
 800a97a:	18e4      	addlt	r4, r4, r3
 800a97c:	f000 fa98 	bl	800aeb0 <__malloc_lock>
 800a980:	4a1f      	ldr	r2, [pc, #124]	; (800aa00 <_free_r+0x98>)
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	4610      	mov	r0, r2
 800a986:	b933      	cbnz	r3, 800a996 <_free_r+0x2e>
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	6014      	str	r4, [r2, #0]
 800a98c:	4628      	mov	r0, r5
 800a98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a992:	f000 ba8e 	b.w	800aeb2 <__malloc_unlock>
 800a996:	42a3      	cmp	r3, r4
 800a998:	d90c      	bls.n	800a9b4 <_free_r+0x4c>
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	1862      	adds	r2, r4, r1
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	bf04      	itt	eq
 800a9a2:	681a      	ldreq	r2, [r3, #0]
 800a9a4:	685b      	ldreq	r3, [r3, #4]
 800a9a6:	6063      	str	r3, [r4, #4]
 800a9a8:	bf04      	itt	eq
 800a9aa:	1852      	addeq	r2, r2, r1
 800a9ac:	6022      	streq	r2, [r4, #0]
 800a9ae:	6004      	str	r4, [r0, #0]
 800a9b0:	e7ec      	b.n	800a98c <_free_r+0x24>
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	b10a      	cbz	r2, 800a9bc <_free_r+0x54>
 800a9b8:	42a2      	cmp	r2, r4
 800a9ba:	d9fa      	bls.n	800a9b2 <_free_r+0x4a>
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	1858      	adds	r0, r3, r1
 800a9c0:	42a0      	cmp	r0, r4
 800a9c2:	d10b      	bne.n	800a9dc <_free_r+0x74>
 800a9c4:	6820      	ldr	r0, [r4, #0]
 800a9c6:	4401      	add	r1, r0
 800a9c8:	1858      	adds	r0, r3, r1
 800a9ca:	4282      	cmp	r2, r0
 800a9cc:	6019      	str	r1, [r3, #0]
 800a9ce:	d1dd      	bne.n	800a98c <_free_r+0x24>
 800a9d0:	6810      	ldr	r0, [r2, #0]
 800a9d2:	6852      	ldr	r2, [r2, #4]
 800a9d4:	605a      	str	r2, [r3, #4]
 800a9d6:	4401      	add	r1, r0
 800a9d8:	6019      	str	r1, [r3, #0]
 800a9da:	e7d7      	b.n	800a98c <_free_r+0x24>
 800a9dc:	d902      	bls.n	800a9e4 <_free_r+0x7c>
 800a9de:	230c      	movs	r3, #12
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	e7d3      	b.n	800a98c <_free_r+0x24>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	1821      	adds	r1, r4, r0
 800a9e8:	428a      	cmp	r2, r1
 800a9ea:	bf04      	itt	eq
 800a9ec:	6811      	ldreq	r1, [r2, #0]
 800a9ee:	6852      	ldreq	r2, [r2, #4]
 800a9f0:	6062      	str	r2, [r4, #4]
 800a9f2:	bf04      	itt	eq
 800a9f4:	1809      	addeq	r1, r1, r0
 800a9f6:	6021      	streq	r1, [r4, #0]
 800a9f8:	605c      	str	r4, [r3, #4]
 800a9fa:	e7c7      	b.n	800a98c <_free_r+0x24>
 800a9fc:	bd38      	pop	{r3, r4, r5, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000860 	.word	0x20000860

0800aa04 <_malloc_r>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	1ccd      	adds	r5, r1, #3
 800aa08:	f025 0503 	bic.w	r5, r5, #3
 800aa0c:	3508      	adds	r5, #8
 800aa0e:	2d0c      	cmp	r5, #12
 800aa10:	bf38      	it	cc
 800aa12:	250c      	movcc	r5, #12
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	4606      	mov	r6, r0
 800aa18:	db01      	blt.n	800aa1e <_malloc_r+0x1a>
 800aa1a:	42a9      	cmp	r1, r5
 800aa1c:	d903      	bls.n	800aa26 <_malloc_r+0x22>
 800aa1e:	230c      	movs	r3, #12
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	2000      	movs	r0, #0
 800aa24:	bd70      	pop	{r4, r5, r6, pc}
 800aa26:	f000 fa43 	bl	800aeb0 <__malloc_lock>
 800aa2a:	4a21      	ldr	r2, [pc, #132]	; (800aab0 <_malloc_r+0xac>)
 800aa2c:	6814      	ldr	r4, [r2, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	b991      	cbnz	r1, 800aa58 <_malloc_r+0x54>
 800aa32:	4c20      	ldr	r4, [pc, #128]	; (800aab4 <_malloc_r+0xb0>)
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	b91b      	cbnz	r3, 800aa40 <_malloc_r+0x3c>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f97d 	bl	800ad38 <_sbrk_r>
 800aa3e:	6020      	str	r0, [r4, #0]
 800aa40:	4629      	mov	r1, r5
 800aa42:	4630      	mov	r0, r6
 800aa44:	f000 f978 	bl	800ad38 <_sbrk_r>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d124      	bne.n	800aa96 <_malloc_r+0x92>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	4630      	mov	r0, r6
 800aa52:	f000 fa2e 	bl	800aeb2 <__malloc_unlock>
 800aa56:	e7e4      	b.n	800aa22 <_malloc_r+0x1e>
 800aa58:	680b      	ldr	r3, [r1, #0]
 800aa5a:	1b5b      	subs	r3, r3, r5
 800aa5c:	d418      	bmi.n	800aa90 <_malloc_r+0x8c>
 800aa5e:	2b0b      	cmp	r3, #11
 800aa60:	d90f      	bls.n	800aa82 <_malloc_r+0x7e>
 800aa62:	600b      	str	r3, [r1, #0]
 800aa64:	50cd      	str	r5, [r1, r3]
 800aa66:	18cc      	adds	r4, r1, r3
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f000 fa22 	bl	800aeb2 <__malloc_unlock>
 800aa6e:	f104 000b 	add.w	r0, r4, #11
 800aa72:	1d23      	adds	r3, r4, #4
 800aa74:	f020 0007 	bic.w	r0, r0, #7
 800aa78:	1ac3      	subs	r3, r0, r3
 800aa7a:	d0d3      	beq.n	800aa24 <_malloc_r+0x20>
 800aa7c:	425a      	negs	r2, r3
 800aa7e:	50e2      	str	r2, [r4, r3]
 800aa80:	e7d0      	b.n	800aa24 <_malloc_r+0x20>
 800aa82:	428c      	cmp	r4, r1
 800aa84:	684b      	ldr	r3, [r1, #4]
 800aa86:	bf16      	itet	ne
 800aa88:	6063      	strne	r3, [r4, #4]
 800aa8a:	6013      	streq	r3, [r2, #0]
 800aa8c:	460c      	movne	r4, r1
 800aa8e:	e7eb      	b.n	800aa68 <_malloc_r+0x64>
 800aa90:	460c      	mov	r4, r1
 800aa92:	6849      	ldr	r1, [r1, #4]
 800aa94:	e7cc      	b.n	800aa30 <_malloc_r+0x2c>
 800aa96:	1cc4      	adds	r4, r0, #3
 800aa98:	f024 0403 	bic.w	r4, r4, #3
 800aa9c:	42a0      	cmp	r0, r4
 800aa9e:	d005      	beq.n	800aaac <_malloc_r+0xa8>
 800aaa0:	1a21      	subs	r1, r4, r0
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f000 f948 	bl	800ad38 <_sbrk_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d0cf      	beq.n	800aa4c <_malloc_r+0x48>
 800aaac:	6025      	str	r5, [r4, #0]
 800aaae:	e7db      	b.n	800aa68 <_malloc_r+0x64>
 800aab0:	20000860 	.word	0x20000860
 800aab4:	20000864 	.word	0x20000864

0800aab8 <__sfputc_r>:
 800aab8:	6893      	ldr	r3, [r2, #8]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	b410      	push	{r4}
 800aac0:	6093      	str	r3, [r2, #8]
 800aac2:	da08      	bge.n	800aad6 <__sfputc_r+0x1e>
 800aac4:	6994      	ldr	r4, [r2, #24]
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	db01      	blt.n	800aace <__sfputc_r+0x16>
 800aaca:	290a      	cmp	r1, #10
 800aacc:	d103      	bne.n	800aad6 <__sfputc_r+0x1e>
 800aace:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad2:	f7fe bb5b 	b.w	800918c <__swbuf_r>
 800aad6:	6813      	ldr	r3, [r2, #0]
 800aad8:	1c58      	adds	r0, r3, #1
 800aada:	6010      	str	r0, [r2, #0]
 800aadc:	7019      	strb	r1, [r3, #0]
 800aade:	4608      	mov	r0, r1
 800aae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <__sfputs_r>:
 800aae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	4614      	mov	r4, r2
 800aaee:	18d5      	adds	r5, r2, r3
 800aaf0:	42ac      	cmp	r4, r5
 800aaf2:	d101      	bne.n	800aaf8 <__sfputs_r+0x12>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e007      	b.n	800ab08 <__sfputs_r+0x22>
 800aaf8:	463a      	mov	r2, r7
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7ff ffda 	bl	800aab8 <__sfputc_r>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d1f3      	bne.n	800aaf0 <__sfputs_r+0xa>
 800ab08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab0c <_vfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	460c      	mov	r4, r1
 800ab12:	b09d      	sub	sp, #116	; 0x74
 800ab14:	4617      	mov	r7, r2
 800ab16:	461d      	mov	r5, r3
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b118      	cbz	r0, 800ab24 <_vfiprintf_r+0x18>
 800ab1c:	6983      	ldr	r3, [r0, #24]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <_vfiprintf_r+0x18>
 800ab20:	f7ff fb2a 	bl	800a178 <__sinit>
 800ab24:	4b7c      	ldr	r3, [pc, #496]	; (800ad18 <_vfiprintf_r+0x20c>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d158      	bne.n	800abdc <_vfiprintf_r+0xd0>
 800ab2a:	6874      	ldr	r4, [r6, #4]
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	0718      	lsls	r0, r3, #28
 800ab30:	d55e      	bpl.n	800abf0 <_vfiprintf_r+0xe4>
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d05b      	beq.n	800abf0 <_vfiprintf_r+0xe4>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab42:	2330      	movs	r3, #48	; 0x30
 800ab44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab48:	9503      	str	r5, [sp, #12]
 800ab4a:	f04f 0b01 	mov.w	fp, #1
 800ab4e:	46b8      	mov	r8, r7
 800ab50:	4645      	mov	r5, r8
 800ab52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab56:	b10b      	cbz	r3, 800ab5c <_vfiprintf_r+0x50>
 800ab58:	2b25      	cmp	r3, #37	; 0x25
 800ab5a:	d154      	bne.n	800ac06 <_vfiprintf_r+0xfa>
 800ab5c:	ebb8 0a07 	subs.w	sl, r8, r7
 800ab60:	d00b      	beq.n	800ab7a <_vfiprintf_r+0x6e>
 800ab62:	4653      	mov	r3, sl
 800ab64:	463a      	mov	r2, r7
 800ab66:	4621      	mov	r1, r4
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff ffbc 	bl	800aae6 <__sfputs_r>
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f000 80c2 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800ab74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab76:	4453      	add	r3, sl
 800ab78:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7a:	f898 3000 	ldrb.w	r3, [r8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 80ba 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800ab84:	2300      	movs	r3, #0
 800ab86:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab96:	931a      	str	r3, [sp, #104]	; 0x68
 800ab98:	46a8      	mov	r8, r5
 800ab9a:	2205      	movs	r2, #5
 800ab9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aba0:	485e      	ldr	r0, [pc, #376]	; (800ad1c <_vfiprintf_r+0x210>)
 800aba2:	f7f5 fb1d 	bl	80001e0 <memchr>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	bb78      	cbnz	r0, 800ac0a <_vfiprintf_r+0xfe>
 800abaa:	06d9      	lsls	r1, r3, #27
 800abac:	bf44      	itt	mi
 800abae:	2220      	movmi	r2, #32
 800abb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abb4:	071a      	lsls	r2, r3, #28
 800abb6:	bf44      	itt	mi
 800abb8:	222b      	movmi	r2, #43	; 0x2b
 800abba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abbe:	782a      	ldrb	r2, [r5, #0]
 800abc0:	2a2a      	cmp	r2, #42	; 0x2a
 800abc2:	d02a      	beq.n	800ac1a <_vfiprintf_r+0x10e>
 800abc4:	9a07      	ldr	r2, [sp, #28]
 800abc6:	46a8      	mov	r8, r5
 800abc8:	2000      	movs	r0, #0
 800abca:	250a      	movs	r5, #10
 800abcc:	4641      	mov	r1, r8
 800abce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd2:	3b30      	subs	r3, #48	; 0x30
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	d969      	bls.n	800acac <_vfiprintf_r+0x1a0>
 800abd8:	b360      	cbz	r0, 800ac34 <_vfiprintf_r+0x128>
 800abda:	e024      	b.n	800ac26 <_vfiprintf_r+0x11a>
 800abdc:	4b50      	ldr	r3, [pc, #320]	; (800ad20 <_vfiprintf_r+0x214>)
 800abde:	429c      	cmp	r4, r3
 800abe0:	d101      	bne.n	800abe6 <_vfiprintf_r+0xda>
 800abe2:	68b4      	ldr	r4, [r6, #8]
 800abe4:	e7a2      	b.n	800ab2c <_vfiprintf_r+0x20>
 800abe6:	4b4f      	ldr	r3, [pc, #316]	; (800ad24 <_vfiprintf_r+0x218>)
 800abe8:	429c      	cmp	r4, r3
 800abea:	bf08      	it	eq
 800abec:	68f4      	ldreq	r4, [r6, #12]
 800abee:	e79d      	b.n	800ab2c <_vfiprintf_r+0x20>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7fe fb1c 	bl	8009230 <__swsetup_r>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d09d      	beq.n	800ab38 <_vfiprintf_r+0x2c>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b01d      	add	sp, #116	; 0x74
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	46a8      	mov	r8, r5
 800ac08:	e7a2      	b.n	800ab50 <_vfiprintf_r+0x44>
 800ac0a:	4a44      	ldr	r2, [pc, #272]	; (800ad1c <_vfiprintf_r+0x210>)
 800ac0c:	1a80      	subs	r0, r0, r2
 800ac0e:	fa0b f000 	lsl.w	r0, fp, r0
 800ac12:	4318      	orrs	r0, r3
 800ac14:	9004      	str	r0, [sp, #16]
 800ac16:	4645      	mov	r5, r8
 800ac18:	e7be      	b.n	800ab98 <_vfiprintf_r+0x8c>
 800ac1a:	9a03      	ldr	r2, [sp, #12]
 800ac1c:	1d11      	adds	r1, r2, #4
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	9103      	str	r1, [sp, #12]
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	db01      	blt.n	800ac2a <_vfiprintf_r+0x11e>
 800ac26:	9207      	str	r2, [sp, #28]
 800ac28:	e004      	b.n	800ac34 <_vfiprintf_r+0x128>
 800ac2a:	4252      	negs	r2, r2
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	9207      	str	r2, [sp, #28]
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	f898 3000 	ldrb.w	r3, [r8]
 800ac38:	2b2e      	cmp	r3, #46	; 0x2e
 800ac3a:	d10e      	bne.n	800ac5a <_vfiprintf_r+0x14e>
 800ac3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac40:	2b2a      	cmp	r3, #42	; 0x2a
 800ac42:	d138      	bne.n	800acb6 <_vfiprintf_r+0x1aa>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	9203      	str	r2, [sp, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfb8      	it	lt
 800ac50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac54:	f108 0802 	add.w	r8, r8, #2
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	4d33      	ldr	r5, [pc, #204]	; (800ad28 <_vfiprintf_r+0x21c>)
 800ac5c:	f898 1000 	ldrb.w	r1, [r8]
 800ac60:	2203      	movs	r2, #3
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7f5 fabc 	bl	80001e0 <memchr>
 800ac68:	b140      	cbz	r0, 800ac7c <_vfiprintf_r+0x170>
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	1b40      	subs	r0, r0, r5
 800ac6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	4303      	orrs	r3, r0
 800ac76:	f108 0801 	add.w	r8, r8, #1
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	f898 1000 	ldrb.w	r1, [r8]
 800ac80:	482a      	ldr	r0, [pc, #168]	; (800ad2c <_vfiprintf_r+0x220>)
 800ac82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac86:	2206      	movs	r2, #6
 800ac88:	f108 0701 	add.w	r7, r8, #1
 800ac8c:	f7f5 faa8 	bl	80001e0 <memchr>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d037      	beq.n	800ad04 <_vfiprintf_r+0x1f8>
 800ac94:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <_vfiprintf_r+0x224>)
 800ac96:	bb1b      	cbnz	r3, 800ace0 <_vfiprintf_r+0x1d4>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	3307      	adds	r3, #7
 800ac9c:	f023 0307 	bic.w	r3, r3, #7
 800aca0:	3308      	adds	r3, #8
 800aca2:	9303      	str	r3, [sp, #12]
 800aca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca6:	444b      	add	r3, r9
 800aca8:	9309      	str	r3, [sp, #36]	; 0x24
 800acaa:	e750      	b.n	800ab4e <_vfiprintf_r+0x42>
 800acac:	fb05 3202 	mla	r2, r5, r2, r3
 800acb0:	2001      	movs	r0, #1
 800acb2:	4688      	mov	r8, r1
 800acb4:	e78a      	b.n	800abcc <_vfiprintf_r+0xc0>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f108 0801 	add.w	r8, r8, #1
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	4619      	mov	r1, r3
 800acc0:	250a      	movs	r5, #10
 800acc2:	4640      	mov	r0, r8
 800acc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc8:	3a30      	subs	r2, #48	; 0x30
 800acca:	2a09      	cmp	r2, #9
 800accc:	d903      	bls.n	800acd6 <_vfiprintf_r+0x1ca>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c3      	beq.n	800ac5a <_vfiprintf_r+0x14e>
 800acd2:	9105      	str	r1, [sp, #20]
 800acd4:	e7c1      	b.n	800ac5a <_vfiprintf_r+0x14e>
 800acd6:	fb05 2101 	mla	r1, r5, r1, r2
 800acda:	2301      	movs	r3, #1
 800acdc:	4680      	mov	r8, r0
 800acde:	e7f0      	b.n	800acc2 <_vfiprintf_r+0x1b6>
 800ace0:	ab03      	add	r3, sp, #12
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4622      	mov	r2, r4
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <_vfiprintf_r+0x228>)
 800ace8:	a904      	add	r1, sp, #16
 800acea:	4630      	mov	r0, r6
 800acec:	f7fd fe0a 	bl	8008904 <_printf_float>
 800acf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acf4:	4681      	mov	r9, r0
 800acf6:	d1d5      	bne.n	800aca4 <_vfiprintf_r+0x198>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	065b      	lsls	r3, r3, #25
 800acfc:	f53f af7e 	bmi.w	800abfc <_vfiprintf_r+0xf0>
 800ad00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad02:	e77d      	b.n	800ac00 <_vfiprintf_r+0xf4>
 800ad04:	ab03      	add	r3, sp, #12
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	4622      	mov	r2, r4
 800ad0a:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <_vfiprintf_r+0x228>)
 800ad0c:	a904      	add	r1, sp, #16
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7fe f8ae 	bl	8008e70 <_printf_i>
 800ad14:	e7ec      	b.n	800acf0 <_vfiprintf_r+0x1e4>
 800ad16:	bf00      	nop
 800ad18:	0800b8cc 	.word	0x0800b8cc
 800ad1c:	0800ba0c 	.word	0x0800ba0c
 800ad20:	0800b8ec 	.word	0x0800b8ec
 800ad24:	0800b8ac 	.word	0x0800b8ac
 800ad28:	0800ba12 	.word	0x0800ba12
 800ad2c:	0800ba16 	.word	0x0800ba16
 800ad30:	08008905 	.word	0x08008905
 800ad34:	0800aae7 	.word	0x0800aae7

0800ad38 <_sbrk_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4c06      	ldr	r4, [pc, #24]	; (800ad54 <_sbrk_r+0x1c>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	f7f7 faac 	bl	80022a0 <_sbrk>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_sbrk_r+0x1a>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_sbrk_r+0x1a>
 800ad50:	602b      	str	r3, [r5, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20000f90 	.word	0x20000f90

0800ad58 <__sread>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	f000 f8a8 	bl	800aeb4 <_read_r>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	bfab      	itete	ge
 800ad68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad6c:	181b      	addge	r3, r3, r0
 800ad6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad72:	bfac      	ite	ge
 800ad74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad76:	81a3      	strhlt	r3, [r4, #12]
 800ad78:	bd10      	pop	{r4, pc}

0800ad7a <__swrite>:
 800ad7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7e:	461f      	mov	r7, r3
 800ad80:	898b      	ldrh	r3, [r1, #12]
 800ad82:	05db      	lsls	r3, r3, #23
 800ad84:	4605      	mov	r5, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	4616      	mov	r6, r2
 800ad8a:	d505      	bpl.n	800ad98 <__swrite+0x1e>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	f000 f868 	bl	800ae68 <_lseek_r>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	4628      	mov	r0, r5
 800adaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	f000 b817 	b.w	800ade0 <_write_r>

0800adb2 <__sseek>:
 800adb2:	b510      	push	{r4, lr}
 800adb4:	460c      	mov	r4, r1
 800adb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adba:	f000 f855 	bl	800ae68 <_lseek_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	bf15      	itete	ne
 800adc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800adc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adce:	81a3      	strheq	r3, [r4, #12]
 800add0:	bf18      	it	ne
 800add2:	81a3      	strhne	r3, [r4, #12]
 800add4:	bd10      	pop	{r4, pc}

0800add6 <__sclose>:
 800add6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adda:	f000 b813 	b.w	800ae04 <_close_r>
	...

0800ade0 <_write_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4c07      	ldr	r4, [pc, #28]	; (800ae00 <_write_r+0x20>)
 800ade4:	4605      	mov	r5, r0
 800ade6:	4608      	mov	r0, r1
 800ade8:	4611      	mov	r1, r2
 800adea:	2200      	movs	r2, #0
 800adec:	6022      	str	r2, [r4, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	f7f7 fa06 	bl	8002200 <_write>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_write_r+0x1e>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_write_r+0x1e>
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20000f90 	.word	0x20000f90

0800ae04 <_close_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4c06      	ldr	r4, [pc, #24]	; (800ae20 <_close_r+0x1c>)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	f7f7 fa12 	bl	8002238 <_close>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d102      	bne.n	800ae1e <_close_r+0x1a>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	b103      	cbz	r3, 800ae1e <_close_r+0x1a>
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
 800ae20:	20000f90 	.word	0x20000f90

0800ae24 <_fstat_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4c07      	ldr	r4, [pc, #28]	; (800ae44 <_fstat_r+0x20>)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	f7f7 fa0d 	bl	8002250 <_fstat>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	d102      	bne.n	800ae40 <_fstat_r+0x1c>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	b103      	cbz	r3, 800ae40 <_fstat_r+0x1c>
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	bd38      	pop	{r3, r4, r5, pc}
 800ae42:	bf00      	nop
 800ae44:	20000f90 	.word	0x20000f90

0800ae48 <_isatty_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4c06      	ldr	r4, [pc, #24]	; (800ae64 <_isatty_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4605      	mov	r5, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	f7f7 fa0c 	bl	8002270 <_isatty>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_isatty_r+0x1a>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_isatty_r+0x1a>
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20000f90 	.word	0x20000f90

0800ae68 <_lseek_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4c07      	ldr	r4, [pc, #28]	; (800ae88 <_lseek_r+0x20>)
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	4608      	mov	r0, r1
 800ae70:	4611      	mov	r1, r2
 800ae72:	2200      	movs	r2, #0
 800ae74:	6022      	str	r2, [r4, #0]
 800ae76:	461a      	mov	r2, r3
 800ae78:	f7f7 fa05 	bl	8002286 <_lseek>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_lseek_r+0x1e>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_lseek_r+0x1e>
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	20000f90 	.word	0x20000f90

0800ae8c <__ascii_mbtowc>:
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	b901      	cbnz	r1, 800ae92 <__ascii_mbtowc+0x6>
 800ae90:	a901      	add	r1, sp, #4
 800ae92:	b142      	cbz	r2, 800aea6 <__ascii_mbtowc+0x1a>
 800ae94:	b14b      	cbz	r3, 800aeaa <__ascii_mbtowc+0x1e>
 800ae96:	7813      	ldrb	r3, [r2, #0]
 800ae98:	600b      	str	r3, [r1, #0]
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	1c10      	adds	r0, r2, #0
 800ae9e:	bf18      	it	ne
 800aea0:	2001      	movne	r0, #1
 800aea2:	b002      	add	sp, #8
 800aea4:	4770      	bx	lr
 800aea6:	4610      	mov	r0, r2
 800aea8:	e7fb      	b.n	800aea2 <__ascii_mbtowc+0x16>
 800aeaa:	f06f 0001 	mvn.w	r0, #1
 800aeae:	e7f8      	b.n	800aea2 <__ascii_mbtowc+0x16>

0800aeb0 <__malloc_lock>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__malloc_unlock>:
 800aeb2:	4770      	bx	lr

0800aeb4 <_read_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4c07      	ldr	r4, [pc, #28]	; (800aed4 <_read_r+0x20>)
 800aeb8:	4605      	mov	r5, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	6022      	str	r2, [r4, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f7 f97f 	bl	80021c6 <_read>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_read_r+0x1e>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_read_r+0x1e>
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20000f90 	.word	0x20000f90

0800aed8 <__ascii_wctomb>:
 800aed8:	b149      	cbz	r1, 800aeee <__ascii_wctomb+0x16>
 800aeda:	2aff      	cmp	r2, #255	; 0xff
 800aedc:	bf85      	ittet	hi
 800aede:	238a      	movhi	r3, #138	; 0x8a
 800aee0:	6003      	strhi	r3, [r0, #0]
 800aee2:	700a      	strbls	r2, [r1, #0]
 800aee4:	f04f 30ff 	movhi.w	r0, #4294967295
 800aee8:	bf98      	it	ls
 800aeea:	2001      	movls	r0, #1
 800aeec:	4770      	bx	lr
 800aeee:	4608      	mov	r0, r1
 800aef0:	4770      	bx	lr
	...

0800aef4 <_init>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr

0800af00 <_fini>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr
